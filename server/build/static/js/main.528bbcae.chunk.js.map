{"version":3,"sources":["reportWebVitals.ts","styles/Media.ts","styles/GlobalStyles.tsx","serviceWorkerRegistration.ts","styled-comp.tsx","modules/Common/index.ts","useHooks/useCommon.tsx","config/axois.config.ts","lib/axios.ts","modules/Posts/lib/PostsUtil.ts","modules/Posts/index.ts","useHooks/usePosts.tsx","modules/Posts/lib/PostsAction.ts","component/TextEditor/SelectTopic.tsx","component/TextEditor/WriteTopicName.tsx","config/textEditor.config.ts","modules/Topic/index.ts","useHooks/useTopic.tsx","modules/TextEditor/index.ts","useHooks/useTextEdit.tsx","useHooks/useCSRF.tsx","component/TextEditor/Editor.tsx","component/TextEditor/TextEditBtnBox.tsx","component/TextEditor/SelectKindOfPosts.tsx","component/TextEditor/PostsDetail.tsx","component/TextEditor/CreateNewTopic.tsx","component/TextEditor/StoragePost.tsx","useHooks/useHelmet.tsx","component/Content/PostsContainer.tsx","lib/isNewPost.ts","component/Content/EntryPostsContainer.tsx","component/Home/TopMetaBar.tsx","image/Logo.svg","component/Home/SideNavBar.tsx","component/Home/SideNavBarTopic.tsx","component/Content/SpecificTopicContainer.tsx","component/About/AboutContainer.tsx","useHooks/useLoginFlag.tsx","component/Home/CommonEntry.tsx","pages/Entry.tsx","pages/TextEditor.tsx","pages/Posts.tsx","pages/Admin.tsx","shared/App.tsx","modules/index.ts","middleWare/TokenMiddleWare.ts","lib/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","sizes","desktop","postBox","tablet","mobile","small","smallest","media","Object","keys","reduce","acc","label","args","css","GlobalStyles","createGlobalStyle","reset","window","innerHeight","Boolean","location","hostname","match","EntryContainerComp","styled","div","props","width","postsContainerMixin","postsItemMixin","lighten","rotate","keyframes","TopMetaBarComp","section","SideBarComp","leftWidth","SideBarThunmbNailComp","SideBarMetaDataComp","SideBarPostsContainerComp","ul","SideBarPostsItemComp","NavLink","EntryPostsContainerComp","SpecificTopicContainerComp","EntryPostsItemComp","SpecificTopicItemsComp","PostsContainerComp","AdminLoginBoxComp","logo","WriteBox","WriteConditionBox","memo","WriteBtnBoxComp","WriteBtnComp","button","darken","SelectTopicBoxComp","SelectTopicItemComp","CreateNewTopicComp","CreateNewTopicListBoxComp","DeleteTopicIconComp","AddTopicBtnComp","CreateNewTopicListItemComp","SelectKindOfPostsBoxComp","SelectKindOfPosts","PostsDetailComp","TemporaryStorageComp","TemporaryPostComp","AboutContainerComp","SET_IS_LOGIN","NEW_REQUEST","initialState","screen","login","loading","newRequest","e","useCommon","dispatch","useDispatch","useSelector","state","common","onSetLogin","useCallback","type","payload","setNewRequset","dotenv","instance","axios","create","withCredentials","defaults","headers","interceptors","request","use","config","err","Promise","reject","util","getCSRTtoken","url","method","getGACount","getTopicName","savePost","data","token","modifyPost","uid","saveTempPost","temporaryPost","getTempPostFromId","id","getTempPost","getAllPostsItems","getPostFromParams","parmas","getPostFromPostId","topic","postsId","deleteTopic","topicName","deletePost","deleteTempPost","makeNewTopic","newTopic","adminLogin","setJwtToken","checkJWTToken","reducerUtil","error","prevState","createThunk","cb","SUCCESS","ERROR","parameter","a","params","handleAction","key","keepData","action","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","GET_ALL_POSTS","GET_ALL_POSTS_SECCUESS","GET_ALL_POSTS_ERROR","CLEAR_POST","onRequestPosts","onRequsetPost","onRequestAllPosts","posts","post","AllPosts","usePosts","getPosts","getPost","getAllPosts","onClearPost","SelectTopic","onIsChecked","checked","onChange","target","value","className","map","v","name","htmlFor","React","WriteTopicName","onNameChange","placeholder","hljs","configure","languages","modules","syntax","highlight","text","highlightAuto","toolbar","font","size","color","background","align","list","indent","formats","bold","Quill","import","tagName","register","italic","GET_TOPIC","GET_TOPIC_SUCCESS","GET_TOPIC_ERROR","useTopic","requestTopic","getState","SET_CONTENT","SET_CONTENT_NAME","SET_TOPIC","SET_KIND_OF_POSTS","SET_DETAIL","SET_TEMP_DATA","contentName","content","kindofPosts","detail","TextEditor","useTextEdit","textEdit","setContent","onSetContent","setContentName","onSetContentName","setTopic","onSetTopic","setKindOfPosts","kindOf","setDetail","onSetDetail","setTempData","onSetTempData","CSRF","useState","csrf","setCsrf","useEffect","Editor","history","useCSRF","ref","useRef","mode","setMode","temp","setTemp","decoded","current","focus","push","howToSave","_data","editor","scrollingContainer","innerHTML","content_name","result","_qs","qs","parse","search","length","filter","values","rteChange","delta","source","onCheckKindOfPosts","onChangeDetail","onMakeOrDelteTopic","onSubmit","alert","status","onSaveTemporaryPost","onDelete","new_temp","theme","onCheck","detailValue","StoragePost","TextEditBtnBox","onClick","SelectKindOfPost","PostsDetail","CreateNewTopic","click","setClick","setNewtopic","confirm","currentTarget","dataset","data-topic","Srotage","to","data-id","ReactHelmet","keywords","description","title","Helmet","data-react-helmet","property","DOMPurify","createDOMPurify","PostsContainer","language","dangerouslySetInnerHTML","__html","sanitize","created","isNew","date","date_diff","Date","Math","floor","EntryPostsContainer","flat","TopMetaBar","count","setCount","exact","path","activeClassName","totalsForAllResults","rows","backGround","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","SideBarNavContainer","style","SideNavBarTopic","i","onMakeIsNewPost","SpecificTopicContainer","setPost","AboutContainer","fontSize","textAlign","marginTop","LoginFlag","CommonEntry","useLoginFlag","parentNode","render","onGetPosts","Entry","Posts","Admin","pwd","number","user","setUser","visivle","setVisible","setNumber","certification","setCertification","onCertificationPhone","parseInt","App","component","rootReducer","combineReducers","TokenMiddleWare","store","next","middleWares","Thunk","devTools","applyMiddleware","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.528bbcae.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { css } from \"styled-components\";\n\ninterface ISizes {\n   desktop: number\n   tablet: number\n   mobile: number\n\n   [index: string]: any\n}\n\nconst sizes: ISizes = {\n   desktop: 1250,\n   postBox: 1120,\n   tablet: 930,\n   mobile: 500,\n   small: 262,\n   smallest: 219,\n};\n\nexport const media = Object.keys(sizes).reduce((acc: any, label: any) => {\n   acc[label] = (...args: any) => css`\n     @media(max-width:${sizes[label] / 16}em){\n    ${css(args)};\n  }\n`;\n   return acc;\n}, {});","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\nimport { media } from \"./Media\";\n\nconst GlobalStyles = createGlobalStyle`\n ${reset}\n    *{\n        box-sizing:border-box;\n    }\n    body,html{\n        font-size:14px;\n        font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", \"Apple SD Gothic Neo\", \"Malgun Gothic\", \"맑은 고딕\", 나눔고딕, \"Nanum Gothic\", \"Noto Sans KR\", \"Noto Sans CJK KR\", arial, 돋움, Dotum, Tahoma, Geneva, sans-serif !important;\n        color:rgb(36, 41, 46);\n        position:relative;\n        height:100%;\n    }\n    a{\n        text-decoration:none;\n        color:inherit;\n        cursor: pointer;\n    }\n    ol, ul, li {\n        list-style: none;\n    }\n    img {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n    input, button {\n        background-color: transparent;\n    }\n    h1, h2, h3, h4, h5, h6 {\n    font-family:'Maven Pro', sans-serif;\n    }\n  \n    b { \n        font-weight: bold !important; \n    }\n    i { \n        font-style : italic;\n    }\n    .quill{\n        height: ${window.innerHeight - 120 + \"px\"};\n    }\n    .quill img{\n        height: auto;\n        width:auto;\n        max-height: 700px;\n        position: relative;\n        margin :0 auto;\n    }\n   .ql-container.ql-snow{\n        height:90%;\n        border:none !important;\n    }\n    .ql-size-huge{\n        font-size:4rem !important;\n    }\n    .content-title{\n        width:100%;\n        height:100px;\n        resize:none;\n        border:none;\n        outline-style:none;\n        padding:25px;\n        font-size:3rem;\n    }\n    .writeBox-inputs{\n        border:1px solid black;\n        width:50%;\n        border: 1px solid rgba(0, 0, 0, 0.2);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }\n    .react,.hljs,.stata{\n       background: white !important;\n    }\n    .content-title::placeholder{\n        font-size:3rem;\n        font-style:italic\n    }\n    .preview-title{\n        border:1px solid black;\n        font-size:3rem;\n        word-break:break-all;\n        margin-bottom:100px;\n    }\n    .ql-editor .ql-syntax{\n        background: rgb(248 249 250) !important;\n    }\n    .ql-syntax{\n      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n      padding:30px 30px; \n      border-radius: 4px;\n      font-size: 0.9rem;\n      background: rgb(248 249 250);\n      font-weight: 300 !important;\n      white-space: pre-wrap;\n      tab-size: 1 !important;\n      ${media.tablet`font-size:0.6rem !important`};\n      ${media.mobile`\n         font-size:0.7rem !important;\n         white-space: pre !important;\n         overflow:scroll !important;\n       `};\n     & span{\n        font-weight:300 !important;\n        ${media.mobile`\n         white-space: pre !important;\n       `};\n      }\n    }\n    .ql-snow .ql-editor pre.ql-syntax{\n      color:black !important;\n     }\n    .ql-toolbar.ql-snow{\n        border-left:none;\n        border-right:none;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }   \n    .hljs-function{\n      .hljs-params{\n         //color:rgb(36, 41, 46);\n      }\n    }\n    .ql-editor blockquote{\n      padding:10px 20px;\n      border-left:5px solid #f58320 !important;\n      background: rgb(248 249 250);\n    }\n    .hljs-params,.hljs-attr{\n      color:rgb(36, 41, 46) !important;\n    }\n    .ql-syntax .hljs-tag{\n      color:black;\n      & .hljs-name{\n        color:#a626a4 !important;\n      }\n      & .hljs-attr{\n        color: #4078f2 !important;\n      } \n    }\n    .ql-size-huge{\n      font-size:3.5rem !important;\n    }\n    .ql-size-large{\n      font-size: 2.3rem !important;\n      ${media.mobile`font-size:1.5rem !important`};\n    }\n    .ql-size-small{\n      font-size:1rem !important\n    }\n`;\n\nexport default GlobalStyles;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled, { css, keyframes } from \"styled-components\";\nimport { darken, lighten } from \"polished\";\nimport React, { memo } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { media } from \"./styles/Media\";\n\nexport interface Width {\n   width: number;\n}\n\nexport interface topView {\n   width: number;\n   logo: any\n   ref: any\n}\n\nexport interface contentBox {\n   ref: any;\n}\n\ninterface IDeleteTopicIconComp {\n   onClick: any\n}\n\ninterface ISideBarThunmbNailComp {\n   style: any\n}\n\n//INTERFACE\n//위의 인터페이스는 컴포넌트가 가지는 PROPS의 인터ㅔ이스\n\nconst leftWidth = 165;\n\ninterface IEntryContainerComp {\n   width: number\n}\n\nexport const EntryContainerComp = styled.div<IEntryContainerComp>`\n  width:${props => props.width + \"px\"};\n  position:relative;\n  margin:0 auto;\n  ${media.desktop`width:95%`}\n`;\n\n\nconst postsContainerMixin = css<Width>`\n  ${media.mobile`\n   position:relative;\n   padding-left:10px;\n   padding-rigth:10px;\n  `};\n  margin-top:100px;\n  padding-left:253px; \n  width:100%;\n  position: absolute;\n  top:0;\n  & .sidebar-copyright{\n   text-align: right;\n   letter-spacing: 1.1px;\n   font-size:12px;\n   margin-top:80px;\n   margin-bottom: 20px;\n  }\n`;\n\nconst postsItemMixin = css`  \n  position:relative;\n  margin-bottom:60px;\n  word-break:break-all;\n  & .post_is_new{\n    display: inline-block;\n    position: absolute;\n    margin-left:10px; \n    font-weight: 600;\n    letter-spacing: 1.2px;\n    color: #ff6666;\n  }\n  & .item-created{\n    display: inline-block;\n    font-size:1.1rem;\n    font-weight: 600;\n    opacity: 0.9;\n    ${media.tablet`font-size:0.8rem`};\n  }\n  & .item-contentName{\n    overflow-wrap: break-word;\n    font-size:2.7rem;\n    margin-top:6px;\n    letter-spacing: 2px;\n    font-weight: 450 ;\n    ${media.tablet`\n      font-size:2rem;\n      margin-top:-4px\n    `};\n    //white-space:nowrap;\n    //overflow: hidden;\n    //text-overflow: ellipsis;\n    //위에는 ...표시하는 방법\n    padding:6px 0;\n  }\n  & .item-detail{\n    font-size:1.2rem;\n    margin-top:40px;\n    ${media.tablet`font-size:0.8rem`}\n  }\n  & .posts-keyword-box{\n    margin-top:20px;\n    & .posts-keywords{\n      transition: 0.3s all;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    }\n    & .posts-keywords:hover{\n      background: ${lighten(0.07, \"#f58320\")};\n    }\n  }\n  & .posts-keywords{\n    background: #f58320;\n    color:white;\n    display: inline-block;\n    padding:4px 12px;\n    border-radius: 15px;\n    letter-spacing: 1.2px;\n  }\n  & .posts-admin-box{\n    position: absolute;\n    right:0;\n    bottom:0;\n    z-index: 9;\n    span{\n      vertical-align: middle;\n      font-size:1.6rem;\n      opacity: 0.6;\n      margin-left:12px;\n      transition: 0.3s all;\n    }\n    span:hover{\n      opacity: 1;\n      cursor: pointer;\n    }   \n  }\n \n`;\nconst rotate = keyframes`\n  100%{\n    transform: rotate(360deg);\n  }\n`;\nexport const TopMetaBarComp = styled.section<Width>`\n  position: fixed;\n  top:0;\n  width:${props => props.width + \"px\"};\n  z-index: 999;\n  padding-bottom: 5px;\n  background:white;\n  ${media.tablet`\n   width:95%;\n  `};\n  ${media.desktop`\n   width:95%;\n  `};\n  & .topmetabar-list{\n    display: flex;\n    margin-top:20px;\n    & .metaItem{  \n      padding:5px 2px;\n      margin-right: 40px;\n      font-size:1.5rem;\n      opacity: 0.6;\n      font-weight: 500;\n      letter-spacing: 1.4px;\n      ${media.tablet`\n        font-size:1.2rem;\n      `};\n      ${media.small`\n        font-size:0.8rem;\n      `}\n      & .tmb-icon{\n        ${media.mobile`\n         display:none;\n        `};\n        ${media.small`\n         display:none;\n        `}\n      }\n     &:hover{\n      opacity: 1;       \n     }\n    }\n    & .metaActive{\n      opacity: 1;\n      border-bottom:2.5px solid black;  \n      ${media.small`\n        border-bottom:1.5px solid black;\n      `}    \n    }\n  }\n  & .topmetabar-count{\n    ${media.desktop`\n     right:5%;\n    `};\n    ${media.mobile`\n      display:none;\n    `};\n    position: absolute;\n    right:0;\n    top:0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    & div {\n      margin-left:12px;\n      font-weight: 100;\n      font-size:12px;\n      display: flex;\n      align-items: center;\n       & .topmetabar-countAll,.topmetabar-today{\n         margin-left:6px;\n         display: flex;\n       }\n       & .count-loading-icon{\n         animation: ${rotate} infinite linear 5s;\n      }\n    }\n  }\n  //& .topmetabar-icons-box{\n  // position: relative;\n  // font-size:1.65rem;\n  // display: flex;\n  // align-items: center;\n  // & .icon-github,.icon-tohome,.icon-mail{\n  //   cursor: pointer;\n  //   opacity: 0.8;\n  //   display: inline-block;\n  //   margin-left:24px;\n  //   transition:0.3s all;\n  //  }\n  //}\n  //& .icon-github:hover,.icon-tohome:hover,.icon-mail:hover{\n  //  opacity: 1;\n  //}\n`;\n\n\nexport const SideBarComp = styled.section`\n  display: inline-block;\n  width: ${leftWidth + \"px\"};\n  ${media.mobile`display:none`};\n  position : fixed;\n  z-index: 9;\n  & .write-article-btn {\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    display: inline-block;\n    padding: 7px 20px;\n    border-radius: 10px;\n    font-size: 14px;\n    font-weight: 100;\n    transition: all 0.2s;\n    margin-top:20px;\n   }\n  & .write-article-btn:hover {\n    cursor: pointer;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n  \n`;\n\n\nexport const SideBarThunmbNailComp = styled.div<ISideBarThunmbNailComp>`\n  border:1px solid rgba(0,0,0,0.06);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  position: relative;\n  width:120px;\n  padding-bottom: 120px;\n  border-radius: 5px;\n  margin-top:100px;\n`;\n\nexport const SideBarMetaDataComp = styled.div`\n  margin-top:46px;\n  & .sidebar-names{\n    font-size:2.2rem;\n    font-weight: 400;\n    letter-spacing:5px;\n  }\n  & .sidebar-posi{\n    letter-spacing: 2.8px;\n    font-size:1rem;\n    font-weight: 500;\n    &.posi1{\n      margin-top:20px;\n    }\n  }\n`;\n\nexport const SideBarPostsContainerComp = (styled.ul`\n  margin-top:70px;\n  & .sidebar-list{\n    font-size:1.1rem;\n    margin-bottom:15px;\n    padding-bottom:10px;\n    border-bottom: 1px solid black;\n    letter-spacing: 1.2px;\n    font-weight: 500;\n  }\n`);\n\nexport const SideBarPostsItemComp = styled(NavLink)<any>`\n  height: 16px;\n  display:block;\n  margin-bottom:6px;\n  transition: all 0.6s;\n  vertical-align: middle;\n  & div{\n    vertical-align: middle;\n    font-size:1.1rem;\n    font-weight: 300;\n    opacity:1;\n    display: flex;\n    & .topic_list_items:hover{\n      text-decoration: underline;\n    }\n  }\n  & .topic_length{\n    display: inline-block;\n    font-size:1rem;\n    margin-left:5px;\n  }\n  & .topic_is_new{\n    color: #ff6666;\n    font-size:11px;\n    display: inline-block;\n    margin-left: 10px;\n    margin-top:1px;\n    z-index: 9;\n    &:hover{\n      font-weight: 600;\n    }\n  }\n  &[aria-current] {\n    color: black;\n    & .topic_list_items{\n      opacity: 1;\n      font-weight: 500;\n      color:#3a7dff\n    }\n  }\n\n`;\n\nexport const EntryPostsContainerComp = styled.div<Width>`\n  ${postsContainerMixin}\n`;\n\nexport const SpecificTopicContainerComp = styled.div<Width>`\n  ${postsContainerMixin};\n`;\n\nexport const EntryPostsItemComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const SpecificTopicItemsComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const PostsContainerComp = styled.section<Width>`\n  width:48%;\n  border:${props => props.width + \"px\"}\n  ${media.desktop`\n    width:90%;\n  `};\n  ${media.tablet`\n    width:85%;\n  `};\n  ${media.mobile`\n    width:80%;\n  `}; \n  position: relative;\n  margin: 0 auto;\n  padding-bottom: 80px;\n  background: white;\n  tab-size: 1;\n  & .posts-container-iconbox{\n    padding:20px 20px;\n    font-size:1.5rem;\n  }\n  & img{\n    height:auto;\n    width:auto;\n    max-height: 700px;\n    position: relative;\n    margin :0 auto;\n    ${media.desktop`max-width:100%`};\n    ${media.tablet`max-width:100%`};\n    ${media.mobile`max-width:100%`};\n  }\n  & .posts-name{\n    ${media.mobile`font-size:2rem`};\n    padding-top:50px;\n    font-size:3.5rem;\n    text-align: center;\n    font-weight: bold;\n  }\n  & .posts-detail{\n    text-align: center;\n    margin-top:20px;\n    font-size:1.2rem\n  }\n  & .posts-content{\n    word-break:break-all;\n    font-size:1.2rem;\n    margin-top:50px;   \n    ${media.tablet`font-size:1rem !important`};\n    ${media.mobile`font-size:0.7rem !important`};\n    & *{\n      white-space: pre-wrap;\n      word-break: break-all;\n      line-height: 2.1;\n    } \n    & p br{\n      display: block;\n      content: \"\";\n      padding:10px 0px;\n    }\n    blockquote{\n      padding:10px 20px;\n      border-left:5px solid #f58320;\n      background: rgb(248 249 250);\n      ${media.tablet`font-size:1rem !important`};\n      ${media.mobile`font-size:0.8rem !important`};\n    }\n    p,ol,blockquote,span{\n      color:black\n    }\n  }\n  & .posts-created{\n    margin-top: 60px;\n    text-align: right;\n    font-size:1rem;\n    font-weight:100;\n  }\n`;\n// & .posts-content{\n//    word-break:break-all;\n//    line-height: 1.5;\n//    padding: 10px 10px;\n//    border-radius: 5px;\n// & img{\n//       height:auto;\n//       width:auto;\n//       max-height: 500px;\n//       position: relative;\n//       margin :0 auto;\n//    }\n// }\n\nexport const TopCommonSectionComp = (styled.div<topView>`\n   position: relative;\n   margin: 0 auto;\n   width: ${(props) => props.width + \"px\"};\n   height: 280px;\n   max-width: ${(props) => props.width + \"px\"};\n   background-image: url(${props => props.logo});\n   background-repeat:no-repeat ;\n   background-size: contain;\n   background-position: 50% 40%;\n   & .write-article-btn {\n      border: 1px solid rgba(0, 0, 0, 0.2);\n      display: inline-block;\n      padding: 7px 20px;\n      border-radius: 10px;\n      font-size: 14px;\n      font-weight: 100;\n      position: absolute;\n      bottom: 30px;\n      right: 30px;\n      transition: all 0.2s;\n   }\n   & .write-article-btn:hover {\n      cursor: pointer;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   }\n   @media (max-width: 1024px) {\n      width:768px;\n   }\n   @media(max-width:768px){\n      width:100%;\n   }\n`);\n\n\n//\nexport const AdminLoginBoxComp = styled.div`\n  position: absolute;\n  width:30%;\n  left:50%;\n  top:40%;\n  transform: translate(-50%,-50%);\n  & .login-inputbox{\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n    & input{\n      padding:15px 10px;\n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n    }\n  }\n  & .login-btn{\n    border:1px solid rgb(0,0,0,0.2);\n    width:100%;\n    height: 57px;\n    outline-style: none;\n    cursor: pointer;\n  }\n  & .certification-numberBox{ \n    display: flex;\n    button{\n      border:1px solid rgba(0,0,0,0.2);\n      outline-style: none;\n      height: 40px;\n      font-size: 12px;\n      letter-spacing: 1.2px;\n      cursor: pointer ;\n    }\n    input{\n      height: 40px;  \n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n      margin-right: 15px;\n      font-size: 1rem;\n      padding-left: 10px;\n    }\n  }\n`;\n//--------------------------------write---------------------------------------\n\nexport const WriteBox = (styled.div`\n   position: absolute;\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   height: 100%;\n   width: 50%;\n   border-radius: 4px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   overflow: scroll;\n`);\n\nexport const WriteConditionBox = memo(styled.section`\n   position: absolute;\n   right: 0;\n   width: 50%;\n   height: 100%;\n   overflow: scroll;\n`);\n\n\nexport const WriteBtnBoxComp = (styled.div`\n   padding-left:60px;\n   margin-top:30px;\n   margin-bottom: 20px;\n`);\n\nexport const WriteBtnComp = styled.button`\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   padding: 15px 25px;\n   font-size: 17px;\n   border-radius: 4px;\n   letter-spacing: 1.2px;\n   transition: 0.3s all;\n   background: #a5d8ff;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   color: black;\n   font-weight: 300;\n   margin-right: 30px;\n   &:hover {\n      cursor: pointer;\n      background-color: ${darken(0.1, \"#a5d8ff\")};\n   }\n   \n`;\n\nexport const SelectTopicBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\nexport const SelectTopicItemComp = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const CreateNewTopicComp = styled.div`\n   padding-top:20px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:20px;\n    margin-bottom: 20px;\n   }\n   & .add-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-top: 10px;\n   }\n   & .add-new-topic-btn:hover{\n    color: gray;\n   } \n`;\n\nexport const CreateNewTopicListBoxComp = styled.div`\n  width:180px;\n`;\n\nexport const DeleteTopicIconComp = styled.div<IDeleteTopicIconComp>`\n  display: flex;\n  font-size:20px;\n  cursor: pointer;\n  opacity: 0;\n  color: #dee2e6;\n  & :hover{\n    color:#ff6b6b;\n  }\n`;\n\nexport const AddTopicBtnComp = styled.div`\n  display: flex;\n  align-items: center;\n  & input{\n    padding:8px;\n    border:1px solid rgba(0,0,0.6);\n  }\n  & .make-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-left: 15px;\n  }\n  & .make-new-topic-btn:hover{\n    color: gray;\n  } \n`;\n\nexport const CreateNewTopicListItemComp = styled.div`\n  margin-bottom:15px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  & span{\n    display: inline-block;\n    width:70%;\n    font-size:22px;\n    font-weight: 100;\n  }\n  &:hover{\n    ${DeleteTopicIconComp}{\n      opacity: 1;\n    }\n  }\n`;\n\n\nexport const SelectKindOfPostsBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\n\nexport const SelectKindOfPosts = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    width:100px;\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const PostsDetailComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:1.7rem;\n    margin-bottom: 30px;\n   }\n   & input{\n    width:100%;\n    height: 50px;\n    outline-style: none;\n    border:none;\n    padding-left: 10px;\n    border-radius: 5px;\n    background-color: ${lighten(0.1, \"#a5d8ff\")};\n   }\n`;\n\nexport const TemporaryStorageComp = styled.div`\n  padding-left:60px;\n  margin-top:50px;\n  margin-bottom:40px;\n  & .tsc-slo{\n    font-size:1.7rem;\n  }\n  & .temp_item{\n    display: flex;\n    justify-content: space-between;\n    padding-right: 60px;\n    align-items: center;\n    margin-top:20px;\n    & .posts-admin-delete{\n      font-size:1.4rem;\n      display: inline-block;\n      padding-top:5px;\n      &:hover{\n        cursor: pointer;\n      }\n    }\n  }\n`;\n\nexport const TemporaryPostComp = styled.div<any>`\n  cursor:pointer;\n  font-size:1.4rem;\n  &:hover{\n    text-decoration: underline;\n  }\n`;\n//--------------------------------write---------------------------------------\n\n\nexport const AboutContainerComp = styled.div<Width>`\n  position: relative;\n  width:${props => props.width + \"px\"};\n  padding-top:100px;\n`;","import {ICommonAction, ICommonState} from \"./common.interface\";\n\n\nexport const SET_IS_LOGIN = \"common/SET_IS_LOGIN\";\n\nexport const NEW_REQUEST = \"common/NEW_REQUEST\";\n\nexport const onSetIsLogin = (payload: boolean) => ({type: SET_IS_LOGIN, payload});\n\nexport const onNewRequset = (payload: boolean) => ({type: NEW_REQUEST, payload: payload});\n\n// typescript는 const를 이해하므로(typeof CHECK_GUESTBOOK은 string이 아니라 'CHECK_GUESTBOOK'입니다)\n// 액션 이름을 그대로 쓰셔도 됩니다.\n\n//thunk 생성함\n\n\nconst initialState: ICommonState = {\n    width: window.screen.width * 0.67,\n    login: false,\n    loading: false,\n    newRequest: true,\n    e: null,\n};\n\n\nexport default function common(state: ICommonState = initialState, action: ICommonAction): ICommonState {\n    switch (action.type) {\n        case SET_IS_LOGIN:\n            return {\n                ...state,\n                login: action.payload as boolean,\n            };\n        case NEW_REQUEST:\n            return {\n                ...state,\n                newRequest: action.payload as boolean,\n            };\n        default:\n            return state;\n    }\n}","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onNewRequset, onSetIsLogin } from \"../modules/Common\";\n\nexport default function useCommon() {\n   const dispatch = useDispatch();\n\n   const { width, login, loading, newRequest, e } = useSelector((state: RootState) => state.common);\n\n   const onSetLogin = useCallback((state: boolean) => {\n      dispatch(onSetIsLogin(state));\n   }, [dispatch]);\n\n   const setNewRequset = useCallback((state: boolean) => {\n      dispatch(onNewRequset(state));\n   }, [dispatch]);\n   //state true mean state need new Request, false is opposite\n\n\n   return {\n      width,\n      login,\n      loading,\n      e,\n      onSetLogin,\n      newRequest,\n      setNewRequset,\n   };\n}","import axios from \"axios\";\n// import { cacheAdapterEnhancer } from \"axios-extensions\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst instance = axios.create({\n   withCredentials: true,\n});\ninstance.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n\ninstance.interceptors.request.use(\n   (config) => {\n      return config;\n   },\n   (err) => {\n      return Promise.reject(err);\n   },\n);\n\nexport default instance;\n","import instance from \"../config/axois.config\";\nimport { ITextInitialProps } from \"../modules/TextEditor/textEdit.interface\";\n\n\nconst util = {\n   getCSRTtoken() {\n      return instance({\n         url: \"/api/csrf\",\n         method: \"get\",\n      });\n   },\n\n   getGACount() {\n      return instance({\n         url: \"/api/google/count\",\n         method: \"get\",\n      });\n   },\n\n   getTopicName() {\n      return instance({\n         url: \"/topic/contents/name\",\n         method: \"get\",\n      });\n   },\n\n   savePost(data: ITextInitialProps, token: string) {\n      return instance({\n         url: \"/topic/posts\",\n         method: \"post\",\n         data: data,\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   modifyPost(data: ITextInitialProps, uid: string, token: string) {\n      return instance({\n         url: \"/topic/modify/post\",\n         method: \"post\",\n         data: { data: data, uid: uid },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   saveTempPost(data: ITextInitialProps, uid: string, token: string) {\n      return instance({\n         url: \"/topic/temp\",\n         method: \"post\",\n         data: { data: data, uid: uid },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   temporaryPost(data: ITextInitialProps, token: string) {\n      return instance({\n         url: \"/topic/temp/posts\",\n         method: \"post\",\n         data: data,\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   getTempPostFromId(id: string) {\n      return instance({\n            url: `/topic/temp/${id}`,\n            method: \"get\",\n         },\n      );\n   },\n\n   getTempPost() {\n      return instance({\n         url: \"/topic/temp/items\",\n         method: \"get\",\n      });\n   },\n\n   getAllPostsItems() {\n      return instance({\n         url: \"/topic/posts/items\",\n         method: \"get\",\n      });\n   },\n\n   getPostFromParams(parmas: string) {\n      return instance({\n         url: `/topic/posts/${parmas}`,\n         method: \"get\",\n      });\n   },\n\n   getPostFromPostId(topic: string, postsId: string) {\n      return instance({\n         url: `/topic/${topic}/posts/${postsId}`,\n      });\n   },\n\n\n   deleteTopic(topicName: string, token: string) {\n      return instance({\n         url: `/topic/:${topicName}`,\n         method: \"post\",\n         data: { topicName: topicName },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   deletePost(uid: string, topic: string, token: string) {\n      return instance({\n         url: `/topic/posts/item`,\n         method: \"post\",\n         data: { uid: uid, topic: topic },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   deleteTempPost(uid: string, token: string) {\n      return instance({\n         url: \"/topic/temp/items\",\n         method: \"post\",\n         data: { uid: uid },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   makeNewTopic(topicName: string, token: string) {\n      return instance({\n         url: `/topic/topicname/${topicName}`,\n         method: \"post\",\n         data: { newTopic: topicName },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   adminLogin(data: any, token: string) {\n      return instance({\n         url: \"/admin/login\",\n         method: \"post\",\n         data: { data },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   setJwtToken(token: string) {\n      return instance({\n         url: \"/admin/token\",\n         method: \"post\",\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   checkJWTToken() {\n      return instance({\n         url: `/admin/token/jwt`,\n         method: \"get\",\n      });\n   },\n\n\n};\n\nexport default util;","import {DataAction} from \"../posts.interface\";\n\ninterface IParameter {\n    params?: string\n    topic?: string\n    postsId?: string\n}\n\nexport const reducerUtil = {\n    initial: (initialState = null) => ({\n        loading: false,\n        data: initialState,\n        error: null,\n    }),\n\n    loading: (prevState = null) => ({\n        loading: true,\n        data: prevState,\n        error: null,\n    }),\n\n    success: (payload: any) => ({\n        loading: false,\n        data: payload,\n        error: null,\n    }),\n\n    error: (error: Error) => ({\n        loading: false,\n        data: null,\n        error: error,\n    }),\n};\n\n\nexport const createThunk = (type: string, cb: any) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return ({...parameter}: IParameter) => async (dispatch: any) => {\n        dispatch({type: type});\n        try {\n            if (type === \"data/GET_POSTS\") {\n                const {data} = await cb(parameter.params);\n                dispatch({type: SUCCESS, payload: data});\n            } else if (type === \"data/GET_POST\") {\n                const {data} = await cb(parameter.topic, parameter.postsId);\n                dispatch({type: SUCCESS, payload: data});\n            } else {\n                const {data} = await cb();\n                dispatch({type: SUCCESS, payload: data});\n            }\n        } catch (e) {\n            dispatch({type: ERROR, error: e});\n        }\n    };\n};\n\n\nexport function handleAction(type: string, key: string, keepData?: boolean) {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return (state: any, action: DataAction) => {\n        switch (action.type) {\n            case type:\n                return {\n                    ...state,\n                    [key]: reducerUtil.loading(keepData ? state[key].data : null),\n                };\n            case SUCCESS:\n                return {\n                    ...state,\n                    [key]: reducerUtil.success(action.payload),\n                };\n            case ERROR:\n                return {\n                    ...state,\n                    [key]: reducerUtil.error(action.error),\n                };\n        }\n    };\n}","import util from \"../../lib/axios\";\nimport { createThunk, handleAction, reducerUtil } from \"./lib/PostsUtil\";\nimport { DataAction, IPostInitialState } from \"./posts.interface\";\n\nexport const GET_POSTS = \"data/GET_POSTS\";\nexport const GET_POSTS_SUCCESS = \"data/GET_POSTS_SUCCESS\";\nexport const GET_POSTS_ERROR = \"data/GET_POSTS_ERROR\";\n\nexport const GET_POST = \"data/GET_POST\";\nexport const GET_POST_SUCCESS = \"data/GET_POST_SUCCESS\";\nexport const GET_POST_ERROR = \"data/GET_POST_ERROR\";\n\nexport const GET_ALL_POSTS = \"data/GET_ALL_POSTS\";\nexport const GET_ALL_POSTS_SECCUESS = \"data/GET_ALL_POSTS_SUCCESS\";\nexport const GET_ALL_POSTS_ERROR = \"data/GET_ALL_POSTS_ERROR\";\n\nexport const GET_TEMP_POST = \"data/GET_TEMP_POST\";\nexport const GET_TEMP_POST_SUCCESS = \"data/GET_TEMP_POST_SUCCESS\";\nexport const GET_TEMP_POST_ERROR = \"data/GET_TEMP_POST_ERROR\";\n\n\nexport const CLEAR_POST = \"data/CLEAR_POST\";\n//액션 생성함수를 선언!\n\nexport const onRequestPosts = createThunk(GET_POSTS, util.getPostFromParams);\n\nexport const onRequsetPost = createThunk(GET_POST, util.getPostFromPostId);\n\nexport const onRequestAllPosts = createThunk(GET_ALL_POSTS, util.getAllPostsItems);\n\nexport const onRequestTemoPost = createThunk(GET_TEMP_POST, util.getTempPost);\n\nconst initialState: IPostInitialState = {\n   posts: reducerUtil.initial(null),\n   post: reducerUtil.initial(null),\n   AllPosts: reducerUtil.initial(null),\n};\n\n\nexport default function Posts(state: IPostInitialState = initialState, action: DataAction): IPostInitialState {\n   switch (action.type) {\n      case GET_POSTS:\n      case GET_POSTS_SUCCESS:\n      case GET_POSTS_ERROR:\n         return handleAction(GET_POSTS, \"posts\", true)(state, action);\n      case GET_POST:\n      case GET_POST_SUCCESS:\n      case GET_POST_ERROR:\n         return handleAction(GET_POST, \"post\", false)(state, action);\n      //특정 포스트 볼때 >>>이전 데이터를 가지고있으면 전의 데이터도 렌더링 되는 ㅇ형상떄문에 false로 로딩시 데이터를 유지하지 않게함\n      case GET_ALL_POSTS:\n      case GET_ALL_POSTS_SECCUESS:\n      case GET_ALL_POSTS_ERROR:\n         return handleAction(GET_ALL_POSTS, \"AllPosts\", true)(state, action);\n      case CLEAR_POST:\n         return {\n            ...state,\n            post: reducerUtil.initial(null),\n         };\n      default :\n         return state;\n   }\n\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onRequestAllPosts, onRequestPosts, onRequsetPost } from \"../modules/Posts\";\nimport { useCallback } from \"react\";\nimport { clearPost } from \"../modules/Posts/lib/PostsAction\";\n\nexport default function usePosts() {\n   const dispatch = useDispatch();\n   const { posts, post, AllPosts } = useSelector((state: RootState) => state.posts);\n\n   const getPosts = useCallback((params: string) => {\n      dispatch(onRequestPosts({ params }));\n   }, [dispatch]);\n\n   const getPost = useCallback((topic: string, postsId: string) => {\n      dispatch(onRequsetPost({ topic, postsId }));\n   }, [dispatch]);\n\n   const getAllPosts = useCallback(() => {\n      dispatch(onRequestAllPosts({}));\n   }, [dispatch]);\n\n\n   const onClearPost = useCallback(() => {\n      dispatch(clearPost());\n   }, [dispatch]);\n\n   return {\n      AllPosts,\n      posts,\n      post,\n      getPosts,\n      getPost,\n      getAllPosts,\n      onClearPost,\n   };\n}","import { CLEAR_POST, GET_ALL_POSTS, GET_ALL_POSTS_ERROR, GET_ALL_POSTS_SECCUESS, GET_POST, GET_POST_ERROR, GET_POST_SUCCESS, GET_POSTS, GET_POSTS_ERROR, GET_POSTS_SUCCESS } from \"../index\";\n\nexport const clearPost = () => ({\n   type: CLEAR_POST,\n});\n\nexport const onRequest = () => ({\n   type: GET_POSTS,\n});\n\nexport const onRequestSuccuess = (payload: any[]) => ({\n   type: GET_POSTS_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestError = (e: Error) => ({\n   type: GET_POSTS_ERROR,\n   error: e,\n});\n\nexport const onRequestPost = () => ({\n   type: GET_POST,\n});\n\nexport const onRequestPostSuccess = (payload: any[]) => ({\n   type: GET_POST_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestPostError = (e: Error) => ({\n   type: GET_POST_ERROR,\n   error: e,\n});\n\nexport const onRequsetAllPosts = () => ({\n   type: GET_ALL_POSTS,\n});\n\nexport const onRequsetAllPostsSuccess = (payload: any[]) => ({\n   type: GET_ALL_POSTS_SECCUESS,\n   payload: payload,\n});\n\nexport const onRequestAllPostsError = (e: Error) => ({\n   type: GET_ALL_POSTS_ERROR,\n   error: e,\n});\n\n","import React, { ChangeEvent } from \"react\";\nimport { SelectTopicBoxComp, SelectTopicItemComp } from \"../../styled-comp\";\nimport { ISelectopicProps } from \"../../interface/index.interface\";\n\n\nfunction SelectTopic({ topic, onIsChecked, checked }: ISelectopicProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onIsChecked(e.target.value);\n   };\n\n   if (topic === null) return null;\n\n   return (\n      <SelectTopicBoxComp>\n         <h1>토픽을 선택해주세요</h1>\n         <div className=\"post-select-box\">\n            {topic.map((v: { Tables_in_contents: string }) => (\n               <SelectTopicItemComp key={v[\"Tables_in_contents\"]}>\n                  <input className=\"select-input\" type=\"radio\" id={v[\"Tables_in_contents\"]} onChange={onChange}\n                         value={v[\"Tables_in_contents\"]} name='post' checked={v[\"Tables_in_contents\"] === checked} />\n                  <label className=\"select-label\"\n                         htmlFor={v[\"Tables_in_contents\"]}>{v[\"Tables_in_contents\"]}</label>\n               </SelectTopicItemComp>\n            ))}\n         </div>\n      </SelectTopicBoxComp>\n   );\n}\n\nexport default React.memo(SelectTopic);","import React from \"react\";\n\nconst WriteTopicName = ({ onNameChange, value }: { onNameChange: any, value: string }) => {\n   const onChange = (e: any) => {\n      onNameChange(e.target.value);\n   };\n\n   return (\n      <>\n         <textarea name=\"content-title\" placeholder=\"제목\" className=\"content-title\" onChange={onChange} value={value} />\n      </>\n   );\n};\n\nexport default React.memo(WriteTopicName);","import hljs from \"highlight.js\";\nimport { Quill } from \"react-quill\";\n\nhljs.configure({\n   languages: [\"javascript\", \"react\", \"typescript\", \"css\", \"html\", \"Node REPL\"],\n});\n\nexport const modules = {\n   syntax: {\n      highlight: (text: any) => hljs.highlightAuto(text).value,\n   },\n   toolbar: [\n      [{ font: [] }],\n      [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n      [\"bold\", \"italic\", \"underline\", \"strike\"],\n      [\"blockquote\", \"code-block\"],\n      [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n      [{ align: [] }],\n      [{ list: \"ordered\" }, { list: \"bullet\" }, { indent: \"-1\" }, { indent: \"+1\" }],\n      [\"link\", \"image\", \"video\"],\n   ],\n};\n\n\nexport const formats = [\"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\",\n   \"code-block\", \"color\", \"background\", \"align\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"blockquote\", \"video\", \"insert\"];\n\n\nconst bold = Quill.import(\"formats/bold\");\nbold.tagName = \"b\"; // Quill uses <strong> by default\nQuill.register(bold, true);\n\nconst italic = Quill.import(\"formats/italic\");\nitalic.tagName = \"i\"; // Quill uses <em> by default\nQuill.register(italic, true);\n","import util from \"../../lib/axios\";\nimport { ITopicinitialState, TopicAction } from \"./topic.interface\";\n\nexport const GET_TOPIC = \"topic/GET_TOPIC\";\nexport const GET_TOPIC_SUCCESS = \"topic/GET_TOPIC_SUCCESS\";\nexport const GET_TOPIC_ERROR = \"topic/GET_TOPIC_ERROR\";\n\n\nexport const getTopic = () => ({ type: GET_TOPIC });\nexport const getTopicSuccess = (payload: any[]) => ({ type: GET_TOPIC_SUCCESS, payload });\nexport const getTopicError = (e: Error) => ({ type: GET_TOPIC_ERROR, e });\n\n\nexport const onReqTopicsName = () => async (dispatch: any, getState: any) => {\n   dispatch(getTopic());\n   try {\n      const { data } = await util.getTopicName();\n      dispatch(getTopicSuccess(data));\n   } catch (e) {\n      dispatch(getTopicError(e));\n   }\n};\n\n\nconst initialState = {\n   topic: null,\n   loading: false,\n   error: null,\n};\n\nexport default function Topic(state: ITopicinitialState = initialState, action: TopicAction) {\n   switch (action.type) {\n      case GET_TOPIC:\n         return {\n            ...state,\n            loading: true,\n         };\n      case GET_TOPIC_SUCCESS:\n         return {\n            ...state,\n            topic: action.payload,\n            loading: false,\n         };\n      case GET_TOPIC_ERROR:\n         return {\n            ...state,\n            error: action.error,\n         };\n      default :\n         return state;\n   }\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { useCallback } from \"react\";\nimport { onReqTopicsName } from \"../modules/Topic\";\n\nexport default function useTopic() {\n   const dispatch = useDispatch();\n   const { topic, loading, error } = useSelector((state: RootState) => state.topic);\n\n   const requestTopic = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n\n   return { topic, loading, error, requestTopic };\n}","// 액션 타입을 선언합니다\n// 뒤에 as const 를 붙여줌으로써 나중에 액션 객체를 만들게 action.type 의 값을 추론하는 과정에서\n// action.type 이 string 으로 추론되지 않고 'counter/INCREASE' 와 같이 실제 문자열 값으로 추론 되도록 해줍니다.\nimport { EditorAction, ITextInitialProps } from \"./textEdit.interface\";\n\nconst SET_CONTENT = \"textEdit/SET_CONTENT\" as const;\nconst SET_CONTENT_NAME = \"textEdit/SET_CONTENT_NAME\" as const;\nconst SET_TOPIC = \"textEdit/SET_TOPIC\" as const;\nconst SET_KIND_OF_POSTS = \"textEdit/SET_KIND_OF_POSTS\" as const;\nconst SET_DETAIL = \"textEdit/SET_DETAIL\" as const;\nconst SET_TEMP_DATA = \"textEdit/SET_TEMP_DATA\" as const;\n\nexport const onSetContent = (content: string) => ({ type: SET_CONTENT, payload: content });\nexport const onSetContentName = (contentName: string) => ({ type: SET_CONTENT_NAME, payload: contentName });\nexport const onSetTopic = (topic: string) => ({ type: SET_TOPIC, payload: topic });\nexport const onSetKindOfPosts = (kindOfPosts: string) => ({ type: SET_KIND_OF_POSTS, payload: kindOfPosts });\nexport const onSetDetail = (detail: string) => ({ type: SET_DETAIL, payload: detail });\nexport const onSetTempData = (data: ITextInitialProps) => ({ type: SET_TEMP_DATA, payload: data });\n\nconst initialState: ITextInitialProps = {\n   contentName: \"\",\n   content: \"\",\n   topicName: \"\",\n   kindofPosts: \"\",\n   detail: \"\",\n};\n\n\nfunction TextEditor(state: ITextInitialProps = initialState, action: EditorAction): ITextInitialProps {\n   switch (action.type) {\n      case SET_CONTENT:\n         return {\n            ...state,\n            content: action.payload,\n         };\n      case SET_CONTENT_NAME:\n         return {\n            ...state,\n            contentName: action.payload,\n         };\n      case SET_TOPIC:\n         return {\n            ...state,\n            topicName: action.payload,\n         };\n      case SET_KIND_OF_POSTS:\n         return {\n            ...state,\n            kindofPosts: action.payload,\n         };\n      case SET_DETAIL:\n         return {\n            ...state,\n            detail: action.payload,\n         };\n      case SET_TEMP_DATA:\n         return {\n            ...state,\n            contentName: action.payload.contentName,\n            content: action.payload.content,\n            topicName: action.payload.topicName,\n            kindofPosts: action.payload.kindofPosts,\n            detail: action.payload.detail,\n         };\n      default:\n         return state;\n   }\n\n}\n\nexport default TextEditor;","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onSetContent, onSetContentName, onSetDetail, onSetKindOfPosts, onSetTempData, onSetTopic } from \"../modules/TextEditor\";\nimport { ITextInitialProps } from \"../modules/TextEditor/textEdit.interface\";\n\nfunction useTextEdit() {\n   const data = useSelector((state: RootState) => state.textEdit);\n   const dispatch = useDispatch();\n\n   const setContent = useCallback((content: string) => {\n      dispatch(onSetContent(content));\n   }, [dispatch]);\n\n   const setContentName = useCallback((contentName: string) => {\n      dispatch(onSetContentName(contentName));\n   }, [dispatch]);\n\n   const setTopic = useCallback((topic: string) => {\n      dispatch(onSetTopic(topic));\n   }, [dispatch]);\n\n   const setKindOfPosts = useCallback((kindOf: string) => {\n      dispatch(onSetKindOfPosts(kindOf));\n   }, [dispatch]);\n\n   const setDetail = useCallback((detail: string) => {\n      dispatch(onSetDetail(detail));\n   }, [dispatch]);\n\n   const setTempData = useCallback((data: ITextInitialProps) => {\n      dispatch(onSetTempData(data));\n   }, [dispatch]);\n\n   return { data, setContent, setContentName, setTopic, setKindOfPosts, setDetail, setTempData };\n}\n\nexport default useTextEdit;","import React, { useEffect, useState } from \"react\";\nimport util from \"../lib/axios\";\n\n\nfunction CSRF() {\n   const [csrf, setCsrf] = useState(\"\");\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.getCSRTtoken();\n         setCsrf(data.token);\n      })();\n      return function cleanUp() {\n         setCsrf(\"\");\n      };\n   }, []);\n\n   return csrf;\n}\n\nexport default CSRF;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport WriteTopicName from \"component/TextEditor/WriteTopicName\";\nimport \"react-quill/dist/quill.snow.css\";\nimport util from \"../../lib/axios\";\nimport { formats, modules } from \"../../config/textEditor.config\";\nimport { WriteBox, WriteConditionBox } from \"../../styled-comp\";\nimport useTopic from \"../../useHooks/useTopic\";\nimport useTextEdit from \"../../useHooks/useTextEdit\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { ITextEditModuleProps } from \"../../modules/TextEditor/textEdit.interface\";\nimport { ITopicModuleProps } from \"../../modules/Topic/topic.interface\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport { ITempPost } from \"../../interface/index.interface\";\nimport { CreateNewTopic, KindOfPosts, PostsDetail, SelectTopic, StoragePost, TextEditBtnBox } from \"component/index\";\nimport qs from \"query-string\";\n\n\nconst Editor = ({ history, location }: any) => {\n   const csrf = useCSRF();\n   const ref = useRef<any>(null);\n   const [mode, setMode] = useState<string>(\"write\");\n   const [temp, setTemp] = useState([]);\n   const { setNewRequset }: ICommonModuleProps = useCommon();\n   const { topic, requestTopic }: ITopicModuleProps = useTopic();\n   const {\n      data,\n      setContent,\n      setContentName,\n      setTopic,\n      setKindOfPosts,\n      setDetail,\n      setTempData,\n   }: ITextEditModuleProps = useTextEdit();\n\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.getTempPost();\n         setTemp(data);\n      })();\n      return () => setTempData({\n         contentName: \"\",\n         content: \"\",\n         topicName: \"\",\n         kindofPosts: \"\",\n         detail: \"\",\n      });\n   }, [setTempData]);\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.checkJWTToken();\n         if (!data.decoded) {\n            history.push(\"/\");\n         } else {\n            requestTopic();\n            ref.current.focus();\n         }\n      })();\n   }, [history, requestTopic]);\n\n\n   const howToSave = useCallback((mode: string, cb: any, _data?: ITempPost) => {\n      setMode(mode);\n      (async () => {\n         const { data } = await cb;\n         ref.current.editor.scrollingContainer.innerHTML = mode === \"temp\" ? data : data.content;\n         setTempData({\n            contentName: mode === \"temp\" ? _data?.content_name : data.result[0].content_name,\n            content: mode === \"temp\" ? \"\" : data.content,\n            topicName: mode === \"temp\" ? _data?.topic : data.result[0].topic,\n            kindofPosts: mode === \"temp\" ? \"\" : data.result[0].kindofPosts,\n            detail: mode === \"temp\" ? _data?.detail : data.result[0].detail,\n         });\n      })();\n   }, [setTempData]);\n\n   useEffect(() => {\n      const _qs = qs.parse(location.search);\n      if (Object.keys(_qs)[0] === \"temp\" && temp.length !== 0) {\n         const post: ITempPost[] = temp.filter((e: ITempPost) => e.uid === Object.values(_qs)[0]);\n         howToSave(\"temp\", util.getTempPostFromId(Object.values(_qs)[0] as string), post[0]);\n      } else if (Object.keys(_qs)[0] === \"modify\") {\n         howToSave(\"modify\", util.getPostFromPostId(Object.values(_qs)[1] as string, Object.values(_qs)[0] as string));\n      }\n   }, [setTempData, temp, location, howToSave]);\n\n\n   const onNameChange = useCallback((data: string) => {\n      setContentName(data);\n   }, [setContentName]);\n\n   const rteChange = useCallback((content: any, delta: any, source: any, editor: any) => {\n      setContent(ref.current.state.value);\n   }, [setContent]);\n\n   const onIsChecked = useCallback((name: string) => {\n      setTopic(name);\n   }, [setTopic]);\n\n   const onCheckKindOfPosts = useCallback((kindOf: string) => {\n      setKindOfPosts(kindOf);\n   }, [setKindOfPosts]);\n\n   const onChangeDetail = useCallback((detail: string) => {\n      setDetail(detail);\n   }, [setDetail]);\n\n   const onMakeOrDelteTopic = useCallback(() => {\n      requestTopic();\n   }, [requestTopic]);\n\n   const onSubmit = async (): Promise<void> => {\n      if (data.content === \"\" || data.contentName === \"\" || data.detail === \"\" || data.kindofPosts === \"\" || data.topicName === \"\") {\n         alert(\"정보를 입력하세요\");\n      } else {\n         const result = mode === \"write\"\n            ? await util.savePost(data, csrf)\n            : mode === \"temp\"\n               ? await util.saveTempPost(data, Object.values(qs.parse(location.search))[0] as string, csrf)\n               : await util.modifyPost(data, Object.values(qs.parse(location.search))[0] as string, csrf);\n         if (result.request.status === 200) history.push(\"/\");\n         setNewRequset(true);\n      }\n   };\n\n   const onSaveTemporaryPost = async (): Promise<void> => {\n      const result = await util.temporaryPost(data, csrf);\n      if (result.request.status === 200) history.push(\"/\");\n   };\n\n   const onDelete = useCallback((target: string) => {\n      (async () => {\n         await util.deleteTempPost(target, csrf);\n      })();\n      const new_temp = temp.filter((e: ITempPost) => e.uid !== target);\n      setTemp(new_temp);\n   }, [temp, csrf]);\n\n   return (\n      <>\n         <WriteBox>\n            <WriteTopicName onNameChange={onNameChange} value={data.contentName} />\n            <ReactQuill theme=\"snow\"\n                        onChange={rteChange}\n                        modules={modules}\n                        formats={formats}\n                        placeholder=\"입력하세요.\"\n                        ref={ref} />\n         </WriteBox>\n         <WriteConditionBox>\n            <SelectTopic onIsChecked={onIsChecked} topic={topic} checked={data.topicName} />\n            <CreateNewTopic topic={topic} token={csrf} onMakeOrDelteTopic={onMakeOrDelteTopic} />\n            <KindOfPosts onCheck={onCheckKindOfPosts} checked={data.kindofPosts} />\n            <PostsDetail onChangeDetail={onChangeDetail} detailValue={data.detail} />\n            <TextEditBtnBox onSubmit={onSubmit} onSaveTemporaryPost={onSaveTemporaryPost} />\n            <StoragePost temp={temp} onDelete={onDelete} />\n         </WriteConditionBox>\n      </>\n   );\n};\n\n\nexport default Editor;\n","import React from \"react\";\nimport { WriteBtnBoxComp, WriteBtnComp } from \"../../styled-comp\";\nimport { ITextEditBtnBoxProps } from \"../../interface/index.interface\";\n\n\nconst TextEditBtnBox = ({ onSubmit, onSaveTemporaryPost }: ITextEditBtnBoxProps) => {\n   return (\n      <WriteBtnBoxComp>\n         <WriteBtnComp onClick={onSubmit}>등록하기</WriteBtnComp>\n         <WriteBtnComp onClick={onSaveTemporaryPost}>임시저장</WriteBtnComp>\n      </WriteBtnBoxComp>\n   );\n};\nexport default TextEditBtnBox;","import React, { ChangeEvent } from \"react\";\nimport { SelectKindOfPosts, SelectKindOfPostsBoxComp } from \"../../styled-comp\";\nimport { IKindsOfPostsProps } from \"../../interface/index.interface\";\n\n\nfunction SelectKindOfPost({ onCheck, checked }: IKindsOfPostsProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onCheck(e.target.value);\n   };\n\n   return (\n      <SelectKindOfPostsBoxComp>\n         <h1>게시물종류를 선택해주세요</h1>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-notice\" onChange={onChange} value=\"notice\" name='kindofpost' checked={checked === \"notice\"} />\n            <label className=\"select-label\" htmlFor=\"kind-of-notice\">공지</label>\n         </SelectKindOfPosts>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-posts\" onChange={onChange} value=\"posts\" name='kindofpost' checked={checked === \"posts\"} />\n            <label className=\"select-label\" htmlFor=\"kind-of-posts\">게시물</label>\n         </SelectKindOfPosts>\n      </SelectKindOfPostsBoxComp>\n   );\n}\n\nexport default React.memo(SelectKindOfPost);","import React, { ChangeEvent } from \"react\";\nimport { PostsDetailComp } from \"../../styled-comp\";\nimport { IPostsDetailProps } from \"../../interface/index.interface\";\n\n\nfunction PostsDetail({ onChangeDetail, detailValue }: IPostsDetailProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onChangeDetail(e.target.value);\n   };\n\n   return (\n      <PostsDetailComp>\n         <h1>추가설명을 입력하세요</h1>\n         <input type=\"text\" onChange={onChange} value={detailValue} />\n      </PostsDetailComp>\n   );\n}\n\nexport default React.memo(PostsDetail);","import React, { useState } from \"react\";\nimport { AddTopicBtnComp, CreateNewTopicComp, CreateNewTopicListBoxComp, CreateNewTopicListItemComp, DeleteTopicIconComp } from \"../../styled-comp\";\nimport { MdDelete } from \"react-icons/md\";\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport util from \"../../lib/axios\";\nimport { ICreateNewTopicProps } from \"../../interface/index.interface\";\n\n\nfunction CreateNewTopic({ topic, token, onMakeOrDelteTopic }: ICreateNewTopicProps) {\n   const [click, setClick] = useState<boolean>(false);\n   const [newTopic, setNewtopic] = useState<string>(\"\");\n\n   const setNewTopicName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setNewtopic(e.target.value);\n   };\n\n   const previousMakeNewTopic = () => {\n      setClick(!click);\n   };\n\n   const makeNewTopic = async () => {\n      await util.makeNewTopic(newTopic, token);\n      onMakeOrDelteTopic();\n      setClick(!click);\n      setNewtopic(\"\");\n   };\n\n   const deleteTopic = async (e: React.ChangeEvent<HTMLElement>) => {\n      if (window.confirm(\"정말로 삭제하겠습니까? 삭제하면 정보가 다사라집니다.\")) {\n         await util.deleteTopic((e.currentTarget.dataset.topic) as string, token);\n         onMakeOrDelteTopic();\n      }\n   };\n\n   //TODO 엔터 입력시 만들어버리게\n\n   if (topic === null) return null;\n\n   return (\n      <CreateNewTopicComp>\n         <h1>토픽관리하기</h1>\n         <CreateNewTopicListBoxComp>\n            {topic.map((v: { Tables_in_contents: string }) => (\n               <CreateNewTopicListItemComp key={v[\"Tables_in_contents\"]}>\n                  <span>{v[\"Tables_in_contents\"]}</span>\n                  <DeleteTopicIconComp onClick={deleteTopic} data-topic={v[\"Tables_in_contents\"]}>\n                     <MdDelete />\n                  </DeleteTopicIconComp>\n               </CreateNewTopicListItemComp>\n            ))}\n         </CreateNewTopicListBoxComp>\n\n         {click &&\n         <AddTopicBtnComp>\n            <input type=\"text\" value={newTopic} onChange={setNewTopicName} />\n            <IoIosAddCircle className=\"make-new-topic-btn\" onClick={makeNewTopic} />\n         </AddTopicBtnComp>\n         }\n\n         <IoIosAddCircle className=\"add-new-topic-btn\" onClick={previousMakeNewTopic} />\n      </CreateNewTopicComp>\n   );\n}\n\nexport default React.memo(CreateNewTopic);","import React from \"react\";\nimport { TemporaryPostComp, TemporaryStorageComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport { MdDelete } from \"react-icons/md\";\n\ninterface ITempPost {\n   uid: string,\n   topic: string,\n   content_name: string,\n   created: string,\n   detail: string,\n   file: string\n}\n\nconst Srotage = ({ temp, onDelete }: any) => {\n\n   const onClick = (e: React.MouseEvent) => {\n      onDelete((e.currentTarget as HTMLElement).dataset.id as string);\n   };\n\n\n   if (temp === null) return null;\n   if (temp.length === 0) return null;\n\n   return (\n      <TemporaryStorageComp>\n         <div className=\"tsc-slo\">임시저장</div>\n         <div>\n            {temp.map((e: ITempPost) => (\n               <div className=\"temp_item\" key={e.uid}>\n                  <TemporaryPostComp>\n                     <Link to={`/write?temp=${e.uid}`}>{e.content_name}</Link>\n                  </TemporaryPostComp>\n                  <span className='posts-admin-delete' onClick={onClick} data-id={e.uid}><MdDelete /></span>\n               </div>\n            ))}\n         </div>\n      </TemporaryStorageComp>\n   );\n};\n\nexport default React.memo(Srotage);","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ninterface IReactHelmet {\n   keywords: string\n   description: string\n   title: string\n}\n\nfunction ReactHelmet({ keywords, description, title }: IReactHelmet) {\n   return (\n      <Helmet>\n         <title>{title}</title>\n         <meta name=\"description\" content={description} data-react-helmet=\"true\" />\n         <meta name=\"keywords\" content={keywords} data-react-helmet=\"true\" />\n         <meta property=\"og:title\" content={title} data-react-helmet=\"true\" />\n         <meta property=\"og:url\" content=\"http://www.junggri.com\" data-react-helmet=\"true\" />\n         <meta property=\"og:image\" content=\"http://www.junggri.com/image/og.jpg\" data-react-helmet=\"true\" />\n         <meta property=\"og:site_name\" content=\"junggri.com\" data-react-helmet=\"true\" />\n         <meta property=\"og:description\" content={description} data-react-helmet=\"true\" />\n      </Helmet>\n   );\n}\n\nexport default ReactHelmet;","import React, { useEffect } from \"react\";\nimport { PostsContainerComp } from \"../../styled-comp\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { IPostDataProps, IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { Link } from \"react-router-dom\";\nimport { CgHome } from \"react-icons/cg\";\nimport Highlight from \"react-highlight.js\";\nimport createDOMPurify from \"dompurify\";\nimport ReactHelmet from \"../../useHooks/useHelmet\";\n\nconst DOMPurify = createDOMPurify(window);\n\nfunction PostsContainer({ match }: any) {\n   const { width }: ICommonModuleProps = useCommon();\n   const { getPost, post, onClearPost }: IPostsModuleProps = usePosts();\n   const { data } = post;\n\n   useEffect(() => {\n      getPost(match.params.topic, match.params.postsId);\n      return () => onClearPost();\n   }, [match.params.topic, match.params.postsId, onClearPost, getPost]);\n\n   const MakeHtml = () => ({ __html: DOMPurify.sanitize((data as IPostDataProps).content) });\n\n\n   if (!post.data) return null;\n\n   return (\n      <PostsContainerComp width={width}>\n         <ReactHelmet\n            keywords={(data as IPostDataProps).result[0].content_name}\n            description={(data as IPostDataProps).result[0].detail}\n            title={(data as IPostDataProps).result[0].content_name}\n         />\n         <div className=\"posts-container-iconbox\">\n            <Link to=\"/\">\n               <CgHome className=\"icon-tohome\" />\n            </Link>\n         </div>\n         <div className=\"posts-name\">\n            {(data as IPostDataProps).result[0].content_name}\n         </div>\n         <div className=\"posts-detail\">\n            {(data as IPostDataProps).result[0].detail}\n         </div>\n         <Highlight language=\"react\">\n            <div dangerouslySetInnerHTML={MakeHtml()} className=\"posts-content\" />\n         </Highlight>\n         <div className=\"posts-created\">\n            {(data as IPostDataProps).result[0].created}\n         </div>\n      </PostsContainerComp>\n   );\n}\n\nexport default PostsContainer;","export default function isNew(date: string) {\n   const date_diff = ((new Date() as any) - (new Date(date) as any)) / (24 * 3600 * 1000);\n   return Math.floor(date_diff) <= 2;\n}","import React from \"react\";\nimport { EntryPostsContainerComp, EntryPostsItemComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport { IoColorWand } from \"react-icons/io5\";\nimport { MdDelete } from \"react-icons/md\";\nimport { IAllPost, IPostCommonProps } from \"../../modules/Posts/posts.interface\";\nimport isNew from \"lib/isNewPost\";\n\ninterface IEntryPostsContainer {\n   width: number,\n   posts: IAllPost\n   onDelete: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void,\n   login: boolean,\n   csrf: string\n}\n\nconst EntryPostsContainer = ({ width, posts, onDelete, login, csrf }: IEntryPostsContainer) => {\n\n   if (!posts.data) return null;\n   const data = Object.values(posts.data).flat();\n\n   return (\n      <EntryPostsContainerComp width={width}>\n         {data.map((e: IPostCommonProps) => (\n            <EntryPostsItemComp key={e.uid}>\n               <span className=\"item-created\">🗓 {e.created}</span>\n               {isNew(e.date) && <span className=\"post_is_new\">new</span>}\n               <Link to={`/topic/${e.topic}/${e.uid}`}>\n                  <div className=\"item-contentName\">\n                     {e.content_name}\n                  </div>\n               </Link>\n               <div className=\"item-detail\">🌐 {e.detail}</div>\n               <section className=\"posts-keyword-box\">\n                   <span className=\"posts-keywords\">\n                        <Link to={`/topic/${e.topic}`}>\n                            {e.topic}\n                        </Link>\n                     </span>\n               </section>\n               {login &&\n               <div className=\"posts-admin-box\" data-id={e.uid} data-topic={e.topic}>\n                  <span className='posts-admin-modify'>\n                     <Link to={`/write?modify=${e.uid}&topic=${e.topic}`}><IoColorWand /></Link>\n                  </span>\n                  <span className='posts-admin-delete' onClick={onDelete}><MdDelete /></span>\n               </div>\n               }\n            </EntryPostsItemComp>\n         ))}\n         <div className=\"sidebar-copyright\">Copyright 2021. junggri All rights reserved.</div>\n      </EntryPostsContainerComp>\n   );\n};\n\nexport default (EntryPostsContainer);","import React, { useEffect, useState } from \"react\";\nimport { TopMetaBarComp } from \"../../styled-comp\";\nimport { NavLink } from \"react-router-dom\";\nimport { BiLoaderCircle } from \"react-icons/bi\";\nimport util from \"../../lib/axios\";\n\n// import { isMobile } from \"react-device-detect\";\n\nfunction TopMetaBar({ width, match }: { width: number, match: any }) {\n   const [count, setCount] = useState<any>(null);\n\n   useEffect(() => {\n      (async () => {\n         if (count) return;\n         const { data } = await util.getGACount();\n         setCount(data);\n      })();\n   }, []);\n\n   return (\n      <TopMetaBarComp width={width}>\n         <section className=\"topmetabar-list\">\n            <NavLink to=\"/\"\n                     className=\"metaItem\"\n                     exact={match.path === \"/about\"}\n                     activeClassName=\"metaActive\">\n               <span className='tmb-icon'>🖥 </span>\n               <span>blog</span>\n            </NavLink>\n            <NavLink to=\"/about\"\n                     className=\"metaItem\"\n                     exact={match.path === \"/about\"}\n                     activeClassName=\"metaActive\">\n               <span className='tmb-icon'>🙋‍♂️ </span>\n               <span>about me</span>\n            </NavLink>\n         </section>\n         <section className=\"topmetabar-count\">\n            <div>\n               <span>전체</span>\n               <span className=\"topmetabar-countAll\">\n                  {count !== null\n                     ? <span>{count.data.totalsForAllResults[\"ga:users\"]}</span>\n                     : <BiLoaderCircle className=\"count-loading-icon\" />}\n               </span>\n            </div>\n            <div>|</div>\n            <div>\n               <span>오늘의 방문자</span>\n               <span className=\"topmetabar-today\">\n                  {count !== null\n                     ? <span>{count.data.rows[count.data.rows.length - 1][1]}</span>\n                     : <BiLoaderCircle className=\"count-loading-icon\" />}\n               </span>\n            </div>\n         </section>\n\n         {/*<div className=\"topmetabar-icons-box\">*/}\n         {/*   <GoMarkGithub className=\"icon-github\" onClick={() => {*/}\n         {/*      window.open(\"https://github.com/junggri\", \"_blank\");*/}\n         {/*   }} />*/}\n         {/*   <HiOutlineMail className=\"icon-mail\" onClick={() => {*/}\n         {/*      window.location.href = \"mailto:jjuu6933@naver.com\";*/}\n         {/*   }} />*/}\n         {/*   <Link to=\"/\">*/}\n         {/*      <CgHome className=\"icon-tohome\" />*/}\n         {/*   </Link>*/}\n         {/*</div>*/}\n      </TopMetaBarComp>\n   );\n}\n\nexport default React.memo(TopMetaBar);","export default __webpack_public_path__ + \"static/media/Logo.7ba0ce66.svg\";","import React from \"react\";\nimport { SideBarComp, SideBarMetaDataComp, SideBarThunmbNailComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../../image/Logo.svg\";\nimport { SideNavBarTopic } from \"../index\";\nimport { IAllPost } from \"../../modules/Posts/posts.interface\";\n\ninterface ISideBarNavContainer {\n   topic: IAllPost\n   login: boolean\n\n}\n\n\nconst backGround = {\n   backgroundImage: `url(${logo})`,\n   backgroundSize: \"contain\",\n   backgroundPosition: \"50% 50%\",\n   backgroundRepeat: \"no-repeat\",\n};\n\nfunction SideBarNavContainer({ topic, login }: ISideBarNavContainer) {\n   return (\n      <SideBarComp>\n         <SideBarThunmbNailComp style={backGround} />\n         <SideBarMetaDataComp>\n            <div className=\"sidebar-names\">junggri</div>\n            <div className=\"sidebar-posi posi1\">도전으로 발전하기</div>\n         </SideBarMetaDataComp>\n         <SideNavBarTopic topic={topic} />\n         {login &&\n         <Link to=\"/write\">\n            <span className=\"write-article-btn\">새 글 쓰기</span>\n         </Link>\n         }\n         <div className=\"sidebar-divider\" />\n      </SideBarComp>\n   );\n}\n\nexport default React.memo(SideBarNavContainer);","import React from \"react\";\nimport { SideBarPostsContainerComp, SideBarPostsItemComp } from \"../../styled-comp\";\n\ninterface ISideBarNavContainer {\n   topic: any\n}\n\n\nfunction SideNavBarTopic({ topic }: ISideBarNavContainer) {\n   // const date1 = new Date(topic.data.dd[0].date);\n   // const now = new Date();\n   // console.log(date1.getDate(), now.getDate());\n\n   const onMakeIsNewPost = (date: string) => {\n      const date_diff = ((new Date() as any) - (new Date(date) as any)) / (24 * 3600 * 1000);\n      return Math.floor(date_diff) <= 2;\n   };\n\n   return (\n      <SideBarPostsContainerComp>\n         <div className=\"sidebar-list\">\n            <span>전체목록</span>\n            <span>({Object.values(topic.data).flat().length})</span>\n         </div>\n         {Object.keys(topic.data).map((e: string, i: number) => (\n            <SideBarPostsItemComp to={`/topic/${e}`} key={e}>\n               <div>\n                  <span className=\"topic_list_items\">{e}</span>\n                  <span className=\"topic_length\">({topic.data[e].length})</span>\n                  {(onMakeIsNewPost(topic.data[e][0].date)) && <span className=\"topic_is_new\">new</span>}\n               </div>\n            </SideBarPostsItemComp>\n         ))}\n      </SideBarPostsContainerComp>\n   );\n}\n\nexport default React.memo(SideNavBarTopic);","import React, { useEffect, useState } from \"react\";\nimport { SpecificTopicContainerComp, SpecificTopicItemsComp } from \"../../styled-comp\";\nimport { IAllPost, IPostCommonProps } from \"../../modules/Posts/posts.interface\";\nimport { Link } from \"react-router-dom\";\nimport isNew from \"../../lib/isNewPost\";\n\ninterface ISpecificTopicContainer {\n   width: number;\n   match: any\n   onGetPosts: (params: string) => void\n   login: boolean\n   posts: IAllPost\n}\n\nfunction SpecificTopicContainer({ width, match, login, posts }: ISpecificTopicContainer) {\n   const params = match.params.topic;\n   const [post, setPost] = useState([]);\n\n   useEffect(() => {\n      setPost((posts as any).data[params]);\n   }, [params, posts]);\n\n\n   return (\n      <SpecificTopicContainerComp width={width}>\n         {post.map((e: IPostCommonProps) => (\n            <SpecificTopicItemsComp key={e.uid}>\n               <span className=\"item-created\">🗓 {e.created}</span>\n               {isNew(e.date) && <span className=\"post_is_new\">new</span>}\n               <Link to={`/topic/${e.topic}/${e.uid}`}>\n                  <div className=\"item-contentName\">\n                     {e.content_name}\n                  </div>\n               </Link>\n               <div className=\"item-detail\">🌐 {e.detail}</div>\n               {login &&\n               <div className=\"posts-admin-box\" data-id={e.uid} data-topic={e.topic}>\n                  {/*<span className='posts-admin-modify' onClick={onModified}><IoColorWand /></span>*/}\n                  {/*<span className='posts-admin-delete' onClick={onDelete}><MdDelete /></span>*/}\n               </div>\n               }\n            </SpecificTopicItemsComp>\n            // <SpecificTopicItemsComp key={e.uid} to={`/topic/${e.topic}/${e.uid}`}>\n            //    <span className=\"item-created\">{e.created}</span>\n            //    <div className=\"item-contentName\">{e.content_name}</div>\n            //    <div className=\"item-detail\">{e.detail}</div>\n            //    <section className=\"posts-keyword-box\">\n            //       <span className=\"posts-keywords\">\n            //          <span>\n            //             {e.topic}\n            //          </span>\n            //       </span>\n            //    </section>\n            // </SpecificTopicItemsComp>\n         ))}\n      </SpecificTopicContainerComp>\n   );\n}\n\nexport default SpecificTopicContainer;","import React from 'react'\nimport {AboutContainerComp} from \"../../styled-comp\";\n\ninterface IAboutContainer {\n    width: number\n}\n\nfunction AboutContainer({width}: IAboutContainer) {\n    return (\n        <AboutContainerComp width={width}>\n            <div className=\"icons\" style={{\n                fontSize: \"17rem\",\n                textAlign: 'center'\n            }}>🔥 💻 🖥 🖱\n            </div>\n            <div className=\"detail\" style={{\n                fontSize: \"2rem\",\n                textAlign: 'center',\n                marginTop: '100px'\n            }}>업데이트 예정입니다.\n            </div>\n        </AboutContainerComp>\n    )\n}\n\nexport default AboutContainer","import React, { useEffect } from \"react\";\nimport useCommon from \"./useCommon\";\nimport util from \"../lib/axios\";\n\nfunction LoginFlag() {\n   const { onSetLogin } = useCommon();\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.checkJWTToken();\n         data.decoded ? onSetLogin(true) : onSetLogin(false);\n      })();\n   }, [onSetLogin]);\n\n}\n\nexport default LoginFlag;","import React, { useCallback, useEffect } from \"react\";\nimport { EntryContainerComp } from \"../../styled-comp\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport { AboutContainer, EntryPostsContainer, SideBarContainer, SpecificTopicContainer } from \"component/index\";\nimport { Route } from \"react-router-dom\";\nimport useLoginFlag from \"../../useHooks/useLoginFlag\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport TopMetaBar from \"./TopMetaBar\";\nimport ReactHelmet from \"../../useHooks/useHelmet\";\nimport util from \"../../lib/axios\";\n\n\nfunction CommonEntry({ match }: any) {\n   useLoginFlag();\n   const csrf = useCSRF();\n   const { width, login, newRequest, setNewRequset }: ICommonModuleProps = useCommon();\n   const { AllPosts, posts, getPosts, getAllPosts }: IPostsModuleProps = usePosts();\n\n   useEffect(() => {\n      if (newRequest) {\n         getAllPosts();\n         setNewRequset(false);\n      }\n   }, [getAllPosts, newRequest, setNewRequset]);\n\n\n   const onDelete = useCallback((e: React.MouseEvent<HTMLElement>) => {\n      const uid = (e.currentTarget.parentNode as HTMLElement).dataset.id as string;\n      const topic = (e.currentTarget.parentNode as HTMLElement).dataset.topic as string;\n      (async () => {\n         await util.deletePost(uid, topic, csrf);\n         getAllPosts();\n      })();\n\n   }, [csrf, getAllPosts]);\n\n   if (!AllPosts.data) return null;\n\n   return (\n      <EntryContainerComp width={width}>\n         <ReactHelmet\n            keywords={\"nodejs 그리고 자바스크립트의 이야기들\"}\n            description={\"자바스크립트부터 웹까지의 전반적인 이야기와 나의 성장이야기\"}\n            title={\"junggri 블로그\"} />\n         <TopMetaBar width={width} match={match} />\n         {match.path !== \"/about\" ? <SideBarContainer topic={AllPosts} login={login} /> : null}\n         <Route path=\"/\" exact render={() => (\n            <EntryPostsContainer\n               width={width}\n               posts={AllPosts}\n               onDelete={onDelete}\n               login={login}\n               csrf={csrf}\n            />\n         )} />\n         <Route path=\"/topic/:topic\" exact render={() => (\n            <SpecificTopicContainer\n               width={width}\n               match={match}\n               posts={AllPosts}\n               onGetPosts={getPosts}\n               login={login}\n            />\n         )} />\n         <Route path=\"/about\" exact render={() => (\n            <AboutContainer\n               width={width}\n            />\n         )} />\n      </EntryContainerComp>\n   );\n}\n\nexport default CommonEntry;","import React from \"react\";\nimport CommonEntry from \"../component/Home/CommonEntry\";\n\nconst Entry = ({ match }: any) => {\n   return (\n      <>\n         <CommonEntry match={match} />\n      </>\n   );\n};\n\nexport default Entry;\n","import React from \"react\";\nimport { Editor } from \"component\";\nimport \"../../node_modules/react-quill/dist/quill.snow.css\";\n\n\nfunction TextEditor({ history, location }: any) {\n\n   return <Editor history={history} location={location} />;\n}\n\nexport default TextEditor;\n","import React from \"react\";\nimport { PostsContainer } from \"../component\";\n\nfunction Posts({ match }: any) {\n\n   return (\n      <PostsContainer match={match} />\n   );\n}\n\nexport default Posts;","import React, {useRef, useState} from \"react\";\nimport {AdminLoginBoxComp} from \"../styled-comp\";\nimport util from \"../lib/axios\";\nimport useCSRF from \"../useHooks/useCSRF\";\n\nfunction Admin({history}: any) {\n    const [user, setUser] = useState({\n        id: process.env.NODE_ENV === \"development\" ? \"jjuu6933\" : \"\",\n        pwd: process.env.NODE_ENV === \"development\" ? \"wowwjd12!@\" : \"\",\n        number: process.env.NODE_ENV === \"development\" ? \"1\" : \"\",\n    });\n\n    const [visivle, setVisible] = useState<boolean>(false);\n    const [number, setNumber] = useState<number>(0);\n    const [certification, setCertification] = useState<boolean>(false);\n    const count = useRef(0);\n\n    const csrf = useCSRF();\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUser(state => ({\n            ...state,\n            [e.target.name]: e.target.value,\n        }));\n    };\n\n    const onSubmit = async () => {\n        // console.log(count.current);TODO 3번이상일때 디비에 잠금걸자.\n        setVisible(true);\n        const {data} = await util.adminLogin(user, csrf);\n        if (!data.state) count.current++;\n        else {\n            setCertification(true);\n        }\n        setNumber(data.number);\n    };\n\n    const onCertificationPhone = async () => {\n        if (parseInt(user.number, 10) === number && certification) {\n            await util.setJwtToken(csrf);\n            history.push(\"/\");\n        } else {\n            count.current++;\n        }\n    };\n\n\n    return (\n        <AdminLoginBoxComp>\n            <div className=\"login-inputbox\">\n                <input type=\"text\" name=\"id\" value={user.id} placeholder=\"아이디\" onChange={onChange}/>\n                <input type=\"password\" name=\"pwd\" value={user.pwd} placeholder=\"비밀번호\" onChange={onChange}/>\n            </div>\n            {visivle &&\n            <div className=\"certification-numberBox\">\n                <input type=\"text\" value={user.number} name=\"number\" onChange={onChange}/>\n                <button onClick={onCertificationPhone}>\n                    확인하기\n                </button>\n            </div>\n            }\n            <button className=\"login-btn\" onClick={onSubmit}>\n                인증시작하기\n            </button>\n        </AdminLoginBoxComp>\n    );\n}\n\nexport default Admin;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Admin, Entry, Posts, TextEditor } from \"pages\";\n\nfunction App() {\n   return (\n      <BrowserRouter>\n         <div id=\"App\">\n            <Switch>\n               <Route path=\"/\" exact component={Entry} />\n               <Route path=\"/about\" exact component={Entry} />\n               <Route path=\"/topic/:topic\" exact component={Entry} />\n               <Route path=\"/topic/:topic/:postsId\" exact component={Posts} />\n               <Route path=\"/write\" exact component={TextEditor} />\n               <Route path=\"/write/:tempId\" component={TextEditor} />\n               <Route path=\"/admin/leejeongsoo\" component={Admin} />\n               <Route render={() => <h1>Not found</h1>} />\n            </Switch>\n         </div>\n      </BrowserRouter>\n   );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport posts from \"./Posts\";\nimport common from \"./Common\";\nimport topic from \"./Topic\";\nimport textEdit from \"./TextEditor\";\n\nconst rootReducer = combineReducers({ posts, common, topic, textEdit });\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","const TokenMiddleWare = (store: any) => (next: any) => (action: any) => {\n   next(action);\n};\n\nexport default TokenMiddleWare;","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../modules\";\nimport Thunk from \"redux-thunk\";\nimport TokenMiddleWare from \"../middleWare/TokenMiddleWare\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\n\n\nconst middleWares = [Thunk, TokenMiddleWare];\n\nconst devTools =\n   process.env.NODE_ENV === \"production\"\n      ? applyMiddleware(...middleWares)\n      : composeWithDevTools(applyMiddleware(...middleWares));\n\nexport const store = createStore(rootReducer, devTools);\n\n","import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./shared/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./lib/store\";\nimport \"../src/styles/highlight/atom-one-light.css\";\n\nReactDOM.render(\n   <>\n      <Provider store={store}>\n         <GlobalStyles />\n         <App />\n      </Provider>\n   </>,\n   document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}