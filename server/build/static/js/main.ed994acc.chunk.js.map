{"version":3,"sources":["reportWebVitals.ts","styles/GlobalStyles.tsx","serviceWorkerRegistration.ts","styles/Media.ts","styled-comp.tsx","modules/Common/index.ts","useHooks/useCommon.tsx","config/axois.config.ts","lib/axios.ts","modules/Posts/lib/PostsUtil.ts","modules/Posts/index.ts","useHooks/usePosts.tsx","modules/Posts/lib/PostsAction.ts","component/TextEditor/SelectTopic.tsx","component/TextEditor/WriteTopicName.tsx","config/textEditor.config.ts","modules/Topic/index.ts","modules/TextEditor/index.ts","useHooks/useTextEdit.tsx","useHooks/useCSRF.tsx","component/TextEditor/Editor.tsx","useHooks/useTopic.tsx","component/TextEditor/TextEditBtnBox.tsx","component/TextEditor/SelectKindOfPosts.tsx","component/TextEditor/PostsDetail.tsx","component/TextEditor/CreateNewTopic.tsx","component/TextEditor/StoragePost.tsx","useHooks/useHelmet.tsx","component/Content/PostsContainer.tsx","component/Content/EntryPostsContainer.tsx","useHooks/useAuth.tsx","useHooks/useReport.tsx","component/Home/TopMetaBar.tsx","image/Logo.svg","component/Home/SideNavBar.tsx","component/Home/SideNavBarTopic.tsx","component/Content/SpecificTopicContainer.tsx","component/About/AboutContainer.tsx","useHooks/useLoginFlag.tsx","component/Home/CommonEntry.tsx","pages/Entry.tsx","pages/TextEditor.tsx","pages/Posts.tsx","pages/Admin.tsx","shared/App.tsx","modules/index.ts","middleWare/TokenMiddleWare.ts","lib/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","reset","window","innerHeight","Boolean","location","hostname","match","sizes","desktop","postBox","tablet","mobile","small","smallest","media","Object","keys","reduce","acc","label","args","css","EntryContainerComp","styled","div","props","width","postsContainerMixin","postsItemMixin","lighten","rotate","keyframes","TopMetaBarComp","section","SideBarComp","leftWidth","SideBarThunmbNailComp","SideBarMetaDataComp","SideBarPostsContainerComp","ul","SideBarPostsItemComp","NavLink","EntryPostsContainerComp","SpecificTopicContainerComp","EntryPostsItemComp","SpecificTopicItemsComp","PostsContainerComp","AdminLoginBoxComp","logo","WriteBox","WriteConditionBox","memo","WriteBtnBoxComp","WriteBtnComp","button","darken","SelectTopicBoxComp","SelectTopicItemComp","CreateNewTopicComp","CreateNewTopicListBoxComp","DeleteTopicIconComp","AddTopicBtnComp","CreateNewTopicListItemComp","SelectKindOfPostsBoxComp","SelectKindOfPosts","PostsDetailComp","TemporaryStorageComp","TemporaryPostComp","AboutContainerComp","SET_IS_LOGIN","NEW_REQUEST","initialState","screen","login","loading","newRequest","e","useCommon","dispatch","useDispatch","useSelector","state","common","onSetLogin","useCallback","type","payload","setNewRequset","dotenv","instance","axios","create","withCredentials","defaults","headers","interceptors","request","use","config","err","Promise","reject","util","getCSRTtoken","url","method","getTopicName","savePost","data","token","temporaryPost","getTempPostFromId","id","getTempPost","getAllPostsItems","getPostFromParams","parmas","getPostFromPostId","topic","postsId","deleteTopic","topicName","deletePost","uid","makeNewTopic","newTopic","adminLogin","setJwtToken","checkJWTToken","reducerUtil","error","prevState","createThunk","cb","SUCCESS","ERROR","parameter","a","params","handleAction","key","keepData","action","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","GET_ALL_POSTS","GET_ALL_POSTS_SECCUESS","GET_ALL_POSTS_ERROR","DELETE_POST","CLEAR_POST","onRequestPosts","onRequsetPost","onRequestAllPosts","posts","post","AllPosts","usePosts","getPosts","getPost","getAllPosts","onDeletePost","onClearPost","SelectTopic","onIsChecked","onChange","target","value","className","map","v","name","htmlFor","React","WriteTopicName","onNameChange","placeholder","hljs","configure","languages","modules","syntax","highlight","text","highlightAuto","toolbar","header","font","size","color","background","align","list","indent","formats","bold","Quill","import","tagName","register","italic","GET_TOPIC","GET_TOPIC_SUCCESS","GET_TOPIC_ERROR","onReqTopicsName","getState","SET_CONTENT","SET_CONTENT_NAME","SET_TOPIC","SET_KIND_OF_POSTS","SET_DETAIL","SET_TEMP_DATA","contentName","content","kindOfPosts","detail","TextEditor","useTextEdit","textEdit","setContent","onSetContent","setContentName","onSetContentName","setTopic","onSetTopic","setKindOfPosts","kindOf","setDetail","onSetDetail","setTempData","onSetTempData","CSRF","useState","csrf","setCsrf","useEffect","Editor","history","useCSRF","ref","useRef","temp","setTemp","makeOrDeleteAndReqNewTopics","requestTopic","useTopic","decoded","current","focus","push","rteChange","delta","source","editor","onCheckKindOfPosts","onChangeDetail","onMakeOrDelteTopic","onSubmit","alert","result","status","onTemporaryPost","onChangeMode","filter","split","content_name","textContent","theme","onCheck","StoragePost","TextEditBtnBox","onClick","SelectKindOfPost","PostsDetail","setValue","CreateNewTopic","click","setClick","setNewtopic","confirm","currentTarget","dataset","data-topic","Srotage","length","data-id","file","ReactHelmet","keywords","description","title","Helmet","data-react-helmet","property","DOMPurify","createDOMPurify","PostsContainer","to","language","dangerouslySetInnerHTML","__html","sanitize","created","EntryPostsContainer","onModified","console","log","onDelete","parentNode","values","flat","Auth","isSignedIn","setIsSignedIn","checkSignedIn","resolve","gapi","auth2","init","client_id","scope","auth","getAuthInstance","get","catch","signedIn","load","Report","setData","setLoad","useAuth","displayResults","response","queryResult","reports","client","path","root","body","reportRequests","viewId","dateRanges","startDate","endDate","metrics","expression","dimensions","TopMetaBar","ga","useReport","exact","activeClassName","isMobile","totals","rows","backGround","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","SideBarNavContainer","style","SideNavBarTopic","SpecificTopicContainer","onGetPosts","AboutContainer","fontSize","textAlign","marginTop","LoginFlag","CommonEntry","useLoginFlag","render","Entry","Posts","Admin","pwd","number","user","setUser","visivle","setVisible","setNumber","certification","setCertification","count","onCertificationPhone","parseInt","App","component","rootReducer","combineReducers","TokenMiddleWare","store","next","middleWares","Thunk","devTools","applyMiddleware","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ed994acc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst GlobalStyles = createGlobalStyle`\n ${reset}\n    *{\n        box-sizing:border-box;\n    }\n    body,html{\n        font-size:14px;\n        font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", \"Apple SD Gothic Neo\", \"Malgun Gothic\", \"맑은 고딕\", 나눔고딕, \"Nanum Gothic\", \"Noto Sans KR\", \"Noto Sans CJK KR\", arial, 돋움, Dotum, Tahoma, Geneva, sans-serif !important;\n        color:rgb(36, 41, 46);\n        position:relative;\n        height:100%;\n    }\n    a{\n        text-decoration:none;\n        color:inherit;\n        cursor: pointer;\n    }\n    ol, ul, li {\n        list-style: none;\n    }\n    img {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n    input, button {\n        background-color: transparent;\n    }\n    h1, h2, h3, h4, h5, h6 {\n    font-family:'Maven Pro', sans-serif;\n    }\n  \n    b { \n        font-weight: bold !important; \n    }\n    i { \n        font-style : italic;\n    }\n    .quill{\n        height: ${window.innerHeight - 100 + \"px\"};\n    }\n    .quill img{\n        height: auto;\n        width:auto;\n        max-height: 700px;\n        position: relative;\n        margin :0 auto;\n    }\n    .ql-container.ql-snow{\n        border:none; \n    } \n    .ql-size-huge{\n        font-size:4rem !important;\n    }\n    .content-title{\n        width:100%;\n        height:100px;\n        resize:none;\n        border:none;\n        outline-style:none;\n        padding:25px;\n        font-size:3rem;\n    }\n    .writeBox-inputs{\n        border:1px solid black;\n        width:50%;\n        border: 1px solid rgba(0, 0, 0, 0.2);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }\n    .react,.hljs,.stata{\n       background: white !important;\n    }\n    .content-title::placeholder{\n        font-size:3rem;\n        font-style:italic\n    }\n    .preview-title{\n        border:1px solid black;\n        font-size:3rem;\n        word-break:break-all;\n        margin-bottom:100px;\n    }\n    .ql-container.ql-snow{\n        height:90%\n    }\n    .ql-editor .ql-syntax{\n        background: rgb(248 249 250) !important;\n    }\n    .ql-syntax{\n     font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n     padding:30px 30px; \n     border-radius: 4px;\n     font-size: 0.9rem;\n     background: rgb(248 249 250);\n     font-weight: 300 !important;\n     white-space: pre-wrap !important;\n     & span{\n        font-weight:300 !important;\n      }\n    }\n    .ql-snow .ql-editor pre.ql-syntax{\n      color:black !important;\n     }\n    .ql-toolbar.ql-snow{\n        border-left:none;\n        border-right:none;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }   \n    .hljs-function{\n      .hljs-params{\n         //color:rgb(36, 41, 46);\n      }\n    }\n    .ql-editor blockquote{\n      padding:10px 20px;\n      border-left:5px solid #f58320 !important;\n      background: rgb(248 249 250);\n    }\n    .hljs-params,.hljs-attr{\n      color:rgb(36, 41, 46) !important;\n    }\n    .ql-syntax .hljs-tag{\n      color:black;\n      & .hljs-name{\n        color:#a626a4 !important;\n      }\n      & .hljs-attr{\n        color: #4078f2 !important;\n      } \n    }\n    .ql-size-large{\n      font-size: 2.7rem !important;\n    }\n    .ql-size-huge{\n      font-size:4rem !important;\n    }\n    .ql-size-small{\n      font-size:1rem !important\n    }\n`;\n\nexport default GlobalStyles;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { css } from \"styled-components\";\n\ninterface ISizes {\n   desktop: number\n   tablet: number\n   mobile: number\n\n   [index: string]: any\n}\n\nconst sizes: ISizes = {\n   desktop: 1250,\n   postBox: 1120,\n   tablet: 900,\n   mobile: 500,\n   small: 262,\n   smallest: 219,\n};\n\nexport const media = Object.keys(sizes).reduce((acc: any, label: any) => {\n   acc[label] = (...args: any) => css`\n     @media(max-width:${sizes[label] / 16}em){\n    ${css(args)};\n  }\n`;\n   return acc;\n}, {});","import styled, { css, keyframes } from \"styled-components\";\nimport { darken, lighten } from \"polished\";\nimport React, { memo } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { media } from \"./styles/Media\";\n\nexport interface Width {\n   width: number;\n}\n\nexport interface topView {\n   width: number;\n   logo: any\n   ref: any\n}\n\nexport interface contentBox {\n   ref: any;\n}\n\ninterface IDeleteTopicIconComp {\n   onClick: any\n}\n\ninterface ISideBarThunmbNailComp {\n   style: any\n}\n\n//INTERFACE\n//위의 인터페이스는 컴포넌트가 가지는 PROPS의 인터ㅔ이스\n\nconst leftWidth = 165;\n\ninterface IEntryContainerComp {\n   width: number\n}\n\nexport const EntryContainerComp = styled.div<IEntryContainerComp>`\n  width:${props => props.width + \"px\"};\n  position:relative;\n  margin:0 auto;\n  ${media.desktop`width:95%`}\n`;\n\n\nconst postsContainerMixin = css<Width>`\n  ${media.mobile`\n   position:relative;\n   padding-left:10px;\n   padding-rigth:10px;\n  `};\n  margin-top:100px;\n  padding-left:253px; \n  width:100%;\n  position: absolute;\n  top:0;\n  & .sidebar-copyright{\n   text-align: right;\n   letter-spacing: 1.1px;\n   font-size:12px;\n   margin-top:80px;\n   margin-bottom: 20px;\n  }\n`;\n\nconst postsItemMixin = css`  \n  position:relative;\n  margin-bottom:60px;\n  word-break:break-all;\n  & .item-created{\n    display: inline-block;\n    font-size:1.1rem;\n    font-weight: 600;\n    opacity: 0.9;\n    ${media.tablet`font-size:0.8rem`};\n  }\n  & .item-contentName{\n    overflow-wrap: break-word;\n    font-size:2.7rem;\n    margin-top:6px;\n    letter-spacing: 2px;\n    font-weight: 450 ;\n    ${media.tablet`\n      font-size:2rem;\n      margin-top:-4px\n    `};\n    //white-space:nowrap;\n    //overflow: hidden;\n    //text-overflow: ellipsis;\n    //위에는 ...표시하는 방법\n    padding:6px 0;\n  }\n  & .item-detail{\n    font-size:1.2rem;\n    margin-top:40px;\n    ${media.tablet`font-size:0.8rem`}\n  }\n  & .posts-keyword-box{\n    margin-top:20px;\n    & .posts-keywords{\n      transition: 0.3s all;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    }\n    & .posts-keywords:hover{\n      background: ${lighten(0.07, \"#f58320\")};\n    }\n  }\n  & .posts-keywords{\n    background: #f58320;\n    color:white;\n    display: inline-block;\n    padding:4px 12px;\n    border-radius: 15px;\n    letter-spacing: 1.2px;\n  }\n  & .posts-admin-box{\n    position: absolute;\n    right:0;\n    bottom:0;\n    z-index: 9;\n    span{\n      vertical-align: middle;\n      font-size:1.6rem;\n      opacity: 0.6;\n      margin-left:12px;\n      transition: 0.3s all;\n    }\n    span:hover{\n      opacity: 1;\n      cursor: pointer;\n    }   \n  }\n`;\nconst rotate = keyframes`\n  100%{\n    transform: rotate(360deg);\n  }\n`;\nexport const TopMetaBarComp = styled.section<Width>`\n  position: fixed;\n  top:0;\n  width:${props => props.width + \"px\"};\n  z-index: 999;\n  padding-bottom: 5px;\n  background:white;\n  ${media.tablet`\n   width:95%;\n  `};\n  ${media.desktop`\n   width:95%;\n  `};\n  & .topmetabar-list{\n    display: flex;\n    margin-top:20px;\n    & .metaItem{  \n      padding:5px 2px;\n      margin-right: 40px;\n      font-size:1.5rem;\n      opacity: 0.6;\n      font-weight: 500;\n      letter-spacing: 1.4px;\n      ${media.tablet`\n        font-size:1.2rem;\n      `};\n      ${media.small`\n        font-size:0.8rem;\n      `}\n      & .tmb-icon{\n        ${media.mobile`\n         display:none;\n        `};\n        ${media.small`\n         display:none;\n        `}\n      }\n     &:hover{\n      opacity: 1;       \n     }\n    }\n    & .metaActive{\n      opacity: 1;\n      border-bottom:2.5px solid black;  \n      ${media.small`\n        border-bottom:1.5px solid black;\n      `}    \n    }\n  }\n  & .topmetabar-count{\n    ${media.desktop`\n     right:5%;\n    `};\n    ${media.mobile`\n      display:none;\n    `};\n    position: absolute;\n    right:0;\n    top:0;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    & div {\n      margin-left:12px;\n      font-weight: 100;\n      font-size:12px;\n      display: flex;\n      align-items: center;\n       & .topmetabar-countAll,.topmetabar-today{\n         margin-left:6px;\n         display: flex;\n       }\n       & .count-loading-icon{\n         animation: ${rotate} infinite linear 5s;\n      }\n    }\n  }\n  //& .topmetabar-icons-box{\n  // position: relative;\n  // font-size:1.65rem;\n  // display: flex;\n  // align-items: center;\n  // & .icon-github,.icon-tohome,.icon-mail{\n  //   cursor: pointer;\n  //   opacity: 0.8;\n  //   display: inline-block;\n  //   margin-left:24px;\n  //   transition:0.3s all;\n  //  }\n  //}\n  //& .icon-github:hover,.icon-tohome:hover,.icon-mail:hover{\n  //  opacity: 1;\n  //}\n`;\n\n\nexport const SideBarComp = styled.section`\n  display: inline-block;\n  width: ${leftWidth + \"px\"};\n  ${media.mobile`display:none`};\n  position : fixed;\n  z-index: 9;\n  & .write-article-btn {\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    display: inline-block;\n    padding: 7px 20px;\n    border-radius: 10px;\n    font-size: 14px;\n    font-weight: 100;\n    transition: all 0.2s;\n    margin-top:20px;\n   }\n  & .write-article-btn:hover {\n    cursor: pointer;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n  \n`;\n\n\nexport const SideBarThunmbNailComp = styled.div<ISideBarThunmbNailComp>`\n  border:1px solid rgba(0,0,0,0.06);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  position: relative;\n  width:120px;\n  padding-bottom: 120px;\n  border-radius: 5px;\n  margin-top:100px;\n`;\n\nexport const SideBarMetaDataComp = styled.div`\n  margin-top:46px;\n  & .sidebar-names{\n    font-size:2.2rem;\n    font-weight: 400;\n    letter-spacing:5px;\n  }\n  & .sidebar-posi{\n    letter-spacing: 1.2px;\n    font-size:0.95rem;\n    font-weight: 300;\n    &.posi1{\n      margin-top:15px;\n    }\n    &.posi2{\n      margin-top:6px;\n    }\n  }\n`;\n\nexport const SideBarPostsContainerComp = (styled.ul`\n  margin-top:70px;\n  & .sidebar-list{\n    font-size:1.1rem;\n    margin-bottom:15px;\n    padding-bottom:15px;\n    border-bottom: 1px solid black;\n    letter-spacing: 1.2px;\n    font-weight: 500;\n  }\n`);\n\nexport const SideBarPostsItemComp = styled(NavLink)<any>`\n  height: 16px;\n  display:block;\n  margin-bottom:6px;\n  transition: all 0.6s;\n  vertical-align: middle;\n  & div{\n    vertical-align: middle;\n    font-size:1.1rem;\n    font-weight: 300;\n    opacity:1;\n    display: flex;\n    & .topic_list_items:hover{\n      text-decoration: underline;\n    }\n  }\n  & .topic_length{\n    display: inline-block;\n    font-size:1rem;\n    margin-left:5px;\n  }\n  &[aria-current] {\n    color: black;\n    & .topic_list_items{\n      opacity: 1;\n      font-weight: 500;\n      color:#3a7dff\n    }\n  }\n\n`;\n\nexport const EntryPostsContainerComp = styled.div<Width>`\n  ${postsContainerMixin}\n`;\n\nexport const SpecificTopicContainerComp = styled.div<Width>`\n  ${postsContainerMixin};\n`;\n\nexport const EntryPostsItemComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const SpecificTopicItemsComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const PostsContainerComp = styled.section<Width>`\n  width:${props => props.width + \"px\"};\n  ${media.desktop`\n    width:90%;\n  `};\n  ${media.tablet`\n    width:85%;\n  `};\n  ${media.mobile`\n    width:80%;\n  `};\n  position: relative;\n  margin: 0 auto;\n  padding-bottom: 80px;\n  background: white;\n  & .posts-container-iconbox{\n    padding:20px 20px;\n    font-size:1.5rem;\n  }\n  & img{\n    height:auto;\n    width:auto;\n    max-height: 700px;\n    position: relative;\n    margin :0 auto;\n    ${media.mobile`max-width:100%`};\n  }\n  & .posts-name{\n    ${media.mobile`font-size:2rem`};\n    padding-top:50px;\n    font-size:3.5rem;\n    text-align: center;\n    font-weight: bold;\n  }\n  & .posts-detail{\n    text-align: center;\n    margin-top:20px;\n    font-size:1.2rem\n  }\n  & .posts-content{\n    word-break:break-all;\n    font-size:1.2rem;\n    margin-top:50px;    \n    & *{\n      white-space: pre-wrap !important;\n      word-break: break-all;\n      line-height: 2.11;\n    }\n    blockquote{\n      padding:10px 20px;\n      border-left:5px solid #f58320;\n      background: rgb(248 249 250);\n    }\n    p,ol,blockquote,span{\n      color:black\n    }\n  }\n  & .posts-created{\n    margin-top: 60px;\n    text-align: right;\n    font-size:1rem;\n    font-weight:100;\n  }\n`;\n// & .posts-content{\n//    word-break:break-all;\n//    line-height: 1.5;\n//    padding: 10px 10px;\n//    border-radius: 5px;\n// & img{\n//       height:auto;\n//       width:auto;\n//       max-height: 500px;\n//       position: relative;\n//       margin :0 auto;\n//    }\n// }\n\nexport const TopCommonSectionComp = (styled.div<topView>`\n   position: relative;\n   margin: 0 auto;\n   width: ${(props) => props.width + \"px\"};\n   height: 280px;\n   max-width: ${(props) => props.width + \"px\"};\n   background-image: url(${props => props.logo});\n   background-repeat:no-repeat ;\n   background-size: contain;\n   background-position: 50% 40%;\n   & .write-article-btn {\n      border: 1px solid rgba(0, 0, 0, 0.2);\n      display: inline-block;\n      padding: 7px 20px;\n      border-radius: 10px;\n      font-size: 14px;\n      font-weight: 100;\n      position: absolute;\n      bottom: 30px;\n      right: 30px;\n      transition: all 0.2s;\n   }\n   & .write-article-btn:hover {\n      cursor: pointer;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   }\n   @media (max-width: 1024px) {\n      width:768px;\n   }\n   @media(max-width:768px){\n      width:100%;\n   }\n`);\n\n\n//\nexport const AdminLoginBoxComp = styled.div`\n  position: absolute;\n  width:30%;\n  left:50%;\n  top:40%;\n  transform: translate(-50%,-50%);\n  & .login-inputbox{\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n    & input{\n      padding:15px 10px;\n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n    }\n  }\n  & .login-btn{\n    border:1px solid rgb(0,0,0,0.2);\n    width:100%;\n    height: 57px;\n    outline-style: none;\n    cursor: pointer;\n  }\n  & .certification-numberBox{ \n    display: flex;\n    button{\n      border:1px solid rgba(0,0,0,0.2);\n      outline-style: none;\n      height: 40px;\n      font-size: 12px;\n      letter-spacing: 1.2px;\n      cursor: pointer ;\n    }\n    input{\n      height: 40px;  \n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n      margin-right: 15px;\n      font-size: 1rem;\n      padding-left: 10px;\n    }\n  }\n`;\n//--------------------------------write---------------------------------------\n\nexport const WriteBox = (styled.div`\n   position: absolute;\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   height: 100%;\n   width: 50%;\n   border-radius: 4px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   overflow: scroll;\n`);\n\nexport const WriteConditionBox = memo(styled.section`\n   position: absolute;\n   right: 0;\n   width: 50%;\n   height: 100%;\n   overflow: scroll;\n`);\n\n\nexport const WriteBtnBoxComp = (styled.div`\n   padding-left:60px;\n   margin-top:30px;\n`);\n\nexport const WriteBtnComp = styled.button`\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   padding: 15px 25px;\n   font-size: 17px;\n   border-radius: 4px;\n   letter-spacing: 1.2px;\n   transition: 0.3s all;\n   background: #a5d8ff;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   color: black;\n   font-weight: 300;\n   margin-right: 30px;\n   &:hover {\n      cursor: pointer;\n      background-color: ${darken(0.1, \"#a5d8ff\")};\n   }\n   \n`;\n\n\nexport const SelectTopicBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\nexport const SelectTopicItemComp = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const CreateNewTopicComp = styled.div`\n   padding-top:20px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:20px;\n    margin-bottom: 20px;\n   }\n   & .add-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-top: 10px;\n   }\n   & .add-new-topic-btn:hover{\n    color: gray;\n   } \n`;\n\nexport const CreateNewTopicListBoxComp = styled.div`\n  width:180px;\n`;\n\nexport const DeleteTopicIconComp = styled.div<IDeleteTopicIconComp>`\n  display: flex;\n  font-size:20px;\n  cursor: pointer;\n  opacity: 0;\n  color: #dee2e6;\n  & :hover{\n    color:#ff6b6b;\n  }\n`;\n\nexport const AddTopicBtnComp = styled.div`\n  display: flex;\n  align-items: center;\n  & input{\n    padding:8px;\n    border:1px solid rgba(0,0,0.6);\n  }\n  & .make-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-left: 15px;\n  }\n  & .make-new-topic-btn:hover{\n    color: gray;\n  } \n`;\n\nexport const CreateNewTopicListItemComp = styled.div`\n  margin-bottom:15px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  & span{\n    display: inline-block;\n    width:70%;\n    font-size:22px;\n    font-weight: 100;\n  }\n  &:hover{\n    ${DeleteTopicIconComp}{\n      opacity: 1;\n    }\n  }\n`;\n\n\nexport const SelectKindOfPostsBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\n\nexport const SelectKindOfPosts = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    width:100px;\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const PostsDetailComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:1.7rem;\n    margin-bottom: 30px;\n   }\n   & input{\n    width:100%;\n    height: 50px;\n    outline-style: none;\n    border:none;\n    padding-left: 10px;\n    border-radius: 5px;\n    background-color: ${lighten(0.1, \"#a5d8ff\")};\n   }\n`;\n\nexport const TemporaryStorageComp = styled.div`\n  padding-left:60px;\n  margin-top:50px;\n  margin-bottom:40px;\n  & .tsc-slo{\n    font-size:1.7rem;\n  }\n`;\n\nexport const TemporaryPostComp = styled.div<any>`\n  margin-top:20px;\n  cursor:pointer;\n  font-size:1.4rem;\n  &:hover{\n    text-decoration: underline;\n  }\n`;\n//--------------------------------write---------------------------------------\n\n\nexport const AboutContainerComp = styled.div<Width>`\n  position: relative;\n  width:${props => props.width + \"px\"};\n  padding-top:100px;\n`;","import {ICommonAction, ICommonState} from \"./common.interface\";\n\n\nexport const SET_IS_LOGIN = \"common/SET_IS_LOGIN\";\n\nexport const NEW_REQUEST = \"common/NEW_REQUEST\";\n\nexport const onSetIsLogin = (payload: boolean) => ({type: SET_IS_LOGIN, payload});\n\nexport const onNewRequset = (payload: boolean) => ({type: NEW_REQUEST, payload: payload});\n\n// typescript는 const를 이해하므로(typeof CHECK_GUESTBOOK은 string이 아니라 'CHECK_GUESTBOOK'입니다)\n// 액션 이름을 그대로 쓰셔도 됩니다.\n\n//thunk 생성함\n\n\nconst initialState: ICommonState = {\n    width: window.screen.width * 0.67,\n    login: false,\n    loading: false,\n    newRequest: true,\n    e: null,\n};\n\n\nexport default function common(state: ICommonState = initialState, action: ICommonAction): ICommonState {\n    switch (action.type) {\n        case SET_IS_LOGIN:\n            return {\n                ...state,\n                login: action.payload as boolean,\n            };\n        case NEW_REQUEST:\n            return {\n                ...state,\n                newRequest: action.payload as boolean,\n            };\n        default:\n            return state;\n    }\n}","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onNewRequset, onSetIsLogin } from \"../modules/Common\";\n\nexport default function useCommon() {\n   const dispatch = useDispatch();\n\n   const { width, login, loading, newRequest, e } = useSelector((state: RootState) => state.common);\n\n   const onSetLogin = useCallback((state: boolean) => {\n      dispatch(onSetIsLogin(state));\n   }, [dispatch]);\n\n   const setNewRequset = useCallback((state: boolean) => {\n      dispatch(onNewRequset(state));\n   }, [dispatch]);\n   //state true mean state need new Request, false is opposite\n\n\n   return {\n      width,\n      login,\n      loading,\n      e,\n      onSetLogin,\n      newRequest,\n      setNewRequset,\n   };\n}","import axios from \"axios\";\n// import { cacheAdapterEnhancer } from \"axios-extensions\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst instance = axios.create({\n   withCredentials: true,\n});\ninstance.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n\ninstance.interceptors.request.use(\n   (config) => {\n      return config;\n   },\n   (err) => {\n      return Promise.reject(err);\n   },\n);\n\nexport default instance;\n","import instance from \"../config/axois.config\";\nimport { ITextInitialProps } from \"../modules/TextEditor/textEdit.interface\";\n\n\nconst util = {\n   getCSRTtoken() {\n      return instance({\n         url: \"/api/csrf\",\n         method: \"get\",\n      });\n   },\n\n\n   getTopicName() {\n      return instance({\n         url: \"/topic/contents/name\",\n         method: \"get\",\n      });\n   },\n\n   savePost(data: ITextInitialProps, token: string) {\n      return instance({\n         url: \"/topic/posts\",\n         method: \"post\",\n         data: data,\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   temporaryPost(data: ITextInitialProps, token: string) {\n      return instance({\n         url: \"/topic/temp/posts\",\n         method: \"post\",\n         data: data,\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   getTempPostFromId(id: string) {\n      return instance({\n            url: `/topic/temp/${id}`,\n            method: \"get\",\n         },\n      );\n   },\n\n   getTempPost() {\n      return instance({\n         url: \"/topic/temp/items\",\n         method: \"get\",\n      });\n   },\n\n   getAllPostsItems() {\n      return instance({\n         url: \"/topic/posts/items\",\n         method: \"get\",\n      });\n   },\n\n   getPostFromParams(parmas: string) {\n      return instance({\n         url: `/topic/posts/${parmas}`,\n         method: \"get\",\n      });\n   },\n\n   getPostFromPostId(topic: string, postsId: string) {\n      return instance({\n         url: `/topic/${topic}/posts/${postsId}`,\n      });\n   },\n\n\n   deleteTopic(topicName: string, token: string) {\n      return instance({\n         url: `/topic/:${topicName}`,\n         method: \"post\",\n         data: { topicName: topicName },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   deletePost(uid: string, topic: string, token: string) {\n      return instance({\n         url: `/topic/posts/item`,\n         method: \"post\",\n         data: { uid: uid, topic: topic },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   makeNewTopic(topicName: string, token: string) {\n      return instance({\n         url: `/topic/topicname/${topicName}`,\n         method: \"post\",\n         data: { newTopic: topicName },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   adminLogin(data: any, token: string) {\n      return instance({\n         url: \"/admin/login\",\n         method: \"post\",\n         data: { data },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   setJwtToken(token: string) {\n      return instance({\n         url: \"/admin/token\",\n         method: \"post\",\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   checkJWTToken() {\n      return instance({\n         url: `/admin/token/jwt`,\n         method: \"get\",\n      });\n   },\n\n\n};\n\nexport default util;","import {DataAction} from \"../posts.interface\";\n\ninterface IParameter {\n    params?: string\n    topic?: string\n    postsId?: string\n}\n\nexport const reducerUtil = {\n    initial: (initialState = null) => ({\n        loading: false,\n        data: initialState,\n        error: null,\n    }),\n\n    loading: (prevState = null) => ({\n        loading: true,\n        data: prevState,\n        error: null,\n    }),\n\n    success: (payload: any) => ({\n        loading: false,\n        data: payload,\n        error: null,\n    }),\n\n    error: (error: Error) => ({\n        loading: false,\n        data: null,\n        error: error,\n    }),\n};\n\n\nexport const createThunk = (type: string, cb: any) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return ({...parameter}: IParameter) => async (dispatch: any) => {\n        dispatch({type: type});\n        try {\n            if (type === \"data/GET_POSTS\") {\n                const {data} = await cb(parameter.params);\n                dispatch({type: SUCCESS, payload: data});\n            } else if (type === \"data/GET_POST\") {\n                const {data} = await cb(parameter.topic, parameter.postsId);\n                dispatch({type: SUCCESS, payload: data});\n            } else {\n                const {data} = await cb();\n                dispatch({type: SUCCESS, payload: data});\n            }\n        } catch (e) {\n            dispatch({type: ERROR, error: e});\n        }\n    };\n};\n\n\nexport function handleAction(type: string, key: string, keepData?: boolean) {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return (state: any, action: DataAction) => {\n        switch (action.type) {\n            case type:\n                return {\n                    ...state,\n                    [key]: reducerUtil.loading(keepData ? state[key].data : null),\n                };\n            case SUCCESS:\n                return {\n                    ...state,\n                    [key]: reducerUtil.success(action.payload),\n                };\n            case ERROR:\n                return {\n                    ...state,\n                    [key]: reducerUtil.error(action.error),\n                };\n        }\n    };\n}","import util from \"../../lib/axios\";\nimport { createThunk, handleAction, reducerUtil } from \"./lib/PostsUtil\";\nimport { DataAction, IPostInitialState } from \"./posts.interface\";\n\nexport const GET_POSTS = \"data/GET_POSTS\";\nexport const GET_POSTS_SUCCESS = \"data/GET_POSTS_SUCCESS\";\nexport const GET_POSTS_ERROR = \"data/GET_POSTS_ERROR\";\n\nexport const GET_POST = \"data/GET_POST\";\nexport const GET_POST_SUCCESS = \"data/GET_POST_SUCCESS\";\nexport const GET_POST_ERROR = \"data/GET_POST_ERROR\";\n\nexport const GET_ALL_POSTS = \"data/GET_ALL_POSTS\";\nexport const GET_ALL_POSTS_SECCUESS = \"data/GET_ALL_POSTS_SUCCESS\";\nexport const GET_ALL_POSTS_ERROR = \"data/GET_ALL_POSTS_ERROR\";\n\nexport const GET_TEMP_POST = \"data/GET_TEMP_POST\";\nexport const GET_TEMP_POST_SUCCESS = \"data/GET_TEMP_POST_SUCCESS\";\nexport const GET_TEMP_POST_ERROR = \"data/GET_TEMP_POST_ERROR\";\n\nexport const DELETE_POST = \"data/DELETE_POST\";\nexport const CLEAR_POST = \"data/CLEAR_POST\";\n//액션 생성함수를 선언!\n\nexport const onRequestPosts = createThunk(GET_POSTS, util.getPostFromParams);\n\nexport const onRequsetPost = createThunk(GET_POST, util.getPostFromPostId);\n\nexport const onRequestAllPosts = createThunk(GET_ALL_POSTS, util.getAllPostsItems);\n\nexport const onRequestTemoPost = createThunk(GET_TEMP_POST, util.getTempPost);\n\nconst initialState: IPostInitialState = {\n   posts: reducerUtil.initial(null),\n   post: reducerUtil.initial(null),\n   AllPosts: reducerUtil.initial(null),\n};\n\n\nexport default function Posts(state: IPostInitialState = initialState, action: DataAction): IPostInitialState {\n   switch (action.type) {\n      case GET_POSTS:\n      case GET_POSTS_SUCCESS:\n      case GET_POSTS_ERROR:\n         return handleAction(GET_POSTS, \"posts\", true)(state, action);\n      case GET_POST:\n      case GET_POST_SUCCESS:\n      case GET_POST_ERROR:\n         return handleAction(GET_POST, \"post\", false)(state, action);\n      //특정 포스트 볼때 >>>이전 데이터를 가지고있으면 전의 데이터도 렌더링 되는 ㅇ형상떄문에 false로 로딩시 데이터를 유지하지 않게함\n      case GET_ALL_POSTS:\n      case GET_ALL_POSTS_SECCUESS:\n      case GET_ALL_POSTS_ERROR:\n         return handleAction(GET_ALL_POSTS, \"AllPosts\", true)(state, action);\n      case DELETE_POST:\n         return {\n            ...state,\n            AllPosts: {\n               data: action.payload,\n               loading: false,\n               error: null,\n            },\n         };\n      case CLEAR_POST:\n         return {\n            ...state,\n            post: reducerUtil.initial(null),\n         };\n      default :\n         return state;\n   }\n\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onRequestAllPosts, onRequestPosts, onRequsetPost } from \"../modules/Posts\";\nimport { useCallback } from \"react\";\nimport { clearPost, onDeletePost } from \"../modules/Posts/lib/PostsAction\";\nimport { IPostCommonProps } from \"../modules/Posts/posts.interface\";\n\nexport default function usePosts() {\n   const dispatch = useDispatch();\n   const { posts, post, AllPosts } = useSelector((state: RootState) => state.posts);\n\n   const getPosts = useCallback((params: string) => {\n      dispatch(onRequestPosts({ params }));\n   }, [dispatch]);\n\n   const getPost = useCallback((topic: string, postsId: string) => {\n      dispatch(onRequsetPost({ topic, postsId }));\n   }, [dispatch]);\n\n   const getAllPosts = useCallback(() => {\n      dispatch(onRequestAllPosts({}));\n   }, [dispatch]);\n\n   const deletePost = useCallback((posts: IPostCommonProps[]) => {\n      dispatch(onDeletePost(posts));\n   }, [dispatch]);\n\n   const onClearPost = useCallback(() => {\n      dispatch(clearPost());\n   }, [dispatch]);\n\n   return {\n      AllPosts,\n      posts,\n      post,\n      getPosts,\n      getPost,\n      deletePost,\n      getAllPosts,\n      onClearPost,\n   };\n}","import {\n   CLEAR_POST,\n   DELETE_POST,\n   GET_ALL_POSTS,\n   GET_ALL_POSTS_ERROR,\n   GET_ALL_POSTS_SECCUESS,\n   GET_POST,\n   GET_POST_ERROR,\n   GET_POST_SUCCESS,\n   GET_POSTS,\n   GET_POSTS_ERROR,\n   GET_POSTS_SUCCESS,\n} from \"../index\";\nimport { IPostCommonProps } from \"../posts.interface\";\n\nexport const clearPost = () => ({\n   type: CLEAR_POST,\n});\n\nexport const onDeletePost = (posts: IPostCommonProps[]) => ({\n   type: DELETE_POST,\n   payload: posts,\n});\n\nexport const onRequest = () => ({\n   type: GET_POSTS,\n});\n\nexport const onRequestSuccuess = (payload: any[]) => ({\n   type: GET_POSTS_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestError = (e: Error) => ({\n   type: GET_POSTS_ERROR,\n   error: e,\n});\n\nexport const onRequestPost = () => ({\n   type: GET_POST,\n});\n\nexport const onRequestPostSuccess = (payload: any[]) => ({\n   type: GET_POST_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestPostError = (e: Error) => ({\n   type: GET_POST_ERROR,\n   error: e,\n});\n\nexport const onRequsetAllPosts = () => ({\n   type: GET_ALL_POSTS,\n});\n\nexport const onRequsetAllPostsSuccess = (payload: any[]) => ({\n   type: GET_ALL_POSTS_SECCUESS,\n   payload: payload,\n});\n\nexport const onRequestAllPostsError = (e: Error) => ({\n   type: GET_ALL_POSTS_ERROR,\n   error: e,\n});\n\n","import React, {ChangeEvent} from \"react\";\nimport {SelectTopicBoxComp, SelectTopicItemComp} from \"../../styled-comp\";\nimport {ISelectopicProps} from \"../../interface/index.interface\";\n\n\nfunction SelectTopic({topic, onIsChecked}: ISelectopicProps) {\n\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        onIsChecked(e.target.value);\n    };\n\n    if (topic === null) return null;\n\n    return (\n        <SelectTopicBoxComp>\n            <h1>토픽을 선택해주세요</h1>\n            <div className=\"post-select-box\">\n                {topic.map((v: { Tables_in_contents: string }) => (\n                    <SelectTopicItemComp key={v[\"Tables_in_contents\"]}>\n                        <input className=\"select-input\" type=\"radio\" id={v[\"Tables_in_contents\"]} onChange={onChange}\n                               value={v[\"Tables_in_contents\"]} name='post'/>\n                        <label className=\"select-label\"\n                               htmlFor={v[\"Tables_in_contents\"]}>{v[\"Tables_in_contents\"]}</label>\n                    </SelectTopicItemComp>\n                ))}\n            </div>\n        </SelectTopicBoxComp>\n    );\n}\n\nexport default React.memo(SelectTopic);","import React from \"react\";\n\nconst WriteTopicName = ({ onNameChange }: { onNameChange: any }) => {\n   const onChange = (e: any) => {\n      onNameChange(e.target.value);\n   };\n\n   return (\n      <>\n         <textarea name=\"content-title\" placeholder=\"제목\" className=\"content-title\" onChange={onChange} />\n      </>\n   );\n};\n\nexport default React.memo(WriteTopicName);","import hljs from \"highlight.js\";\nimport { Quill } from \"react-quill\";\n\nhljs.configure({\n   languages: [\"javascript\", \"react\", \"typescript\", \"css\", \"html\", \"Node REPL\"],\n});\n\nexport const modules = {\n   syntax: {\n      highlight: (text: any) => hljs.highlightAuto(text).value,\n   },\n   toolbar: [\n      [{ header: \"1\" }, { header: \"2\" }],\n      [{ font: [] }],\n      [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n      [\"bold\", \"italic\", \"underline\", \"strike\"],\n      [\"blockquote\", \"code-block\"],\n      [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n      [{ align: [] }],\n      [{ list: \"ordered\" }, { list: \"bullet\" }, { indent: \"-1\" }, { indent: \"+1\" }],\n      [\"link\", \"image\", \"video\"],\n   ],\n};\n\n\nexport const formats = [\"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\",\n   \"code-block\", \"color\", \"background\", \"align\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"blockquote\", \"video\", \"insert\"];\n\n\nconst bold = Quill.import(\"formats/bold\");\nbold.tagName = \"b\"; // Quill uses <strong> by default\nQuill.register(bold, true);\n\nconst italic = Quill.import(\"formats/italic\");\nitalic.tagName = \"i\"; // Quill uses <em> by default\nQuill.register(italic, true);\n","import util from \"../../lib/axios\";\nimport { ITopicinitialState, TopicAction } from \"./topic.interface\";\n\nexport const GET_TOPIC = \"topic/GET_TOPIC\";\nexport const GET_TOPIC_SUCCESS = \"topic/GET_TOPIC_SUCCESS\";\nexport const GET_TOPIC_ERROR = \"topic/GET_TOPIC_ERROR\";\n\n\nexport const getTopic = () => ({ type: GET_TOPIC });\nexport const getTopicSuccess = (payload: any[]) => ({ type: GET_TOPIC_SUCCESS, payload });\nexport const getTopicError = (e: Error) => ({ type: GET_TOPIC_ERROR, e });\n\n\nexport const onReqTopicsName = () => async (dispatch: any, getState: any) => {\n   dispatch(getTopic());\n   try {\n      const { data } = await util.getTopicName();\n      dispatch(getTopicSuccess(data));\n   } catch (e) {\n      dispatch(getTopicError(e));\n   }\n};\n\n\nconst initialState = {\n   topic: null,\n   loading: false,\n   error: null,\n};\n\nexport default function Topic(state: ITopicinitialState = initialState, action: TopicAction) {\n   switch (action.type) {\n      case GET_TOPIC:\n         return {\n            ...state,\n            loading: true,\n         };\n      case GET_TOPIC_SUCCESS:\n         return {\n            ...state,\n            topic: action.payload,\n            loading: false,\n         };\n      case GET_TOPIC_ERROR:\n         return {\n            ...state,\n            error: action.error,\n         };\n      default :\n         return state;\n   }\n}","// 액션 타입을 선언합니다\n// 뒤에 as const 를 붙여줌으로써 나중에 액션 객체를 만들게 action.type 의 값을 추론하는 과정에서\n// action.type 이 string 으로 추론되지 않고 'counter/INCREASE' 와 같이 실제 문자열 값으로 추론 되도록 해줍니다.\nimport { EditorAction, ITextInitialProps } from \"./textEdit.interface\";\n\nconst SET_CONTENT = \"textEdit/SET_CONTENT\" as const;\nconst SET_CONTENT_NAME = \"textEdit/SET_CONTENT_NAME\" as const;\nconst SET_TOPIC = \"textEdit/SET_TOPIC\" as const;\nconst SET_KIND_OF_POSTS = \"textEdit/SET_KIND_OF_POSTS\" as const;\nconst SET_DETAIL = \"textEdit/SET_DETAIL\" as const;\nconst SET_TEMP_DATA = \"textEdit/SET_TEMP_DATA\" as const;\n\nexport const onSetContent = (content: string) => ({ type: SET_CONTENT, payload: content });\nexport const onSetContentName = (contentName: string) => ({ type: SET_CONTENT_NAME, payload: contentName });\nexport const onSetTopic = (topic: string) => ({ type: SET_TOPIC, payload: topic });\nexport const onSetKindOfPosts = (kindOfPosts: string) => ({ type: SET_KIND_OF_POSTS, payload: kindOfPosts });\nexport const onSetDetail = (detail: string) => ({ type: SET_DETAIL, payload: detail });\nexport const onSetTempData = (data: ITextInitialProps) => ({ type: SET_TEMP_DATA, payload: data });\n\nconst initialState: ITextInitialProps = {\n   contentName: \"\",\n   content: \"\",\n   topicName: \"\",\n   kindOfPosts: \"\",\n   detail: \"\",\n};\n\n\nfunction TextEditor(state: ITextInitialProps = initialState, action: EditorAction): ITextInitialProps {\n   switch (action.type) {\n      case SET_CONTENT:\n         return {\n            ...state,\n            content: action.payload,\n         };\n      case SET_CONTENT_NAME:\n         return {\n            ...state,\n            contentName: action.payload,\n         };\n      case SET_TOPIC:\n         return {\n            ...state,\n            topicName: action.payload,\n         };\n      case SET_KIND_OF_POSTS:\n         return {\n            ...state,\n            kindOfPosts: action.payload,\n         };\n      case SET_DETAIL:\n         return {\n            ...state,\n            detail: action.payload,\n         };\n      case SET_TEMP_DATA:\n         return {\n            ...state,\n            contentName: action.payload.contentName,\n            content: action.payload.content,\n            topicName: action.payload.topicName,\n            kindOfPosts: action.payload.kindOfPosts,\n            detail: action.payload.detail,\n         };\n      default:\n         return state;\n   }\n\n}\n\nexport default TextEditor;","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onSetContent, onSetContentName, onSetDetail, onSetKindOfPosts, onSetTempData, onSetTopic } from \"../modules/TextEditor\";\nimport { ITextInitialProps } from \"../modules/TextEditor/textEdit.interface\";\n\nfunction useTextEdit() {\n   const data = useSelector((state: RootState) => state.textEdit);\n   const dispatch = useDispatch();\n\n   const setContent = useCallback((content: string) => {\n      dispatch(onSetContent(content));\n   }, [dispatch]);\n\n   const setContentName = useCallback((contentName: string) => {\n      dispatch(onSetContentName(contentName));\n   }, [dispatch]);\n\n   const setTopic = useCallback((topic: string) => {\n      dispatch(onSetTopic(topic));\n   }, [dispatch]);\n\n   const setKindOfPosts = useCallback((kindOf: string) => {\n      dispatch(onSetKindOfPosts(kindOf));\n   }, [dispatch]);\n\n   const setDetail = useCallback((detail: string) => {\n      dispatch(onSetDetail(detail));\n   }, [dispatch]);\n\n   const setTempData = useCallback((data: ITextInitialProps) => {\n      dispatch(onSetTempData(data));\n   }, [dispatch]);\n\n   return { data, setContent, setContentName, setTopic, setKindOfPosts, setDetail, setTempData };\n}\n\nexport default useTextEdit;","import React, { useEffect, useState } from \"react\";\nimport util from \"../lib/axios\";\n\n\nfunction CSRF() {\n   const [csrf, setCsrf] = useState(\"\");\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.getCSRTtoken();\n         setCsrf(data);\n      })();\n      return function cleanUp() {\n         setCsrf(\"\");\n      };\n   }, []);\n\n   return csrf;\n}\n\nexport default CSRF;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport WriteTopicName from \"component/TextEditor/WriteTopicName\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { formats, modules } from \"../../config/textEditor.config\";\nimport { WriteBox, WriteConditionBox } from \"../../styled-comp\";\nimport { CreateNewTopic, KindOfPosts, PostsDetail, SelectTopic, StoragePost, TextEditBtnBox } from \"component/index\";\nimport useTopic from \"../../useHooks/useTopic\";\nimport useTextEdit from \"../../useHooks/useTextEdit\";\nimport { ITextEditModuleProps } from \"../../modules/TextEditor/textEdit.interface\";\nimport util from \"../../lib/axios\";\nimport { ITopicModuleProps } from \"../../modules/Topic/topic.interface\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { ITempPost } from \"../../interface/index.interface\";\n\n\nconst Editor = ({ history, match }: any) => {\n   const csrf = useCSRF();\n   const ref = useRef<any>(null);\n   const [temp, setTemp] = useState([]);\n   const { setNewRequset }: ICommonModuleProps = useCommon();\n   const { topic, makeOrDeleteAndReqNewTopics }: ITopicModuleProps = useTopic();\n   const {\n      data,\n      setContent,\n      setContentName,\n      setTopic,\n      setKindOfPosts,\n      setDetail,\n      setTempData,\n   }: ITextEditModuleProps = useTextEdit();\n\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.getTempPost();\n         setTemp(data);\n      })();\n   }, []);\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.checkJWTToken();\n         if (!data.decoded) {\n            history.push(\"/\");\n         } else {\n            makeOrDeleteAndReqNewTopics();\n            ref.current.focus();\n         }\n      })();\n   }, [history, makeOrDeleteAndReqNewTopics]);\n\n\n   const onNameChange = useCallback((data: string) => {\n      setContentName(data);\n   }, [setContentName]);\n\n   const rteChange = useCallback((content: any, delta: any, source: any, editor: any) => {\n      setContent(ref.current.state.value);\n   }, [setContent]);\n\n   const onIsChecked = useCallback((name: string) => {\n      setTopic(name);\n   }, [setTopic]);\n\n   const onCheckKindOfPosts = useCallback((kindOf: string) => {\n      setKindOfPosts(kindOf);\n   }, [setKindOfPosts]);\n\n   const onChangeDetail = useCallback((detail: string) => {\n      setDetail(detail);\n   }, [setDetail]);\n\n   const onMakeOrDelteTopic = useCallback(() => {\n      makeOrDeleteAndReqNewTopics();\n   }, [makeOrDeleteAndReqNewTopics]);\n\n   const onSubmit = async (): Promise<void> => {\n      if (data.content === \"\"\n         || data.contentName === \"\"\n         || data.detail === \"\"\n         || data.kindOfPosts === \"\"\n         || data.topicName === \"\") {\n         alert(\"정보를 입력하세요\");\n      } else {\n         const result = await util.savePost(data, csrf);\n         setNewRequset(true);\n         if (result.request.status === 200) history.push(\"/\");\n      }\n   };\n\n   const onTemporaryPost = async (): Promise<void> => {\n      const result = await util.temporaryPost(data, csrf);\n      if (result.request.status === 200) history.push(\"/\");\n   };\n\n   const onChangeMode = useCallback((target: string) => {\n      const post: any = temp.filter((e: ITempPost) => e.uid === target.split(\".\")[0]);\n      (async () => {\n         const { data } = await util.getTempPostFromId(target.split(\".\")[0]);\n         setTempData({\n            contentName: post[0].content_name,\n            content: data,\n            topicName: post[0].topic,\n            kindOfPosts: \"\",\n            detail: post[0].detail,\n         });\n         ref.current.textContent = data;\n      })();\n   }, [setTempData, temp]);\n\n\n   return (\n      <>\n         <WriteBox>\n            <WriteTopicName onNameChange={onNameChange} />\n            <ReactQuill theme=\"snow\"\n                        onChange={rteChange}\n                        modules={modules}\n                        formats={formats}\n                        placeholder=\"입력하세요.\"\n                        ref={ref} />\n         </WriteBox>\n         <WriteConditionBox>\n            <SelectTopic onIsChecked={onIsChecked} topic={topic} />\n            <CreateNewTopic topic={topic} token={csrf} onMakeOrDelteTopic={onMakeOrDelteTopic} />\n            <KindOfPosts onCheck={onCheckKindOfPosts} />\n            <PostsDetail onChangeDetail={onChangeDetail} />\n            <TextEditBtnBox onSubmit={onSubmit} onTemporaryPost={onTemporaryPost} />\n            <StoragePost temp={temp} onChangeMode={onChangeMode} />\n         </WriteConditionBox>\n      </>\n   );\n};\n\n\nexport default Editor;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { useCallback } from \"react\";\nimport { onReqTopicsName } from \"../modules/Topic\";\n\nexport default function useTopic() {\n   const dispatch = useDispatch();\n   const { topic, loading, error } = useSelector((state: RootState) => state.topic);\n\n   const makeOrDeleteAndReqNewTopics = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n   const requestTopic = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n\n   return { topic, loading, error, makeOrDeleteAndReqNewTopics, requestTopic };\n}","import React from \"react\";\nimport { WriteBtnBoxComp, WriteBtnComp } from \"../../styled-comp\";\nimport { ITextEditBtnBoxProps } from \"../../interface/index.interface\";\n\n\nconst TextEditBtnBox = ({ onSubmit, onTemporaryPost }: ITextEditBtnBoxProps) => {\n   return (\n      <WriteBtnBoxComp>\n         <WriteBtnComp onClick={onSubmit}>등록하기</WriteBtnComp>\n         <WriteBtnComp onClick={onTemporaryPost}>임시저장</WriteBtnComp>\n      </WriteBtnBoxComp>\n   );\n};\nexport default TextEditBtnBox;","import React, { ChangeEvent } from \"react\";\nimport { SelectKindOfPosts, SelectKindOfPostsBoxComp } from \"../../styled-comp\";\nimport { IKindsOfPostsProps } from \"../../interface/index.interface\";\n\n\nfunction SelectKindOfPost({ onCheck }: IKindsOfPostsProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onCheck(e.target.value);\n   };\n\n   return (\n      <SelectKindOfPostsBoxComp>\n         <h1>게시물종류를 선택해주세요</h1>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-notice\" onChange={onChange} value=\"notice\" name='kindofpost' />\n            <label className=\"select-label\" htmlFor=\"kind-of-notice\">공지</label>\n         </SelectKindOfPosts>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-posts\" onChange={onChange} value=\"posts\" name='kindofpost' />\n            <label className=\"select-label\" htmlFor=\"kind-of-posts\">게시물</label>\n         </SelectKindOfPosts>\n      </SelectKindOfPostsBoxComp>\n   );\n}\n\nexport default React.memo(SelectKindOfPost);","import React, { ChangeEvent, useState } from \"react\";\nimport { PostsDetailComp } from \"../../styled-comp\";\nimport { IPostsDetailProps } from \"../../interface/index.interface\";\n\n\nfunction PostsDetail({ onChangeDetail }: IPostsDetailProps) {\n\n   const [value, setValue] = useState<string>(\"\");\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n      onChangeDetail(e.target.value);\n   };\n\n\n   return (\n      <PostsDetailComp>\n         <h1>추가설명을 입력하세요</h1>\n         <input type=\"text\" onChange={onChange} value={value} />\n      </PostsDetailComp>\n   );\n}\n\nexport default React.memo(PostsDetail);","import React, { useState } from \"react\";\nimport { AddTopicBtnComp, CreateNewTopicComp, CreateNewTopicListBoxComp, CreateNewTopicListItemComp, DeleteTopicIconComp } from \"../../styled-comp\";\nimport { MdDelete } from \"react-icons/md\";\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport util from \"../../lib/axios\";\nimport { ICreateNewTopicProps } from \"../../interface/index.interface\";\n\n\nfunction CreateNewTopic({ topic, token, onMakeOrDelteTopic }: ICreateNewTopicProps) {\n   const [click, setClick] = useState<boolean>(false);\n   const [newTopic, setNewtopic] = useState<string>(\"\");\n\n   const setNewTopicName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setNewtopic(e.target.value);\n   };\n\n   const previousMakeNewTopic = () => {\n      setClick(!click);\n   };\n\n   const makeNewTopic = async () => {\n      await util.makeNewTopic(newTopic, token);\n      onMakeOrDelteTopic();\n      setClick(!click);\n      setNewtopic(\"\");\n   };\n\n   const deleteTopic = async (e: React.ChangeEvent<HTMLElement>) => {\n      if (window.confirm(\"정말로 삭제하겠습니까? 삭제하면 정보가 다사라집니다.\")) {\n         await util.deleteTopic((e.currentTarget.dataset.topic) as string, token);\n         onMakeOrDelteTopic();\n      }\n   };\n\n   //TODO 엔터 입력시 만들어버리게\n\n   if (topic === null) return null;\n\n   return (\n      <CreateNewTopicComp>\n         <h1>토픽관리하기</h1>\n         <CreateNewTopicListBoxComp>\n            {topic.map((v: { Tables_in_contents: string }) => (\n               <CreateNewTopicListItemComp key={v[\"Tables_in_contents\"]}>\n                  <span>{v[\"Tables_in_contents\"]}</span>\n                  <DeleteTopicIconComp onClick={deleteTopic} data-topic={v[\"Tables_in_contents\"]}>\n                     <MdDelete />\n                  </DeleteTopicIconComp>\n               </CreateNewTopicListItemComp>\n            ))}\n         </CreateNewTopicListBoxComp>\n\n         {click &&\n         <AddTopicBtnComp>\n            <input type=\"text\" value={newTopic} onChange={setNewTopicName} />\n            <IoIosAddCircle className=\"make-new-topic-btn\" onClick={makeNewTopic} />\n         </AddTopicBtnComp>\n         }\n\n         <IoIosAddCircle className=\"add-new-topic-btn\" onClick={previousMakeNewTopic} />\n      </CreateNewTopicComp>\n   );\n}\n\nexport default React.memo(CreateNewTopic);","import React from \"react\";\nimport { TemporaryPostComp, TemporaryStorageComp } from \"../../styled-comp\";\n\ninterface ITempPost {\n   uid: string,\n   topic: string,\n   content_name: string,\n   created: string,\n   detail: string,\n   file: string\n}\n\nconst Srotage = ({ temp, onChangeMode }: any) => {\n   if (temp === null) return null;\n   if (temp.length === 0) return null;\n\n   const onClick = (e: any) => {\n      onChangeMode(e.target.dataset.id);\n   };\n\n   return (\n      <TemporaryStorageComp>\n         <div className=\"tsc-slo\">임시저장</div>\n         <div>\n            {temp.map((e: ITempPost) => (\n               <TemporaryPostComp key={e.uid} data-id={e.file} onClick={onClick}>\n                  {e.content_name}\n               </TemporaryPostComp>\n            ))}\n         </div>\n      </TemporaryStorageComp>\n   );\n};\n\nexport default React.memo(Srotage);","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ninterface IReactHelmet {\n   keywords: string\n   description: string\n   title: string\n}\n\nfunction ReactHelmet({ keywords, description, title }: IReactHelmet) {\n   return (\n      <Helmet>\n         <title>{title}</title>\n         <meta name=\"description\" content={description} data-react-helmet=\"true\" />\n         <meta name=\"keywords\" content={keywords} data-react-helmet=\"true\" />\n         <meta property=\"og:title\" content={title} data-react-helmet=\"true\" />\n         <meta property=\"og:url\" content=\"http://www.junggri.com\" data-react-helmet=\"true\" />\n         <meta property=\"og:image\" content=\"http://www.junggri.com/image/og.jpg\" data-react-helmet=\"true\" />\n         <meta property=\"og:site_name\" content=\"junggri.com\" data-react-helmet=\"true\" />\n         <meta property=\"og:description\" content={description} data-react-helmet=\"true\" />\n      </Helmet>\n   );\n}\n\nexport default ReactHelmet;","import React, { useEffect } from \"react\";\nimport { PostsContainerComp } from \"../../styled-comp\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { IPostDataProps, IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { Link } from \"react-router-dom\";\nimport { CgHome } from \"react-icons/cg\";\nimport Highlight from \"react-highlight.js\";\nimport createDOMPurify from \"dompurify\";\nimport ReactHelmet from \"../../useHooks/useHelmet\";\n\nconst DOMPurify = createDOMPurify(window);\n\nfunction PostsContainer({ match }: any) {\n   const { width }: ICommonModuleProps = useCommon();\n   const { getPost, post, onClearPost }: IPostsModuleProps = usePosts();\n   const { data } = post;\n\n   useEffect(() => {\n      getPost(match.params.topic, match.params.postsId);\n      return () => onClearPost();\n   }, [match.params.topic, match.params.postsId, onClearPost, getPost]);\n\n   const MakeHtml = () => ({ __html: DOMPurify.sanitize((data as IPostDataProps).content) });\n\n\n   if (!post.data) return null;\n\n   return (\n      <PostsContainerComp width={width}>\n         <ReactHelmet\n            keywords={(data as IPostDataProps).result[0].content_name}\n            description={(data as IPostDataProps).result[0].detail}\n            title={(data as IPostDataProps).result[0].content_name}\n         />\n         <div className=\"posts-container-iconbox\">\n            <Link to=\"/\">\n               <CgHome className=\"icon-tohome\" />\n            </Link>\n         </div>\n         <div className=\"posts-name\">\n            {(data as IPostDataProps).result[0].content_name}\n         </div>\n         <div className=\"posts-detail\">\n            {(data as IPostDataProps).result[0].detail}\n         </div>\n         <Highlight language=\"react\">\n            <div dangerouslySetInnerHTML={MakeHtml()} className=\"posts-content\" />\n         </Highlight>\n         <div className=\"posts-created\">\n            {(data as IPostDataProps).result[0].created}\n         </div>\n      </PostsContainerComp>\n   );\n}\n\nexport default PostsContainer;","import React, { useCallback } from \"react\";\nimport { EntryPostsContainerComp, EntryPostsItemComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport util from \"../../lib/axios\";\nimport { IoColorWand } from \"react-icons/io5\";\nimport { MdDelete } from \"react-icons/md\";\nimport { IAllPost, IPostCommonProps } from \"../../modules/Posts/posts.interface\";\n\ninterface IEntryPostsContainer {\n   width: number,\n   posts: IAllPost\n   deletePost: (posts: any) => void,\n   getAllPosts: () => void\n   login: boolean,\n   csrf: string\n}\n\nconst EntryPostsContainer = ({ width, posts, deletePost, login, csrf, getAllPosts }: IEntryPostsContainer) => {\n\n   const onModified = useCallback((e: React.MouseEvent<HTMLElement>) => {\n      console.log(2);\n   }, [csrf]);\n\n   const onDelete = useCallback((e: React.MouseEvent<HTMLElement>) => {\n      const uid = (e.currentTarget.parentNode as HTMLElement).dataset.id as string;\n      const topic = (e.currentTarget.parentNode as HTMLElement).dataset.topic as string;\n      (async () => {\n         await util.deletePost(uid, topic, csrf);\n         getAllPosts();\n      })();\n\n   }, [csrf, deletePost]);\n\n\n   if (!posts.data) return null;\n   const data = Object.values(posts.data).flat();\n   return (\n      <EntryPostsContainerComp width={width}>\n         {data.map((e: IPostCommonProps) => (\n            <EntryPostsItemComp key={e.uid}>\n               <span className=\"item-created\">🗓 {e.created}</span>\n               <Link to={`/topic/${e.topic}/${e.uid}`}>\n                  <div className=\"item-contentName\">\n                     {e.content_name}\n                  </div>\n               </Link>\n               <div className=\"item-detail\">🌐 {e.detail}</div>\n               <section className=\"posts-keyword-box\">\n                   <span className=\"posts-keywords\">\n                        <Link to={`/topic/${e.topic}`}>\n                            {e.topic}\n                        </Link>\n                     </span>\n               </section>\n               {login &&\n               <div className=\"posts-admin-box\" data-id={e.uid} data-topic={e.topic}>\n                  <span className='posts-admin-modify' onClick={onModified}><IoColorWand /></span>\n                  <span className='posts-admin-delete' onClick={onDelete}><MdDelete /></span>\n               </div>\n               }\n            </EntryPostsItemComp>\n         ))}\n         <div className=\"sidebar-copyright\">Copyright 2021. junggri All rights reserved.</div>\n      </EntryPostsContainerComp>\n   );\n};\n\nexport default (EntryPostsContainer);","import React, { useEffect, useState } from \"react\";\n\nfunction Auth() {\n   const [isSignedIn, setIsSignedIn] = useState(false);\n   const initAuth = () => {\n      return window.gapi.auth2.init({\n         client_id: \"563986907951-2ju677cmt4dlkqc6lb163puk6hqjb3f6.apps.googleusercontent.com\", //paste your client ID here\n         scope: \"https://www.googleapis.com/auth/analytics.readonly\",\n      });\n   };\n\n   const checkSignedIn = () => {\n      return new Promise((resolve, reject) => {\n         initAuth() //calls the previous function\n            .then(() => {\n               const auth = window.gapi.auth2.getAuthInstance(); //returns the GoogleAuth object\n               resolve(auth.isSignedIn.get()); //returns whether the current user is currently signed in\n            })\n            .catch((error: Error) => {\n               reject(error);\n            });\n      });\n   };\n\n   const init = () => {\n      checkSignedIn()\n         .then((signedIn: any) => {\n            setIsSignedIn(signedIn);\n         })\n         .catch((error) => {\n            console.error(error);\n         });\n   };\n\n   useEffect(() => {\n      window.gapi.load(\"auth2\", init);\n   }, [init]);\n\n   return isSignedIn;\n}\n\nexport default Auth;","import React, { useEffect, useState } from \"react\";\nimport useAuth from \"./useAuth\";\n\ndeclare global {\n   interface Window {\n      gapi: any\n   }\n}\n\nconst Report = () => {\n   const [data, setData] = useState(null);\n   const [load, setLoad] = useState(true);\n   const isSignedIn = useAuth();\n   useEffect(() => {\n      if (isSignedIn) {\n         const queryReport = () => {\n            window.gapi.client\n               .request({\n                  path: \"/v4/reports:batchGet\",\n                  root: \"https://analyticsreporting.googleapis.com/\",\n                  method: \"POST\",\n                  body: {\n                     reportRequests: [\n                        {\n                           viewId: \"235239777\", //enter your view ID here\n                           dateRanges: [\n                              {\n                                 startDate: \"10daysAgo\",\n                                 endDate: \"today\",\n                              },\n                           ],\n                           metrics: [\n                              {\n                                 expression: \"ga:users\",\n                              },\n                           ],\n                           dimensions: [\n                              {\n                                 name: \"ga:date\",\n                              },\n                           ],\n                        },\n                     ],\n                  },\n               }).then(displayResults);\n         };\n         const displayResults = (response: any) => {\n            const queryResult = response.result.reports[0].data;\n            if (load) setData(queryResult);\n         };\n         queryReport();\n      }\n\n      return () => {\n         setLoad(false);\n      };\n   }, [isSignedIn, load]);\n   return data;\n};\n\nexport default Report;","import React from \"react\";\nimport { TopMetaBarComp } from \"../../styled-comp\";\nimport { NavLink } from \"react-router-dom\";\nimport { BiLoaderCircle } from \"react-icons/bi\";\nimport useReport from \"../../useHooks/useReport\";\nimport { isMobile } from \"react-device-detect\";\n\nfunction TopMetaBar({ width, match }: { width: number, match: any }) {\n   const ga: any = useReport();\n\n   return (\n      <TopMetaBarComp width={width}>\n         <section className=\"topmetabar-list\">\n            <NavLink to=\"/\"\n                     className=\"metaItem\"\n                     exact={match.path === \"/about\"}\n                     activeClassName=\"metaActive\">\n               <span className='tmb-icon'>🖥 </span>\n               <span>blog</span>\n            </NavLink>\n            <NavLink to=\"/about\"\n                     className=\"metaItem\"\n                     exact={match.path === \"/about\"}\n                     activeClassName=\"metaActive\">\n               <span className='tmb-icon'>🙋‍♂️ </span>\n               <span>about me</span>\n            </NavLink>\n         </section>\n         {!isMobile &&\n         <section className=\"topmetabar-count\">\n            <div>\n               <span>전체</span>\n               <span className=\"topmetabar-countAll\">\n                  {ga\n                     ? <span>{ga.totals[0].values}</span>\n                     : <BiLoaderCircle className=\"count-loading-icon\" />}\n               </span>\n            </div>\n            <div>|</div>\n            <div>\n               <span>오늘의 방문자</span>\n               <span className=\"topmetabar-today\">\n                  {ga\n                     ? <span>{ga.rows[ga.rows.length - 1].metrics[0].values}</span>\n                     : <BiLoaderCircle className=\"count-loading-icon\" />}\n               </span>\n            </div>\n         </section>\n         }\n         {/*<div className=\"topmetabar-icons-box\">*/}\n         {/*   <GoMarkGithub className=\"icon-github\" onClick={() => {*/}\n         {/*      window.open(\"https://github.com/junggri\", \"_blank\");*/}\n         {/*   }} />*/}\n         {/*   <HiOutlineMail className=\"icon-mail\" onClick={() => {*/}\n         {/*      window.location.href = \"mailto:jjuu6933@naver.com\";*/}\n         {/*   }} />*/}\n         {/*   <Link to=\"/\">*/}\n         {/*      <CgHome className=\"icon-tohome\" />*/}\n         {/*   </Link>*/}\n         {/*</div>*/}\n      </TopMetaBarComp>\n   );\n}\n\nexport default TopMetaBar;","export default __webpack_public_path__ + \"static/media/Logo.7ba0ce66.svg\";","import React from \"react\";\nimport { SideBarComp, SideBarMetaDataComp, SideBarThunmbNailComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../../image/Logo.svg\";\nimport { SideNavBarTopic } from \"../index\";\nimport { IAllPost } from \"../../modules/Posts/posts.interface\";\n\ninterface ISideBarNavContainer {\n   topic: IAllPost\n   login: boolean\n\n}\n\n\nconst backGround = {\n   backgroundImage: `url(${logo})`,\n   backgroundSize: \"contain\",\n   backgroundPosition: \"50% 50%\",\n   backgroundRepeat: \"no-repeat\",\n};\n\nfunction SideBarNavContainer({ topic, login }: ISideBarNavContainer) {\n   return (\n      <SideBarComp>\n         <SideBarThunmbNailComp style={backGround} />\n         <SideBarMetaDataComp>\n            <div className=\"sidebar-names\">junggri</div>\n            <div className=\"sidebar-posi posi1\">backend engineer</div>\n            <div className=\"sidebar-posi posi2\">frontend engineer</div>\n         </SideBarMetaDataComp>\n         <SideNavBarTopic topic={topic} />\n         {login &&\n         <Link to=\"/write\">\n            <span className=\"write-article-btn\">새 글 쓰기</span>\n         </Link>\n         }\n         <div className=\"sidebar-divider\" />\n      </SideBarComp>\n   );\n}\n\nexport default React.memo(SideBarNavContainer);","import React from \"react\";\nimport { SideBarPostsContainerComp, SideBarPostsItemComp } from \"../../styled-comp\";\n\ninterface ISideBarNavContainer {\n   topic: any\n}\n\n\nfunction SideNavBarTopic({ topic }: ISideBarNavContainer) {\n   return (\n      <SideBarPostsContainerComp>\n         <div className=\"sidebar-list\">\n            <span>전체목록</span>\n            <span>({Object.values(topic.data).flat().length})</span>\n         </div>\n         {Object.keys(topic.data).map((e: string) => (\n            <SideBarPostsItemComp to={`/topic/${e}`} key={e}>\n               <div>\n                  <span className=\"topic_list_items\">{e}</span>\n                  <span className=\"topic_length\">({topic.data[e].length})</span>\n               </div>\n            </SideBarPostsItemComp>\n         ))}\n      </SideBarPostsContainerComp>\n   );\n}\n\nexport default React.memo(SideNavBarTopic);","import React, { useEffect } from \"react\";\nimport { SpecificTopicContainerComp, SpecificTopicItemsComp } from \"../../styled-comp\";\nimport { IPostCommonProps, IPostsProps } from \"../../modules/Posts/posts.interface\";\nimport { Link } from \"react-router-dom\";\n\ninterface ISpecificTopicContainer {\n   width: number;\n   match: any\n   onGetPosts: (params: string) => void\n   posts: IPostsProps\n\n}\n\nfunction SpecificTopicContainer({ width, match, onGetPosts, posts }: ISpecificTopicContainer) {\n   const params = match.params.topic;\n\n   useEffect(() => {\n      onGetPosts(params);\n   }, [params, onGetPosts]);\n\n   if (!posts.data) return null;\n\n   return (\n      <SpecificTopicContainerComp width={width}>\n         {posts.data.map((e: IPostCommonProps) => (\n            <SpecificTopicItemsComp key={e.uid}>\n               <span className=\"item-created\">🗓 {e.created}</span>\n               <Link to={`/topic/${e.topic}/${e.uid}`}>\n                  <div className=\"item-contentName\">\n                     {e.content_name}\n                  </div>\n               </Link>\n               <div className=\"item-detail\">🌐 {e.detail}</div>\n            </SpecificTopicItemsComp>\n            // <SpecificTopicItemsComp key={e.uid} to={`/topic/${e.topic}/${e.uid}`}>\n            //    <span className=\"item-created\">{e.created}</span>\n            //    <div className=\"item-contentName\">{e.content_name}</div>\n            //    <div className=\"item-detail\">{e.detail}</div>\n            //    <section className=\"posts-keyword-box\">\n            //       <span className=\"posts-keywords\">\n            //          <span>\n            //             {e.topic}\n            //          </span>\n            //       </span>\n            //    </section>\n            // </SpecificTopicItemsComp>\n         ))}\n      </SpecificTopicContainerComp>\n   );\n}\n\nexport default SpecificTopicContainer;","import React from 'react'\nimport {AboutContainerComp} from \"../../styled-comp\";\n\ninterface IAboutContainer {\n    width: number\n}\n\nfunction AboutContainer({width}: IAboutContainer) {\n    return (\n        <AboutContainerComp width={width}>\n            <div className=\"icons\" style={{\n                fontSize: \"17rem\",\n                textAlign: 'center'\n            }}>🔥 💻 🖥 🖱\n            </div>\n            <div className=\"detail\" style={{\n                fontSize: \"2rem\",\n                textAlign: 'center',\n                marginTop: '100px'\n            }}>업데이트 예정입니다.\n            </div>\n        </AboutContainerComp>\n    )\n}\n\nexport default AboutContainer","import React, { useEffect } from \"react\";\nimport useCommon from \"./useCommon\";\nimport util from \"../lib/axios\";\n\nfunction LoginFlag() {\n   const { onSetLogin } = useCommon();\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.checkJWTToken();\n         data.decoded ? onSetLogin(true) : onSetLogin(false);\n      })();\n   }, [onSetLogin]);\n\n}\n\nexport default LoginFlag;","import React, { useEffect } from \"react\";\nimport { EntryContainerComp } from \"../../styled-comp\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport { AboutContainer, EntryPostsContainer, SideBarContainer, SpecificTopicContainer } from \"component/index\";\nimport { Route } from \"react-router-dom\";\nimport useLoginFlag from \"../../useHooks/useLoginFlag\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport TopMetaBar from \"./TopMetaBar\";\nimport ReactHelmet from \"../../useHooks/useHelmet\";\n\n\nfunction CommonEntry({ match }: any) {\n   const csrf = useCSRF();\n   const { width, login, newRequest, setNewRequset }: ICommonModuleProps = useCommon();\n   const { AllPosts, posts, getPosts, deletePost, getAllPosts }: IPostsModuleProps = usePosts();\n\n   useEffect(() => {\n      if (newRequest) {\n         getAllPosts();\n         setNewRequset(false);\n      }\n   }, [getAllPosts, newRequest, setNewRequset]);\n   useLoginFlag();\n\n   if (!AllPosts.data) return null;\n\n   return (\n      <EntryContainerComp width={width}>\n         <ReactHelmet\n            keywords={\"nodejs 그리고 자바스크립트의 이야기들\"}\n            description={\"자바스크립트부터 웹까지의 전반적인 이야기와 나의 성장이야기\"}\n            title={\"junggri 블로그\"} />\n         <TopMetaBar width={width} match={match} />\n         {match.path !== \"/about\" ? <SideBarContainer topic={AllPosts} login={login} /> : null}\n         <Route path=\"/\" exact render={() => (\n            <EntryPostsContainer\n               width={width}\n               posts={AllPosts}\n               deletePost={deletePost}\n               getAllPosts={getAllPosts}\n               login={login}\n               csrf={csrf}\n            />\n         )} />\n         <Route path=\"/topic/:topic\" exact render={() => (\n            <SpecificTopicContainer\n               width={width}\n               match={match}\n               onGetPosts={getPosts}\n               posts={posts}\n            />\n         )} />\n         <Route path=\"/about\" exact render={() => (\n            <AboutContainer\n               width={width}\n            />\n         )} />\n      </EntryContainerComp>\n   );\n}\n\nexport default CommonEntry;","import React from \"react\";\nimport CommonEntry from \"../component/Home/CommonEntry\";\n\nconst Entry = ({ match }: any) => {\n   return (\n      <>\n         <CommonEntry match={match} />\n      </>\n   );\n};\n\nexport default Entry;\n","import React from \"react\";\nimport { Editor } from \"component\";\nimport \"../../node_modules/react-quill/dist/quill.snow.css\";\n\n\nfunction TextEditor({ history, match }: any) {\n\n   return <Editor history={history} match={match} />;\n}\n\nexport default TextEditor;\n","import React from \"react\";\nimport { PostsContainer } from \"../component\";\n\nfunction Posts({ match }: any) {\n\n   return (\n      <PostsContainer match={match} />\n   );\n}\n\nexport default Posts;","import React, {useRef, useState} from \"react\";\nimport {AdminLoginBoxComp} from \"../styled-comp\";\nimport util from \"../lib/axios\";\nimport useCSRF from \"../useHooks/useCSRF\";\n\nfunction Admin({history}: any) {\n    const [user, setUser] = useState({\n        id: process.env.NODE_ENV === \"development\" ? \"jjuu6933\" : \"\",\n        pwd: process.env.NODE_ENV === \"development\" ? \"wowwjd12!@\" : \"\",\n        number: process.env.NODE_ENV === \"development\" ? \"1\" : \"\",\n    });\n\n    const [visivle, setVisible] = useState<boolean>(false);\n    const [number, setNumber] = useState<number>(0);\n    const [certification, setCertification] = useState<boolean>(false);\n    const count = useRef(0);\n\n    const csrf = useCSRF();\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUser(state => ({\n            ...state,\n            [e.target.name]: e.target.value,\n        }));\n    };\n\n    const onSubmit = async () => {\n        // console.log(count.current);TODO 3번이상일때 디비에 잠금걸자.\n        setVisible(true);\n        const {data} = await util.adminLogin(user, csrf);\n        if (!data.state) count.current++;\n        else {\n            setCertification(true);\n        }\n        setNumber(data.number);\n    };\n\n    const onCertificationPhone = async () => {\n        if (parseInt(user.number, 10) === number && certification) {\n            await util.setJwtToken(csrf);\n            history.push(\"/\");\n        } else {\n            count.current++;\n        }\n    };\n\n\n    return (\n        <AdminLoginBoxComp>\n            <div className=\"login-inputbox\">\n                <input type=\"text\" name=\"id\" value={user.id} placeholder=\"아이디\" onChange={onChange}/>\n                <input type=\"password\" name=\"pwd\" value={user.pwd} placeholder=\"비밀번호\" onChange={onChange}/>\n            </div>\n            {visivle &&\n            <div className=\"certification-numberBox\">\n                <input type=\"text\" value={user.number} name=\"number\" onChange={onChange}/>\n                <button onClick={onCertificationPhone}>\n                    확인하기\n                </button>\n            </div>\n            }\n            <button className=\"login-btn\" onClick={onSubmit}>\n                인증시작하기\n            </button>\n        </AdminLoginBoxComp>\n    );\n}\n\nexport default Admin;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Admin, Entry, Posts, TextEditor } from \"pages\";\n\nfunction App() {\n   return (\n      <BrowserRouter>\n         <div id=\"App\">\n            <Switch>\n               <Route path=\"/\" exact component={Entry} />\n               <Route path=\"/about\" exact component={Entry} />\n               <Route path=\"/topic/:topic\" exact component={Entry} />\n               <Route path=\"/topic/:topic/:postsId\" exact component={Posts} />\n               <Route path=\"/write\" exact component={TextEditor} />\n               <Route path=\"/write/:tempId\" component={TextEditor} />\n               <Route path=\"/admin/leejeongsoo\" component={Admin} />\n               <Route render={() => <h1>Not found</h1>} />\n            </Switch>\n         </div>\n      </BrowserRouter>\n   );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport posts from \"./Posts\";\nimport common from \"./Common\";\nimport topic from \"./Topic\";\nimport textEdit from \"./TextEditor\";\n\nconst rootReducer = combineReducers({ posts, common, topic, textEdit });\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","const TokenMiddleWare = (store: any) => (next: any) => (action: any) => {\n   next(action);\n};\n\nexport default TokenMiddleWare;","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../modules\";\nimport Thunk from \"redux-thunk\";\nimport TokenMiddleWare from \"../middleWare/TokenMiddleWare\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\n\n\nconst middleWares = [Thunk, TokenMiddleWare];\n\nconst devTools =\n   process.env.NODE_ENV === \"production\"\n      ? applyMiddleware(...middleWares)\n      : composeWithDevTools(applyMiddleware(...middleWares));\n\nexport const store = createStore(rootReducer, devTools);\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./shared/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./lib/store\";\nimport \"../src/styles/highlight/atom-one-light.css\";\n\nReactDOM.render(\n   <>\n      <Provider store={store}>\n         <GlobalStyles />\n         <App />\n      </Provider>\n   </>,\n   document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}