{"version":3,"sources":["reportWebVitals.ts","styles/GlobalStyles.tsx","serviceWorkerRegistration.ts","styles/Media.tsx","styled-comp.tsx","modules/Common/index.ts","useHooks/useCommon.tsx","config/axois.config.ts","lib/axios.ts","modules/Posts/lib/PostsUtil.ts","modules/Posts/index.ts","useHooks/usePosts.tsx","modules/Posts/lib/PostsAction.ts","component/TextEditor/SelectTopic.tsx","component/TextEditor/WriteTopicName.tsx","config/textEditor.config.ts","modules/Topic/index.ts","modules/TextEditor/index.ts","useHooks/useTextEdit.tsx","useHooks/useCSRF.tsx","component/TextEditor/Editor.tsx","useHooks/useTopic.tsx","component/TextEditor/TextEditBtnBox.tsx","component/TextEditor/SelectKindOfPosts.tsx","component/TextEditor/PostsDetail.tsx","component/TextEditor/CreateNewTopic.tsx","image/Logo.svg","useHooks/useHelmet.tsx","component/Content/PostsContainer.tsx","component/Content/EntryPostsContainer.tsx","component/Home/TopMetaBar.tsx","component/Home/SideNavBar.tsx","component/Home/SideNavBarTopic.tsx","component/Content/SpecificTopicContainer.tsx","component/About/AboutContainer.tsx","useHooks/useLoginFlag.tsx","component/Home/CommonEntry.tsx","pages/Entry.tsx","pages/TextEditor.tsx","pages/Posts.tsx","pages/Admin.tsx","shared/App.tsx","modules/index.ts","middleWare/TokenMiddleWare.ts","lib/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","reset","window","innerHeight","Boolean","location","hostname","match","sizes","desktop","postBox","tablet","mobile","small","media","Object","keys","reduce","acc","label","args","css","EntryContainerComp","styled","div","props","width","postsContainerMixin","postsItemMixin","lighten","TopMetaBarComp","section","SideBarComp","SideBarThunmbNailComp","SideBarMetaDataComp","SideBarPostsContainerComp","ul","SideBarPostsItemComp","NavLink","EntryPostsContainerComp","EntryPostsItemComp","SpecificTopicContainerComp","SpecificTopicItemsComp","PostsContainerComp","AdminLoginBoxComp","logo","WriteBox","WriteConditionBox","memo","WriteBtnBoxComp","WriteBtnComp","button","darken","SelectTopicBoxComp","SelectTopicItemComp","CreateNewTopicComp","CreateNewTopicListBoxComp","DeleteTopicIconComp","AddTopicBtnComp","CreateNewTopicListItemComp","SelectKindOfPostsBoxComp","SelectKindOfPosts","PostsDetailComp","AboutContainerComp","SET_IS_LOGIN","NEW_REQUEST","initialState","screen","login","loading","newRequest","e","useCommon","dispatch","useDispatch","useSelector","state","common","onSetLogin","useCallback","type","payload","setNewRequset","dotenv","instance","axios","create","withCredentials","defaults","headers","interceptors","request","use","config","err","Promise","reject","util","getCSRTtoken","url","method","getTopicName","savePost","data","token","getAllPostsItems","getPostFromParams","parmas","getPostFromPostId","topic","postsId","deleteTopic","topicName","deletePost","uid","makeNewTopic","newTopic","adminLogin","setJwtToken","checkJWTToken","reducerUtil","error","prevState","createThunk","cb","SUCCESS","ERROR","parameter","a","params","handleAction","key","keepData","action","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","GET_ALL_POSTS","GET_ALL_POSTS_SECCUESS","GET_ALL_POSTS_ERROR","DELETE_POST","CLEAR_POST","onRequestPosts","onRequsetPost","onRequestAllPosts","posts","post","AllPosts","usePosts","getPosts","getPost","getAllPosts","onDeletePost","onClearPost","SelectTopic","onIsChecked","onChange","target","value","className","map","v","id","name","htmlFor","React","WriteTopicName","onNameChange","placeholder","hljs","configure","languages","modules","syntax","highlight","text","highlightAuto","toolbar","font","size","color","background","align","list","indent","formats","GET_TOPIC","GET_TOPIC_SUCCESS","GET_TOPIC_ERROR","onReqTopicsName","getState","SET_CONTENT","SET_CONTENT_NAME","SET_TOPIC","SET_KIND_OF_POSTS","SET_DETAIL","contentName","content","kindOfPosts","detail","TextEditor","useTextEdit","textEdit","setContent","onSetContent","setContentName","onSetContentName","setTopic","onSetTopic","setKindOfPosts","kindOf","setDetail","onSetDetail","CSRF","useState","csrf","setCsrf","useEffect","Editor","history","useCSRF","makeOrDeleteAndReqNewTopics","requestTopic","useTopic","ref","useRef","decoded","current","focus","push","rteChange","delta","source","editor","onCheckKindOfPosts","onChangeDetail","onMakeOrDelteTopic","onSubmit","alert","result","theme","onCheck","TextEditBtnBox","onClick","SelectKindOfPost","PostsDetail","setValue","CreateNewTopic","click","setClick","setNewtopic","confirm","currentTarget","dataset","data-topic","ReactHelmet","keywords","description","title","favicon","Helmet","property","Logo","DOMPurify","createDOMPurify","PostsContainer","content_name","to","language","dangerouslySetInnerHTML","__html","sanitize","created","EntryPostsContainer","onModified","console","log","onDelete","parentNode","values","flat","data-id","TopMetaBar","exact","path","activeClassName","backGround","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","SideBarNavContainer","style","SideNavBarTopic","length","SpecificTopicContainer","onGetPosts","AboutContainer","fontSize","textAlign","marginTop","LoginFlag","CommonEntry","useLoginFlag","render","Entry","Posts","Admin","pwd","number","user","setUser","visivle","setVisible","setNumber","certification","setCertification","count","onCertificationPhone","parseInt","App","component","rootReducer","combineReducers","TokenMiddleWare","store","next","middleWares","Thunk","createStore","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f0a96c51.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst GlobalStyles = createGlobalStyle`\n ${reset}\n    *{\n        box-sizing:border-box;\n    }\n    body,html{\n        font-size:14px;\n        font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", \"Apple SD Gothic Neo\", \"Malgun Gothic\", \"맑은 고딕\", 나눔고딕, \"Nanum Gothic\", \"Noto Sans KR\", \"Noto Sans CJK KR\", arial, 돋움, Dotum, Tahoma, Geneva, sans-serif !important;\n        //background-color:#F9F9FB;\n        color:rgb(36, 41, 46);\n        position:relative;\n        height:100%;\n    }\n    a{\n        text-decoration:none;\n        color:inherit;\n        cursor: pointer;\n    }\n    ol, ul, li {\n        list-style: none;\n    }\n    img {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n    input, button {\n        background-color: transparent;\n    }\n    h1, h2, h3, h4, h5, h6 {\n    font-family:'Maven Pro', sans-serif;\n    }\n  \n    b { \n        font-weight: bold !important; \n    }\n    i { \n        font-style : italic;\n    }\n    .quill{\n        height: ${window.innerHeight - 100 + \"px\"};\n    }\n    .quill img{\n        height: auto;\n        width:auto;\n        max-height: 700px;\n        position: relative;\n        margin :0 auto;\n    }\n    .ql-container.ql-snow{\n        border:none; \n    } \n    .ql-size-huge{\n        font-size:4rem !important;\n    }\n    .content-title{\n        width:100%;\n        height:100px;\n        resize:none;\n        border:none;\n        outline-style:none;\n        padding:25px;\n        font-size:3rem;\n    }\n    .writeBox-inputs{\n        border:1px solid black;\n        width:50%;\n        border: 1px solid rgba(0, 0, 0, 0.2);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }\n    .content-title::placeholder{\n        font-size:3rem;\n        font-style:italic\n    }\n    .preview-title{\n        border:1px solid black;\n        font-size:3rem;\n        word-break:break-all;\n        margin-bottom:100px;\n    }\n    .ql-container.ql-snow{\n        height:90%\n    }\n    \n    .ql-syntax{\n     font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n     padding:30px 30px; \n     border-radius: 4px;\n     font-size: 0.875rem;\n     background: rgb(248 249 250);\n     font-weight: 300 !important;\n     & span{\n     //color:rgb(36, 41, 46);\n        font-weight:300 !important;\n      }\n    }\n     pre.ql-syntax {\n      white-space: pre-wrap !important;\n     }\n    .ql-toolbar.ql-snow{\n        border-left:none;\n        border-right:none;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }   \n    .hljs-function{\n      .hljs-keyword{\n         color:rgb(36, 41, 46);\n      }\n      .hljs-params{\n         color:rgb(36, 41, 46);\n      }\n    }\n     //.xml{\n     //  .hljs-name,.hljs-tag{\n     //     color:rgb(36, 41, 46);\n     //  }\n     //}\n     .hljs-params,.hljs-attr,{\n      color:rgb(36, 41, 46) \n     }\n     .react{\n      background: white;\n     }\n\n`;\n\nexport default GlobalStyles;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {css} from \"styled-components\";\n\ninterface ISizes {\n    desktop: number\n    tablet: number\n    mobile: number\n\n    [index: string]: any\n}\n\nconst sizes: ISizes = {\n    desktop: 1250,\n    postBox: 1120,\n    tablet: 900,\n    mobile: 500,\n    small: 262\n};\n\nexport const media = Object.keys(sizes).reduce((acc: any, label: any) => {\n    acc[label] = (...args: any) => css`\n  @media(max-width:${sizes[label] / 16}em){\n    ${css(args)};\n  }\n`;\n    return acc;\n}, {});","import styled, {css} from \"styled-components\";\nimport {darken, lighten} from \"polished\";\nimport React, {memo} from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {media} from \"./styles/Media\";\n\nexport interface Width {\n    width: number;\n}\n\nexport interface topView {\n    width: number;\n    logo: any\n    ref: any\n}\n\nexport interface contentBox {\n    ref: any;\n}\n\ninterface IDeleteTopicIconComp {\n    onClick: any\n}\n\ninterface ISideBarThunmbNailComp {\n    style: any\n}\n\n//INTERFACE\n//위의 인터페이스는 컴포넌트가 가지는 PROPS의 인터ㅔ이스\n\nconst leftWidth = 200;\n\ninterface IEntryContainerComp {\n    width: number\n}\n\nexport const EntryContainerComp = styled.div<IEntryContainerComp>`\n  width:${props => props.width + \"px\"};\n  position:relative;\n  margin:0 auto;\n  display: flex;\n  ${media.desktop`width:95%`}\n`;\n\n\nconst postsContainerMixin = css<Width>`\n  ${media.mobile`\n   position:relative;\n   padding-left:10px;\n   padding-rigth:10px;\n  `};\n  margin-top:100px;\n  padding-left:85px; \n  flex-grow: 1;\n  & .sidebar-copyright{\n   text-align: right;\n   letter-spacing: 1.1px;\n   font-size:12px;\n   margin-top:80px;\n   margin-bottom: 20px;\n  }\n`;\n\nconst postsItemMixin = css`  \n  position:relative;\n  margin-bottom:60px;\n  word-break:break-all;\n  & .item-created{\n    display: inline-block;\n    font-size:1.1rem;\n    font-weight: 600;\n    opacity: 0.9;\n    ${media.tablet`font-size:0.8rem`};\n  }\n  & .item-contentName{\n    overflow-wrap: break-word;\n    font-size:2.7rem;\n    margin-top:6px;\n    letter-spacing: 2px;\n    font-weight: 450 ;\n    ${media.tablet`\n      font-size:2rem;\n      margin-top:-4px\n    `};\n    //white-space:nowrap;\n    //overflow: hidden;\n    //text-overflow: ellipsis;\n    //위에는 ...표시하는 방법\n    padding:6px 0;\n  }\n  & .item-detail{\n    font-size:1.2rem;\n    margin-top:40px;\n    ${media.tablet`font-size:0.8rem`}\n  }\n  & .posts-keyword-box{\n    margin-top:20px;\n    & .posts-keywords{\n      transition: 0.3s all;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    }\n    & .posts-keywords:hover{\n      background: ${lighten(0.07, \"#f58320\")};\n    }\n  }\n  & .posts-keywords{\n    background: #f58320;\n    color:white;\n    display: inline-block;\n    padding:4px 12px;\n    border-radius: 15px;\n    letter-spacing: 1.2px;\n  }\n  & .posts-admin-box{\n    position: absolute;\n    right:0;\n    bottom:0;\n    z-index: 9;\n    span{\n      vertical-align: middle;\n      font-size:1.6rem;\n      opacity: 0.6;\n      margin-left:12px;\n      transition: 0.3s all;\n    }\n    span:hover{\n      opacity: 1;\n      cursor: pointer;\n    }   \n  }\n`;\n\nexport const TopMetaBarComp = styled.section<Width>`\n  ${media.mobile`\n   width:100%;\n   background-color: white;\n  `};\n  position: fixed;\n  width:${props => props.width + \"px\"};\n  z-index: 9;\n  padding-bottom: 5px;\n  background-color: white;\n  & .topmetabar-list{\n    display: flex;\n    margin-top:20px;\n    & .metaItem{  \n      padding:5px 2px;\n      margin-right: 40px;\n      font-size:1.5rem;\n      opacity: 0.6;\n      font-weight: 500;\n      letter-spacing: 1.4px;\n      ${media.tablet`font-size:1.2rem`};\n      ${media.small`\n        font-size:0.8rem;\n      `}\n     &:hover{\n      opacity: 1;       \n     }\n    }\n    & .metaActive{\n      opacity: 1;\n      border-bottom:2.5px solid black;  \n      ${media.small`\n        border-bottom:1.5px solid black;\n      `}    \n    }\n \n  }\n  //& .topmetabar-icons-box{\n  // position: relative;\n  // font-size:1.65rem;\n  // display: flex;\n  // align-items: center;\n  // & .icon-github,.icon-tohome,.icon-mail{\n  //   cursor: pointer;\n  //   opacity: 0.8;\n  //   display: inline-block;\n  //   margin-left:24px;\n  //   transition:0.3s all;\n  //  }\n  //}\n  //& .icon-github:hover,.icon-tohome:hover,.icon-mail:hover{\n  //  opacity: 1;\n  //}\n`;\n\n\nexport const SideBarComp = styled.section`\n  display: inline-block;\n  ${media.mobile`display:none`}\n  & .write-article-btn {\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    display: inline-block;\n    padding: 7px 20px;\n    border-radius: 10px;\n    font-size: 14px;\n    font-weight: 100;\n    transition: all 0.2s;\n    margin-top:20px;\n   }\n  & .write-article-btn:hover {\n    cursor: pointer;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n  \n`;\n\n\nexport const SideBarThunmbNailComp = styled.div<ISideBarThunmbNailComp>`\n  border:1px solid rgba(0,0,0,0.06);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  position: relative;\n  width:120px;\n  padding-bottom: 120px;\n  border-radius: 5px;\n  margin-top:100px;\n`;\n\nexport const SideBarMetaDataComp = styled.div`\n  margin-top:46px;\n  & .sidebar-names{\n    font-size:2.2rem;\n    font-weight: 400;\n    letter-spacing:5px;\n  }\n  & .sidebar-posi{\n    letter-spacing: 1.2px;\n    font-size:1rem;\n    font-weight: 300;\n    &.posi1{\n      margin-top:15px;\n    }\n    &.posi2{\n      margin-top:6px;\n    }\n  }\n`;\n\nexport const SideBarPostsContainerComp = (styled.ul`\n  margin-top:70px;\n  perspective: 600px;\n  & .sidebar-list{\n    font-size:1.1rem;\n    margin-bottom:15px;\n    padding-bottom:15px;\n    border-bottom: 1px solid black;\n    letter-spacing: 1.2px;\n    font-weight: 500;\n  }\n`);\n\nexport const SideBarPostsItemComp = styled(NavLink)<any>`\n  height: 16px;\n  display:block;\n  margin-bottom:6px;\n  transition: all 0.6s;\n  vertical-align: middle;\n  & div{\n    vertical-align: middle;\n    font-size:1.1rem;\n    font-weight: 300;\n    opacity:1;\n    display: flex;\n    & .topic_list_items:hover{\n      text-decoration: underline;\n    }\n  }\n  & .topic_length{\n    display: inline-block;\n    font-size:1rem;\n    margin-left:5px;\n  }\n  &[aria-current] {\n    color: black;\n    & .topic_list_items{\n      opacity: 1;\n      font-weight: 500;\n      color:#3a7dff\n    }\n  }\n\n`;\n\nexport const EntryPostsContainerComp = styled.div<Width>`\n  ${postsContainerMixin}\n`;\n\nexport const EntryPostsItemComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const SpecificTopicContainerComp = styled.ul`\n  ${postsContainerMixin};\n`;\nexport const SpecificTopicItemsComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const PostsContainerComp = styled.section<Width>`\n  ${media.postBox`\n    width:100%;\n  `};\n  position: relative;\n  margin: 0 auto;\n  width: ${(props) => props.width - 80 + \"px\"};\n  padding-bottom: 80px;\n  & .posts-container-iconbox{\n    padding:20px 20px;\n    font-size:1.5rem;\n  }\n  & img{\n    height:auto;\n    width:auto;\n    max-height: 700px;\n    position: relative;\n    margin :0 auto;\n    ${media.mobile`max-width:100%`};\n  }\n  & .posts-name{\n    ${media.mobile`font-size:2rem`};\n    padding-top:50px;\n    font-size:3.5rem;\n    text-align: center;\n    font-weight: bold;\n  }\n  & .posts-detail{\n    text-align: center;\n    margin-top:20px;\n    font-size:1.2rem\n  }\n  & .posts-content{\n    word-break:break-all;\n    font-size:1.125rem;\n    margin-top:50px;    \n    & *{\n      white-space: pre-wrap !important;\n      word-break: break-all;\n      line-height: 2;\n    }\n  }\n  & .posts-created{\n    margin-top: 60px;\n    text-align: right;\n    font-size:1rem;\n    font-weight:100;\n  }\n`;\n// & .posts-content{\n//    word-break:break-all;\n//    line-height: 1.5;\n//    padding: 10px 10px;\n//    border-radius: 5px;\n// & img{\n//       height:auto;\n//       width:auto;\n//       max-height: 500px;\n//       position: relative;\n//       margin :0 auto;\n//    }\n// }\n\nexport const TopCommonSectionComp = (styled.div<topView>`\n   position: relative;\n   margin: 0 auto;\n   width: ${(props) => props.width + \"px\"};\n   height: 280px;\n   max-width: ${(props) => props.width + \"px\"};\n   background-image: url(${props => props.logo});\n   background-repeat:no-repeat ;\n   background-size: contain;\n   background-position: 50% 40%;\n   & .write-article-btn {\n      border: 1px solid rgba(0, 0, 0, 0.2);\n      display: inline-block;\n      padding: 7px 20px;\n      border-radius: 10px;\n      font-size: 14px;\n      font-weight: 100;\n      position: absolute;\n      bottom: 30px;\n      right: 30px;\n      transition: all 0.2s;\n   }\n   & .write-article-btn:hover {\n      cursor: pointer;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   }\n   @media (max-width: 1024px) {\n      width:768px;\n   }\n   @media(max-width:768px){\n      width:100%;\n   }\n`);\n\n\n//\nexport const AdminLoginBoxComp = styled.div`\n  position: absolute;\n  width:30%;\n  left:50%;\n  top:40%;\n  transform: translate(-50%,-50%);\n  & .login-inputbox{\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n    & input{\n      padding:15px 10px;\n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n    }\n  }\n  & .login-btn{\n    border:1px solid rgb(0,0,0,0.2);\n    width:100%;\n    height: 57px;\n    outline-style: none;\n    cursor: pointer;\n  }\n  & .certification-numberBox{ \n    display: flex;\n    button{\n      border:1px solid rgba(0,0,0,0.2);\n      outline-style: none;\n      height: 40px;\n      font-size: 12px;\n      letter-spacing: 1.2px;\n      cursor: pointer ;\n    }\n    input{\n      height: 40px;  \n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n      margin-right: 15px;\n      font-size: 1rem;\n      padding-left: 10px;\n    }\n  }\n`;\n//--------------------------------write---------------------------------------\n\nexport const WriteBox = (styled.div`\n   position: absolute;\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   height: 100%;\n   width: 50%;\n   border-radius: 4px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   overflow: scroll;\n`);\n\nexport const WriteConditionBox = memo(styled.section`\n   position: absolute;\n   right: 0;\n   width: 50%;\n   height: 100%;\n   overflow: scroll;\n`);\n\n\nexport const WriteBtnBoxComp = (styled.div`\n   padding-left:60px;\n   margin-top:30px;\n`);\n\nexport const WriteBtnComp = styled.button`\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   padding: 15px 25px;\n   font-size: 17px;\n   border-radius: 4px;\n   letter-spacing: 1.2px;\n   transition: 0.3s all;\n   background: #a5d8ff;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   color: black;\n   font-weight: 300;\n   margin-right: 30px;\n   &:hover {\n      cursor: pointer;\n      background-color: ${darken(0.1, \"#a5d8ff\")};\n   }\n   \n`;\n\n\nexport const SelectTopicBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\nexport const SelectTopicItemComp = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const CreateNewTopicComp = styled.div`\n   padding-top:20px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:20px;\n    margin-bottom: 20px;\n   }\n   & .add-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-top: 10px;\n   }\n   & .add-new-topic-btn:hover{\n    color: gray;\n   } \n`;\n\nexport const CreateNewTopicListBoxComp = styled.div`\n  width:180px;\n`;\n\nexport const DeleteTopicIconComp = styled.div<IDeleteTopicIconComp>`\n  display: flex;\n  font-size:20px;\n  cursor: pointer;\n  opacity: 0;\n  color: #dee2e6;\n  & :hover{\n    color:#ff6b6b;\n  }\n`;\n\nexport const AddTopicBtnComp = styled.div`\n  display: flex;\n  align-items: center;\n  & input{\n    padding:8px;\n    border:1px solid rgba(0,0,0.6);\n  }\n  & .make-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-left: 15px;\n  }\n  & .make-new-topic-btn:hover{\n    color: gray;\n  } \n`;\n\nexport const CreateNewTopicListItemComp = styled.div`\n  margin-bottom:15px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  & span{\n    display: inline-block;\n    width:70%;\n    font-size:22px;\n    font-weight: 100;\n  }\n  &:hover{\n    ${DeleteTopicIconComp}{\n      opacity: 1;\n    }\n  }\n`;\n\n\nexport const SelectKindOfPostsBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\n\nexport const SelectKindOfPosts = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    width:100px;\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const PostsDetailComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:1.7rem;\n    margin-bottom: 30px;\n   }\n   & input{\n    width:100%;\n    height: 50px;\n    outline-style: none;\n    border:none;\n    border-radius: 5px;\n    background-color: ${lighten(0.1, \"#a5d8ff\")};\n   }\n`;\n\n//--------------------------------write---------------------------------------\n\n\nexport const AboutContainerComp = styled.div<Width>`\n  position: relative;\n  width:${props => props.width + \"px\"};\n  margin-top:100px;\n`","import {ICommonAction, ICommonState} from \"./common.interface\";\n\n\nexport const SET_IS_LOGIN = \"common/SET_IS_LOGIN\";\n\nexport const NEW_REQUEST = \"common/NEW_REQUEST\";\n\nexport const onSetIsLogin = (payload: boolean) => ({type: SET_IS_LOGIN, payload});\n\nexport const onNewRequset = (payload: boolean) => ({type: NEW_REQUEST, payload: payload});\n\n// typescript는 const를 이해하므로(typeof CHECK_GUESTBOOK은 string이 아니라 'CHECK_GUESTBOOK'입니다)\n// 액션 이름을 그대로 쓰셔도 됩니다.\n\n//thunk 생성함\n\n\nconst initialState: ICommonState = {\n    width: window.screen.width * 0.67,\n    login: false,\n    loading: false,\n    newRequest: true,\n    e: null,\n};\n\n\nexport default function common(state: ICommonState = initialState, action: ICommonAction): ICommonState {\n    switch (action.type) {\n        case SET_IS_LOGIN:\n            return {\n                ...state,\n                login: action.payload as boolean,\n            };\n        case NEW_REQUEST:\n            return {\n                ...state,\n                newRequest: action.payload as boolean,\n            };\n        default:\n            return state;\n    }\n}","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onNewRequset, onSetIsLogin } from \"../modules/Common\";\n\nexport default function useCommon() {\n   const dispatch = useDispatch();\n\n   const { width, login, loading, newRequest, e } = useSelector((state: RootState) => state.common);\n\n   const onSetLogin = useCallback((state: boolean) => {\n      dispatch(onSetIsLogin(state));\n   }, [dispatch]);\n\n   const setNewRequset = useCallback((state: boolean) => {\n      dispatch(onNewRequset(state));\n   }, [dispatch]);\n   //state true mean state need new Request, false is opposite\n\n\n   return {\n      width,\n      login,\n      loading,\n      e,\n      onSetLogin,\n      newRequest,\n      setNewRequset,\n   };\n}","import axios from \"axios\";\n// import { cacheAdapterEnhancer } from \"axios-extensions\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst instance = axios.create({\n   withCredentials: true,\n});\ninstance.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n\ninstance.interceptors.request.use(\n   (config) => {\n      return config;\n   },\n   (err) => {\n      return Promise.reject(err);\n   },\n);\n\nexport default instance;\n","import instance from \"../config/axois.config\";\nimport {ITextInitialProps} from \"../modules/TextEditor/textEdit.interface\";\n\n\nconst util = {\n    getCSRTtoken() {\n        return instance({\n            url: \"/api/csrf\",\n            method: \"get\",\n        });\n    },\n\n\n    getTopicName() {\n        return instance({\n            url: \"/topic/contents/name\",\n            method: \"get\",\n        });\n    },\n\n    savePost(data: ITextInitialProps, token: string) {\n        return instance({\n            url: \"/topic/posts\",\n            method: \"post\",\n            data: data,\n            headers: {\"X-XSRF-TOKEN\": token},\n        });\n    },\n\n    getAllPostsItems() {\n        return instance({\n            url: \"/topic/posts/items\",\n            method: \"get\",\n        });\n    },\n\n    getPostFromParams(parmas: string) {\n        return instance({\n            url: `/topic/posts/${parmas}`,\n            method: \"get\",\n        });\n    },\n\n    getPostFromPostId(topic: string, postsId: string) {\n        return instance({\n            url: `/topic/${topic}/posts/${postsId}`,\n        });\n    },\n\n\n    deleteTopic(topicName: string, token: string) {\n        return instance({\n            url: `/topic/:${topicName}`,\n            method: \"post\",\n            data: {topicName: topicName},\n            headers: {\"X-XSRF-TOKEN\": token},\n        });\n    },\n\n    deletePost(uid: string, topic: string, token: string) {\n        return instance({\n            url: `/topic/posts/item`,\n            method: \"post\",\n            data: {uid: uid, topic: topic},\n            headers: {\"X-XSRF-TOKEN\": token},\n        });\n    },\n\n    makeNewTopic(topicName: string, token: string) {\n        return instance({\n            url: `/topic/topicname/${topicName}`,\n            method: \"post\",\n            data: {newTopic: topicName},\n            headers: {\"X-XSRF-TOKEN\": token},\n        });\n    },\n\n    adminLogin(data: any, token: string) {\n        return instance({\n            url: \"/admin/login\",\n            method: \"post\",\n            data: {data},\n            headers: {\"X-XSRF-TOKEN\": token},\n        });\n    },\n\n    setJwtToken(token: string) {\n        return instance({\n            url: \"/admin/token\",\n            method: \"post\",\n            headers: {\"X-XSRF-TOKEN\": token},\n        });\n    },\n\n    checkJWTToken() {\n        return instance({\n            url: `/admin/token/jwt`,\n            method: \"get\",\n        });\n    },\n\n\n};\n\nexport default util;","import {DataAction} from \"../posts.interface\";\n\ninterface IParameter {\n    params?: string\n    topic?: string\n    postsId?: string\n}\n\nexport const reducerUtil = {\n    initial: (initialState = null) => ({\n        loading: false,\n        data: initialState,\n        error: null,\n    }),\n\n    loading: (prevState = null) => ({\n        loading: true,\n        data: prevState,\n        error: null,\n    }),\n\n    success: (payload: any) => ({\n        loading: false,\n        data: payload,\n        error: null,\n    }),\n\n    error: (error: Error) => ({\n        loading: false,\n        data: null,\n        error: error,\n    }),\n};\n\n\nexport const createThunk = (type: string, cb: any) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return ({...parameter}: IParameter) => async (dispatch: any) => {\n        dispatch({type: type});\n        try {\n            if (type === \"data/GET_POSTS\") {\n                const {data} = await cb(parameter.params);\n                dispatch({type: SUCCESS, payload: data});\n            } else if (type === \"data/GET_POST\") {\n                const {data} = await cb(parameter.topic, parameter.postsId);\n                dispatch({type: SUCCESS, payload: data});\n            } else {\n                const {data} = await cb();\n                dispatch({type: SUCCESS, payload: data});\n            }\n        } catch (e) {\n            dispatch({type: ERROR, error: e});\n        }\n    };\n};\n\n\nexport function handleAction(type: string, key: string, keepData?: boolean) {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return (state: any, action: DataAction) => {\n        switch (action.type) {\n            case type:\n                return {\n                    ...state,\n                    [key]: reducerUtil.loading(keepData ? state[key].data : null),\n                };\n            case SUCCESS:\n                return {\n                    ...state,\n                    [key]: reducerUtil.success(action.payload),\n                };\n            case ERROR:\n                return {\n                    ...state,\n                    [key]: reducerUtil.error(action.error),\n                };\n        }\n    };\n}","import util from \"../../lib/axios\";\nimport {createThunk, handleAction, reducerUtil} from \"./lib/PostsUtil\";\nimport {DataAction, IPostInitialState} from \"./posts.interface\";\n\nexport const GET_POSTS = \"data/GET_POSTS\";\nexport const GET_POSTS_SUCCESS = \"data/GET_POSTS_SUCCESS\";\nexport const GET_POSTS_ERROR = \"data/GET_POSTS_ERROR\";\n\nexport const GET_POST = \"data/GET_POST\";\nexport const GET_POST_SUCCESS = \"data/GET_POST_SUCCESS\";\nexport const GET_POST_ERROR = \"data/GET_POST_ERROR\";\n\nexport const GET_ALL_POSTS = \"data/GET_ALL_POSTS\";\nexport const GET_ALL_POSTS_SECCUESS = \"data/GET_ALL_POSTS_SUCCESS\";\nexport const GET_ALL_POSTS_ERROR = \"data/GET_ALL_POSTS_ERROR\";\n\nexport const DELETE_POST = \"data/DELETE_POST\";\nexport const CLEAR_POST = \"data/CLEAR_POST\";\n//액션 생성함수를 선언!\n\nexport const onRequestPosts = createThunk(GET_POSTS, util.getPostFromParams);\n\nexport const onRequsetPost = createThunk(GET_POST, util.getPostFromPostId);\n\nexport const onRequestAllPosts = createThunk(GET_ALL_POSTS, util.getAllPostsItems);\n\n\nconst initialState: IPostInitialState = {\n    posts: reducerUtil.initial(null),\n    post: reducerUtil.initial(null),\n    AllPosts: reducerUtil.initial(null),\n};\n\n\nexport default function Posts(state: IPostInitialState = initialState, action: DataAction): IPostInitialState {\n    switch (action.type) {\n        case GET_POSTS:\n        case GET_POSTS_SUCCESS:\n        case GET_POSTS_ERROR:\n            return handleAction(GET_POSTS, \"posts\", true)(state, action);\n        case GET_POST:\n        case GET_POST_SUCCESS:\n        case GET_POST_ERROR:\n            return handleAction(GET_POST, \"post\", false)(state, action);\n        //특정 포스트 볼때 >>>이전 데이터를 가지고있으면 전의 데이터도 렌더링 되는 ㅇ형상떄문에 false로 로딩시 데이터를 유지하지 않게함\n        case GET_ALL_POSTS:\n        case GET_ALL_POSTS_SECCUESS:\n        case GET_ALL_POSTS_ERROR:\n            return handleAction(GET_ALL_POSTS, \"AllPosts\", true)(state, action);\n        case DELETE_POST:\n            return {\n                ...state,\n                AllPosts: {\n                    data: action.payload,\n                    loading: false,\n                    error: null,\n                },\n            };\n        case CLEAR_POST:\n            return {\n                ...state,\n                post: reducerUtil.initial(null),\n            };\n        default :\n            return state;\n    }\n\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onRequestAllPosts, onRequestPosts, onRequsetPost } from \"../modules/Posts\";\nimport { useCallback } from \"react\";\nimport { clearPost, onDeletePost } from \"../modules/Posts/lib/PostsAction\";\nimport { IPostCommonProps } from \"../modules/Posts/posts.interface\";\n\nexport default function usePosts() {\n   const dispatch = useDispatch();\n   const { posts, post, AllPosts } = useSelector((state: RootState) => state.posts);\n\n   const getPosts = useCallback((params: string) => {\n      dispatch(onRequestPosts({ params }));\n   }, [dispatch]);\n\n   const getPost = useCallback((topic: string, postsId: string) => {\n      dispatch(onRequsetPost({ topic, postsId }));\n   }, [dispatch]);\n\n   const getAllPosts = useCallback(() => {\n      dispatch(onRequestAllPosts({}));\n   }, [dispatch]);\n\n   const deletePost = useCallback((posts: IPostCommonProps[]) => {\n      dispatch(onDeletePost(posts));\n   }, [dispatch]);\n\n   const onClearPost = useCallback(() => {\n      dispatch(clearPost());\n   }, [dispatch]);\n\n   return {\n      AllPosts,\n      posts,\n      post,\n      getPosts,\n      getPost,\n      deletePost,\n      getAllPosts,\n      onClearPost,\n   };\n}\n","import {\n   CLEAR_POST,\n   DELETE_POST,\n   GET_ALL_POSTS,\n   GET_ALL_POSTS_ERROR,\n   GET_ALL_POSTS_SECCUESS,\n   GET_POST,\n   GET_POST_ERROR,\n   GET_POST_SUCCESS,\n   GET_POSTS,\n   GET_POSTS_ERROR,\n   GET_POSTS_SUCCESS,\n} from \"../index\";\nimport { IPostCommonProps } from \"../posts.interface\";\n\nexport const clearPost = () => ({\n   type: CLEAR_POST,\n});\n\nexport const onDeletePost = (posts: IPostCommonProps[]) => ({\n   type: DELETE_POST,\n   payload: posts,\n});\n\nexport const onRequest = () => ({\n   type: GET_POSTS,\n});\n\nexport const onRequestSuccuess = (payload: any[]) => ({\n   type: GET_POSTS_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestError = (e: Error) => ({\n   type: GET_POSTS_ERROR,\n   error: e,\n});\n\nexport const onRequestPost = () => ({\n   type: GET_POST,\n});\n\nexport const onRequestPostSuccess = (payload: any[]) => ({\n   type: GET_POST_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestPostError = (e: Error) => ({\n   type: GET_POST_ERROR,\n   error: e,\n});\n\nexport const onRequsetAllPosts = () => ({\n   type: GET_ALL_POSTS,\n});\n\nexport const onRequsetAllPostsSuccess = (payload: any[]) => ({\n   type: GET_ALL_POSTS_SECCUESS,\n   payload: payload,\n});\n\nexport const onRequestAllPostsError = (e: Error) => ({\n   type: GET_ALL_POSTS_ERROR,\n   error: e,\n});\n\n","import React, {ChangeEvent} from \"react\";\nimport {SelectTopicBoxComp, SelectTopicItemComp} from \"../../styled-comp\";\nimport {ISelectopicProps} from \"../../interface/index.interface\";\n\n\nfunction SelectTopic({topic, onIsChecked}: ISelectopicProps) {\n\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        onIsChecked(e.target.value);\n    };\n\n    if (topic === null) return null;\n\n    return (\n        <SelectTopicBoxComp>\n            <h1>토픽을 선택해주세요</h1>\n            <div className=\"post-select-box\">\n                {topic.map((v: { Tables_in_contents: string }) => (\n                    <SelectTopicItemComp key={v[\"Tables_in_contents\"]}>\n                        <input className=\"select-input\" type=\"radio\" id={v[\"Tables_in_contents\"]} onChange={onChange}\n                               value={v[\"Tables_in_contents\"]} name='post'/>\n                        <label className=\"select-label\"\n                               htmlFor={v[\"Tables_in_contents\"]}>{v[\"Tables_in_contents\"]}</label>\n                    </SelectTopicItemComp>\n                ))}\n            </div>\n        </SelectTopicBoxComp>\n    );\n}\n\nexport default React.memo(SelectTopic);","import React from \"react\";\n\nconst WriteTopicName = ({ onNameChange }: { onNameChange: any }) => {\n   const onChange = (e: any) => {\n      onNameChange(e.target.value);\n   };\n\n   return (\n      <>\n         <textarea name=\"content-title\" placeholder=\"제목\" className=\"content-title\" onChange={onChange} />\n      </>\n   );\n};\n\nexport default React.memo(WriteTopicName);","import \"highlight.js/styles/a11y-light.css\";\nimport hljs from \"highlight.js\";\n\nhljs.configure({\n   languages: [\"javascript\", \"react\", \"typescript\", \"css\", \"html\", \"Node REPL\"],\n});\n\nexport const modules = {\n   syntax: {\n      highlight: (text: any) => hljs.highlightAuto(text).value,\n   },\n   toolbar: [\n      // [{ header: \"1\" }, { header: \"2\" }],\n      [{ font: [] }],\n      [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n      [\"bold\", \"italic\", \"underline\", \"strike\"],\n      [\"blockquote\", \"code-block\"],\n      [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n      [{ align: [] }],\n      [{ list: \"ordered\" }, { list: \"bullet\" }, { indent: \"-1\" }, { indent: \"+1\" }],\n      [\"link\", \"image\", \"video\"],\n   ],\n};\n\n\nexport const formats = [\"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\",\n   \"code-block\", \"color\", \"background\", \"align\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"blockquote\", \"video\", \"insert\"];\n\n\n// const bold = Quill.import(\"formats/bold\");\n// bold.tagName = \"b\"; // Quill uses <strong> by default\n// Quill.register(bold, true);\n//\n// const italic = Quill.import(\"formats/italic\");\n// italic.tagName = \"i\"; // Quill uses <em> by default\n// Quill.register(italic, true);\n","import util from \"../../lib/axios\";\nimport { ITopicinitialState, TopicAction } from \"./topic.interface\";\n\nexport const GET_TOPIC = \"topic/GET_TOPIC\";\nexport const GET_TOPIC_SUCCESS = \"topic/GET_TOPIC_SUCCESS\";\nexport const GET_TOPIC_ERROR = \"topic/GET_TOPIC_ERROR\";\n\n\nexport const getTopic = () => ({ type: GET_TOPIC });\nexport const getTopicSuccess = (payload: any[]) => ({ type: GET_TOPIC_SUCCESS, payload });\nexport const getTopicError = (e: Error) => ({ type: GET_TOPIC_ERROR, e });\n\n\nexport const onReqTopicsName = () => async (dispatch: any, getState: any) => {\n   dispatch(getTopic());\n   try {\n      const { data } = await util.getTopicName();\n      dispatch(getTopicSuccess(data));\n   } catch (e) {\n      dispatch(getTopicError(e));\n   }\n};\n\n\nconst initialState = {\n   topic: null,\n   loading: false,\n   error: null,\n};\n\nexport default function Topic(state: ITopicinitialState = initialState, action: TopicAction) {\n   switch (action.type) {\n      case GET_TOPIC:\n         return {\n            ...state,\n            loading: true,\n         };\n      case GET_TOPIC_SUCCESS:\n         return {\n            ...state,\n            topic: action.payload,\n            loading: false,\n         };\n      case GET_TOPIC_ERROR:\n         return {\n            ...state,\n            error: action.error,\n         };\n      default :\n         return state;\n   }\n}","// 액션 타입을 선언합니다\n// 뒤에 as const 를 붙여줌으로써 나중에 액션 객체를 만들게 action.type 의 값을 추론하는 과정에서\n// action.type 이 string 으로 추론되지 않고 'counter/INCREASE' 와 같이 실제 문자열 값으로 추론 되도록 해줍니다.\nimport { EditorAction, ITextInitialProps } from \"./textEdit.interface\";\n\nconst SET_CONTENT = \"textEdit/SET_CONTENT\" as const;\nconst SET_CONTENT_NAME = \"textEdit/SET_CONTENT_NAME\" as const;\nconst SET_TOPIC = \"textEdit/SET_TOPIC\" as const;\nconst SET_KIND_OF_POSTS = \"textEdit/SET_KIND_OF_POSTS\" as const;\nconst SET_DETAIL = \"textEdit/SET_DETAIL\" as const;\n\n\nexport const onSetContent = (content: string) => ({ type: SET_CONTENT, payload: content });\nexport const onSetContentName = (contentName: string) => ({ type: SET_CONTENT_NAME, payload: contentName });\nexport const onSetTopic = (topic: string) => ({ type: SET_TOPIC, payload: topic });\nexport const onSetKindOfPosts = (kindOfPosts: string) => ({ type: SET_KIND_OF_POSTS, payload: kindOfPosts });\nexport const onSetDetail = (detail: string) => ({ type: SET_DETAIL, payload: detail });\n\n\nconst initialState: ITextInitialProps = {\n   contentName: \"\",\n   content: \"\",\n   topicName: \"\",\n   kindOfPosts: \"\",\n   detail: \"\",\n};\n\n\nfunction TextEditor(state: ITextInitialProps = initialState, action: EditorAction): ITextInitialProps {\n   switch (action.type) {\n      case SET_CONTENT:\n         return {\n            ...state,\n            content: action.payload,\n         };\n      case SET_CONTENT_NAME:\n         return {\n            ...state,\n            contentName: action.payload,\n         };\n      case SET_TOPIC:\n         return {\n            ...state,\n            topicName: action.payload,\n         };\n      case SET_KIND_OF_POSTS:\n         return {\n            ...state,\n            kindOfPosts: action.payload,\n         };\n      case SET_DETAIL:\n         return {\n            ...state,\n            detail: action.payload,\n         };\n      default:\n         return state;\n   }\n\n}\n\nexport default TextEditor;","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onSetContent, onSetContentName, onSetDetail, onSetKindOfPosts, onSetTopic } from \"../modules/TextEditor\";\n\nfunction useTextEdit() {\n   const data = useSelector((state: RootState) => state.textEdit);\n   const dispatch = useDispatch();\n\n   const setContent = useCallback((content: string) => {\n      dispatch(onSetContent(content));\n   }, [dispatch]);\n\n   const setContentName = useCallback((contentName: string) => {\n      dispatch(onSetContentName(contentName));\n   }, [dispatch]);\n\n   const setTopic = useCallback((topic: string) => {\n      dispatch(onSetTopic(topic));\n   }, [dispatch]);\n\n   const setKindOfPosts = useCallback((kindOf: string) => {\n      dispatch(onSetKindOfPosts(kindOf));\n   }, [dispatch]);\n\n   const setDetail = useCallback((detail: string) => {\n      dispatch(onSetDetail(detail));\n   }, [dispatch]);\n\n\n   return { data, setContent, setContentName, setTopic, setKindOfPosts, setDetail };\n}\n\nexport default useTextEdit;","import React, { useEffect, useState } from \"react\";\nimport util from \"../lib/axios\";\n\n\nfunction CSRF() {\n   const [csrf, setCsrf] = useState(\"\");\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.getCSRTtoken();\n         setCsrf(data);\n      })();\n      return function cleanUp() {\n         setCsrf(\"\");\n      };\n   }, []);\n\n   return csrf;\n}\n\nexport default CSRF;","import React, {useCallback, useEffect, useRef} from \"react\";\nimport ReactQuill from \"react-quill\";\nimport WriteTopicName from \"component/TextEditor/WriteTopicName\";\nimport \"react-quill/dist/quill.snow.css\";\nimport {formats, modules} from \"../../config/textEditor.config\";\nimport {WriteBox, WriteConditionBox} from \"../../styled-comp\";\nimport {CreateNewTopic, KindOfPosts, PostsDetail, SelectTopic, TextEditBtnBox} from \"component/index\";\nimport useTopic from \"../../useHooks/useTopic\";\nimport useTextEdit from \"../../useHooks/useTextEdit\";\nimport {ITextEditModuleProps} from \"../../modules/TextEditor/textEdit.interface\";\nimport util from \"../../lib/axios\";\nimport {ITopicModuleProps} from \"../../modules/Topic/topic.interface\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport {ICommonModuleProps} from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\n\n\nconst Editor = ({history}: any) => {\n\n\n    const {setNewRequset}: ICommonModuleProps = useCommon();\n    const csrf = useCSRF();\n    const {\n        data,\n        setContent,\n        setContentName,\n        setTopic,\n        setKindOfPosts,\n        setDetail,\n    }: ITextEditModuleProps = useTextEdit();\n\n    const {topic, makeOrDeleteAndReqNewTopics}: ITopicModuleProps = useTopic();\n    const ref = useRef<any>(null);\n\n    useEffect(() => {\n        (async () => {\n            const {data} = await util.checkJWTToken();\n            if (!data.decoded) {\n                history.push(\"/\")\n            } else {\n                makeOrDeleteAndReqNewTopics()\n                ref.current.focus();\n            }\n        })()\n    }, [history, makeOrDeleteAndReqNewTopics])\n\n\n    const onNameChange = useCallback((data: string) => {\n        setContentName(data);\n    }, [setContentName]);\n\n    const rteChange = useCallback((content: any, delta: any, source: any, editor: any) => {\n        setContent(ref.current.state.value);\n    }, [setContent]);\n\n    const onIsChecked = useCallback((name: string) => {\n        setTopic(name);\n    }, [setTopic]);\n\n    const onCheckKindOfPosts = useCallback((kindOf: string) => {\n        setKindOfPosts(kindOf);\n    }, [setKindOfPosts]);\n\n    const onChangeDetail = useCallback((detail: string) => {\n        setDetail(detail);\n    }, [setDetail]);\n\n    const onMakeOrDelteTopic = useCallback(() => {\n        makeOrDeleteAndReqNewTopics();\n    }, [makeOrDeleteAndReqNewTopics]);\n\n    const onSubmit = async (): Promise<void> => {\n        if (data.content === \"\"\n            || data.contentName === \"\"\n            || data.detail === \"\"\n            || data.kindOfPosts === \"\"\n            || data.topicName === \"\") {\n            alert(\"정보를 입력하세요\");\n        } else {\n            const result = await util.savePost(data, csrf);\n            setNewRequset(true);\n            if (result) history.push(\"/\");\n        }\n    };\n\n\n    return (\n        <>\n            <WriteBox>\n                <WriteTopicName onNameChange={onNameChange}/>\n                <ReactQuill theme=\"snow\"\n                            onChange={rteChange}\n                            modules={modules}\n                            formats={formats}\n                            placeholder=\"입력하세요.\"\n                            ref={ref}/>\n            </WriteBox>\n            <WriteConditionBox>\n                <SelectTopic onIsChecked={onIsChecked} topic={topic}/>\n                <CreateNewTopic topic={topic} token={csrf} onMakeOrDelteTopic={onMakeOrDelteTopic}/>\n                <KindOfPosts onCheck={onCheckKindOfPosts}/>\n                <PostsDetail onChangeDetail={onChangeDetail}/>\n                <TextEditBtnBox onSubmit={onSubmit}/>\n            </WriteConditionBox>\n        </>\n    );\n};\n\n\nexport default Editor;","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { useCallback } from \"react\";\nimport { onReqTopicsName } from \"../modules/Topic\";\n\nexport default function useTopic() {\n   const dispatch = useDispatch();\n   const { topic, loading, error } = useSelector((state: RootState) => state.topic);\n\n   const makeOrDeleteAndReqNewTopics = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n   const requestTopic = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n\n   return { topic, loading, error, makeOrDeleteAndReqNewTopics, requestTopic };\n}","import React from \"react\";\nimport { WriteBtnBoxComp, WriteBtnComp } from \"../../styled-comp\";\nimport { ITextEditBtnBoxProps } from \"../../interface/index.interface\";\n\n\nconst TextEditBtnBox = ({ onSubmit }: ITextEditBtnBoxProps) => {\n   return (\n      <WriteBtnBoxComp>\n         <WriteBtnComp onClick={onSubmit}>등록하기</WriteBtnComp>\n         <WriteBtnComp>임시저장</WriteBtnComp>\n      </WriteBtnBoxComp>\n   );\n};\nexport default TextEditBtnBox;","import React, { ChangeEvent } from \"react\";\nimport { SelectKindOfPosts, SelectKindOfPostsBoxComp } from \"../../styled-comp\";\nimport { IKindsOfPostsProps } from \"../../interface/index.interface\";\n\n\nfunction SelectKindOfPost({ onCheck }: IKindsOfPostsProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onCheck(e.target.value);\n   };\n\n   return (\n      <SelectKindOfPostsBoxComp>\n         <h1>게시물종류를 선택해주세요</h1>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-notice\" onChange={onChange} value=\"notice\" name='kindofpost' />\n            <label className=\"select-label\" htmlFor=\"kind-of-notice\">공지</label>\n         </SelectKindOfPosts>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-posts\" onChange={onChange} value=\"posts\" name='kindofpost' />\n            <label className=\"select-label\" htmlFor=\"kind-of-posts\">게시물</label>\n         </SelectKindOfPosts>\n      </SelectKindOfPostsBoxComp>\n   );\n}\n\nexport default React.memo(SelectKindOfPost);","import React, { ChangeEvent, useState } from \"react\";\nimport { PostsDetailComp } from \"../../styled-comp\";\nimport { IPostsDetailProps } from \"../../interface/index.interface\";\n\n\nfunction PostsDetail({ onChangeDetail }: IPostsDetailProps) {\n\n   const [value, setValue] = useState<string>(\"\");\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n      onChangeDetail(e.target.value);\n   };\n\n\n   return (\n      <PostsDetailComp>\n         <h1>추가설명을 입력하세요</h1>\n         <input type=\"text\" onChange={onChange} value={value} />\n      </PostsDetailComp>\n   );\n}\n\nexport default React.memo(PostsDetail);","import React, { useState } from \"react\";\nimport { AddTopicBtnComp, CreateNewTopicComp, CreateNewTopicListBoxComp, CreateNewTopicListItemComp, DeleteTopicIconComp } from \"../../styled-comp\";\nimport { MdDelete } from \"react-icons/md\";\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport util from \"../../lib/axios\";\nimport { ICreateNewTopicProps } from \"../../interface/index.interface\";\n\n\nfunction CreateNewTopic({ topic, token, onMakeOrDelteTopic }: ICreateNewTopicProps) {\n   const [click, setClick] = useState<boolean>(false);\n   const [newTopic, setNewtopic] = useState<string>(\"\");\n\n   const setNewTopicName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setNewtopic(e.target.value);\n   };\n\n   const previousMakeNewTopic = () => {\n      setClick(!click);\n   };\n\n   const makeNewTopic = async () => {\n      await util.makeNewTopic(newTopic, token);\n      onMakeOrDelteTopic();\n      setClick(!click);\n      setNewtopic(\"\");\n   };\n\n   const deleteTopic = async (e: React.ChangeEvent<HTMLElement>) => {\n      if (window.confirm(\"정말로 삭제하겠습니까? 삭제하면 정보가 다사라집니다.\")) {\n         await util.deleteTopic((e.currentTarget.dataset.topic) as string, token);\n         onMakeOrDelteTopic();\n      }\n   };\n\n   //TODO 엔터 입력시 만들어버리게\n\n   if (topic === null) return null;\n\n   return (\n      <CreateNewTopicComp>\n         <h1>토픽관리하기</h1>\n         <CreateNewTopicListBoxComp>\n            {topic.map((v: { Tables_in_contents: string }) => (\n               <CreateNewTopicListItemComp key={v[\"Tables_in_contents\"]}>\n                  <span>{v[\"Tables_in_contents\"]}</span>\n                  <DeleteTopicIconComp onClick={deleteTopic} data-topic={v[\"Tables_in_contents\"]}>\n                     <MdDelete />\n                  </DeleteTopicIconComp>\n               </CreateNewTopicListItemComp>\n            ))}\n         </CreateNewTopicListBoxComp>\n\n         {click &&\n         <AddTopicBtnComp>\n            <input type=\"text\" value={newTopic} onChange={setNewTopicName} />\n            <IoIosAddCircle className=\"make-new-topic-btn\" onClick={makeNewTopic} />\n         </AddTopicBtnComp>\n         }\n\n         <IoIosAddCircle className=\"add-new-topic-btn\" onClick={previousMakeNewTopic} />\n      </CreateNewTopicComp>\n   );\n}\n\nexport default React.memo(CreateNewTopic);","export default __webpack_public_path__ + \"static/media/Logo.7ba0ce66.svg\";","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Logo from \"../image/Logo.svg\";\n\ninterface IReactHelmet {\n   keywords: string\n   description: string\n   title: string\n   favicon?: string\n}\n\nfunction ReactHelmet({ keywords, description, title, favicon }: IReactHelmet) {\n   return (\n      <Helmet>\n         <meta name=\"description\" content={description} />\n         <meta name=\"keywords\" content={keywords} />\n         <title>{title}</title>\n         <meta property=\"og:title\" content={title} />\n         <meta property=\"og:image\" content={\"build\" + `${Logo}`} />\n         <meta property=\"og:site_name\" content=\"junggri.com\" />\n         <meta property=\"og:description\" content={description} />\n      </Helmet>\n   );\n}\n\nexport default ReactHelmet;","import React, { useEffect } from \"react\";\nimport { PostsContainerComp } from \"../../styled-comp\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { IPostDataProps, IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { Link } from \"react-router-dom\";\nimport { CgHome } from \"react-icons/cg\";\nimport Highlight from \"react-highlight.js\";\nimport createDOMPurify from \"dompurify\";\nimport ReactHelmet from \"../../useHooks/useHelmet\";\n\nconst DOMPurify = createDOMPurify(window);\n\nfunction PostsContainer({ match }: any) {\n   const { width }: ICommonModuleProps = useCommon();\n   const { getPost, post, onClearPost }: IPostsModuleProps = usePosts();\n   const { data } = post;\n\n   useEffect(() => {\n      getPost(match.params.topic, match.params.postsId);\n      return () => onClearPost();\n   }, [match.params.topic, match.params.postsId, onClearPost, getPost]);\n\n   const MakeHtml = () => ({ __html: DOMPurify.sanitize((data as IPostDataProps).content) });\n\n\n   if (!post.data) return null;\n\n   return (\n      <PostsContainerComp width={width}>\n         <ReactHelmet\n            keywords={(data as IPostDataProps).result[0].content_name}\n            description={(data as IPostDataProps).result[0].detail}\n            title={(data as IPostDataProps).result[0].content_name}\n         />\n         <div className=\"posts-container-iconbox\">\n            <Link to=\"/\">\n               <CgHome className=\"icon-tohome\" />\n            </Link>\n         </div>\n         <div className=\"posts-name\">\n            {(data as IPostDataProps).result[0].content_name}\n         </div>\n         <div className=\"posts-detail\">\n            {(data as IPostDataProps).result[0].detail}\n         </div>\n         <Highlight language='react'>\n            <div dangerouslySetInnerHTML={MakeHtml()} className=\"posts-content\" />\n         </Highlight>\n         <div className=\"posts-created\">\n            {(data as IPostDataProps).result[0].created}\n         </div>\n      </PostsContainerComp>\n   );\n}\n\nexport default PostsContainer;","import React, {useCallback} from \"react\";\nimport {EntryPostsContainerComp, EntryPostsItemComp} from \"../../styled-comp\";\nimport {Link} from \"react-router-dom\";\nimport util from \"../../lib/axios\";\nimport {IoColorWand} from \"react-icons/io5\";\nimport {MdDelete} from \"react-icons/md\";\nimport {IAllPost, IPostCommonProps} from \"../../modules/Posts/posts.interface\";\n\ninterface IEntryPostsContainer {\n    width: number,\n    posts: IAllPost\n    deletePost: (posts: any) => void,\n    getAllPosts: () => void\n    login: boolean,\n    csrf: string\n}\n\nconst EntryPostsContainer = ({width, posts, deletePost, login, csrf, getAllPosts}: IEntryPostsContainer) => {\n\n    const onModified = useCallback((e: React.MouseEvent<HTMLElement>) => {\n        console.log(2);\n    }, [csrf]);\n\n    const onDelete = useCallback((e: React.MouseEvent<HTMLElement>) => {\n        const uid = (e.currentTarget.parentNode as HTMLElement).dataset.id as string;\n        const topic = (e.currentTarget.parentNode as HTMLElement).dataset.topic as string;\n        (async () => {\n            await util.deletePost(uid, topic, csrf);\n            getAllPosts();\n        })();\n\n    }, [csrf, deletePost]);\n\n\n    if (!posts.data) return null\n    const data = Object.values(posts.data).flat();\n    return (\n        <EntryPostsContainerComp width={width}>\n            {data.map((e: IPostCommonProps) => (\n                <EntryPostsItemComp key={e.uid}>\n                    <span className=\"item-created\">🗓 {e.created}</span>\n                    <Link to={`/topic/${e.topic}/${e.uid}`}>\n                        <div className=\"item-contentName\">\n                            {e.content_name}\n                        </div>\n                    </Link>\n                    <div className=\"item-detail\">🔮 {e.detail}</div>\n                    <section className=\"posts-keyword-box\">\n                   <span className=\"posts-keywords\">\n                        <Link to={`/topic/${e.topic}`}>\n                            {e.topic}\n                        </Link>\n                     </span>\n                    </section>\n                    {login &&\n                    <div className=\"posts-admin-box\" data-id={e.uid} data-topic={e.topic}>\n                        <span className='posts-admin-modify' onClick={onModified}><IoColorWand/></span>\n                        <span className='posts-admin-delete' onClick={onDelete}><MdDelete/></span>\n                    </div>\n                    }\n                </EntryPostsItemComp>\n            ))}\n            <div className=\"sidebar-copyright\">Copyright 2021. junggri All rights reserved.</div>\n        </EntryPostsContainerComp>\n    );\n};\n\nexport default (EntryPostsContainer);","import React from \"react\";\nimport {TopMetaBarComp} from \"../../styled-comp\";\nimport {NavLink} from \"react-router-dom\";\n\n\nfunction TopMetaBar({width, match}: { width: number, match: any }) {\n    return (\n        <TopMetaBarComp width={width}>\n            <section className=\"topmetabar-list\">\n                <NavLink to=\"/\"\n                         className=\"metaItem\"\n                         exact={match.path === \"/about\"}\n                         activeClassName=\"metaActive\">\n                    🖥 blog\n                </NavLink>\n                <NavLink to=\"/about\"\n                         className=\"metaItem\"\n                         exact={match.path === \"/about\"}\n                         activeClassName=\"metaActive\">\n                    🙋‍♂️\n                    about me</NavLink>\n            </section>\n            {/*<div className=\"topmetabar-icons-box\">*/}\n            {/*   <GoMarkGithub className=\"icon-github\" onClick={() => {*/}\n            {/*      window.open(\"https://github.com/junggri\", \"_blank\");*/}\n            {/*   }} />*/}\n            {/*   <HiOutlineMail className=\"icon-mail\" onClick={() => {*/}\n            {/*      window.location.href = \"mailto:jjuu6933@naver.com\";*/}\n            {/*   }} />*/}\n            {/*   <Link to=\"/\">*/}\n            {/*      <CgHome className=\"icon-tohome\" />*/}\n            {/*   </Link>*/}\n            {/*</div>*/}\n        </TopMetaBarComp>\n    );\n}\n\nexport default TopMetaBar;","import React from \"react\";\nimport { SideBarComp, SideBarMetaDataComp, SideBarThunmbNailComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../../image/Logo.svg\";\nimport { SideNavBarTopic } from \"../index\";\nimport { IAllPost } from \"../../modules/Posts/posts.interface\";\n\ninterface ISideBarNavContainer {\n   topic: IAllPost\n   login: boolean\n}\n\n\nconst backGround = {\n   backgroundImage: `url(${logo})`,\n   backgroundSize: \"contain\",\n   backgroundPosition: \"50% 50%\",\n   backgroundRepeat: \"no-repeat\",\n};\n\nfunction SideBarNavContainer({ topic, login }: ISideBarNavContainer) {\n   return (\n      <SideBarComp>\n         <SideBarThunmbNailComp style={backGround} />\n         <SideBarMetaDataComp>\n            <div className=\"sidebar-names\">junggri</div>\n            <div className=\"sidebar-posi posi1\">backend engineer</div>\n            <div className=\"sidebar-posi posi2\">frontend engineer</div>\n         </SideBarMetaDataComp>\n         <SideNavBarTopic topic={topic} />\n         {login &&\n         <Link to=\"/write\">\n            <span className=\"write-article-btn\">새 글 쓰기</span>\n         </Link>\n         }\n         <div className=\"sidebar-divider\" />\n      </SideBarComp>\n   );\n}\n\nexport default React.memo(SideBarNavContainer);","import React from \"react\";\nimport {SideBarPostsContainerComp, SideBarPostsItemComp} from \"../../styled-comp\";\n\ninterface ISideBarNavContainer {\n    topic: any\n}\n\n\nfunction SideNavBarTopic({topic}: ISideBarNavContainer) {\n    return (\n        <SideBarPostsContainerComp>\n            <div className=\"sidebar-list\">\n                <span>전체목록</span>\n                <span>({Object.values(topic.data).flat().length})</span>\n            </div>\n            {Object.keys(topic.data).map((e: string) => (\n                <SideBarPostsItemComp to={`/topic/${e}`} key={e}>\n                    <div>\n                        <span className=\"topic_list_items\">{e}</span>\n                        <span className=\"topic_length\">({topic.data[e].length})</span>\n                    </div>\n                </SideBarPostsItemComp>\n            ))}\n        </SideBarPostsContainerComp>\n    );\n}\n\nexport default React.memo(SideNavBarTopic);","import React, {useEffect} from \"react\";\nimport {SpecificTopicContainerComp, SpecificTopicItemsComp} from \"../../styled-comp\";\nimport {IPostCommonProps, IPostsProps} from \"../../modules/Posts/posts.interface\";\nimport {Link} from \"react-router-dom\";\n\ninterface ISpecificTopicContainer {\n    width: number;\n    match: any\n    onGetPosts: (params: string) => void\n    posts: IPostsProps\n\n}\n\nfunction SpecificTopicContainer({width, match, onGetPosts, posts}: ISpecificTopicContainer) {\n    const params = match.params.topic;\n\n    useEffect(() => {\n        onGetPosts(params);\n    }, [params, onGetPosts]);\n\n    if (!posts.data) return null;\n\n    return (\n        <SpecificTopicContainerComp width={width}>\n            {posts.data.map((e: IPostCommonProps) => (\n                <SpecificTopicItemsComp key={e.uid}>\n                    <span className=\"item-created\">🗓 {e.created}</span>\n                    <Link to={`/topic/${e.topic}/${e.uid}`}>\n                        <div className=\"item-contentName\">\n                            {e.content_name}\n                        </div>\n                    </Link>\n                    <div className=\"item-detail\">🔮 {e.detail}</div>\n                </SpecificTopicItemsComp>\n                // <SpecificTopicItemsComp key={e.uid} to={`/topic/${e.topic}/${e.uid}`}>\n                //    <span className=\"item-created\">{e.created}</span>\n                //    <div className=\"item-contentName\">{e.content_name}</div>\n                //    <div className=\"item-detail\">{e.detail}</div>\n                //    <section className=\"posts-keyword-box\">\n                //       <span className=\"posts-keywords\">\n                //          <span>\n                //             {e.topic}\n                //          </span>\n                //       </span>\n                //    </section>\n                // </SpecificTopicItemsComp>\n            ))}\n        </SpecificTopicContainerComp>\n    );\n}\n\nexport default SpecificTopicContainer;","import React from 'react'\nimport {AboutContainerComp} from \"../../styled-comp\";\n\ninterface IAboutContainer {\n    width: number\n}\n\nfunction AboutContainer({width}: IAboutContainer) {\n    return (\n        <AboutContainerComp width={width}>\n            <div className=\"icons\" style={{\n                fontSize: \"17rem\",\n                textAlign: 'center'\n            }}>🔥 💻 🖥 🖱\n            </div>\n            <div className=\"detail\" style={{\n                fontSize: \"2rem\",\n                textAlign: 'center',\n                marginTop: '100px'\n            }}>업데이트 예정입니다.\n            </div>\n        </AboutContainerComp>\n    )\n}\n\nexport default AboutContainer","import React, { useEffect } from \"react\";\nimport useCommon from \"./useCommon\";\nimport util from \"../lib/axios\";\n\nfunction LoginFlag() {\n   const { onSetLogin } = useCommon();\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.checkJWTToken();\n         data.decoded ? onSetLogin(true) : onSetLogin(false);\n      })();\n   }, [onSetLogin]);\n\n}\n\nexport default LoginFlag;","import React, {useEffect} from \"react\";\nimport {EntryContainerComp} from \"../../styled-comp\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport {ICommonModuleProps} from \"../../modules/Common/common.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport {IPostsModuleProps} from \"../../modules/Posts/posts.interface\";\nimport {AboutContainer, EntryPostsContainer, SideBarContainer, SpecificTopicContainer} from \"component/index\";\nimport {Route} from \"react-router-dom\";\nimport useLoginFlag from \"../../useHooks/useLoginFlag\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport TopMetaBar from \"./TopMetaBar\";\n\nfunction CommonEntry({match}: any) {\n    const csrf = useCSRF();\n    const {width, login, newRequest, setNewRequset}: ICommonModuleProps = useCommon();\n    const {AllPosts, posts, getPosts, deletePost, getAllPosts}: IPostsModuleProps = usePosts();\n\n\n    useEffect(() => {\n        if (newRequest) {\n            getAllPosts();\n            setNewRequset(false);\n        }\n    }, [getAllPosts, newRequest, setNewRequset]);\n\n\n    useLoginFlag();\n\n    if (!AllPosts.data) return null\n\n    return (\n        <EntryContainerComp width={width}>\n            <TopMetaBar width={width} match={match}/>\n            {match.path !== \"/about\" ? <SideBarContainer topic={AllPosts} login={login}/> : null}\n            <Route path=\"/\" exact render={() => (\n                <EntryPostsContainer\n                    width={width}\n                    posts={AllPosts}\n                    deletePost={deletePost}\n                    getAllPosts={getAllPosts}\n                    login={login}\n                    csrf={csrf}\n                />\n            )}/>\n            <Route path=\"/topic/:topic\" exact render={() => (\n                <SpecificTopicContainer\n                    width={width}\n                    match={match}\n                    onGetPosts={getPosts}\n                    posts={posts}\n                />\n            )}/>\n            <Route path=\"/about\" exact render={() => (\n                <AboutContainer\n                    width={width}\n                />\n            )}/>\n        </EntryContainerComp>\n    );\n}\n\nexport default CommonEntry;","import React from \"react\";\nimport CommonEntry from \"../component/Home/CommonEntry\";\n\n\nconst Entry = ({ match }: any) => {\n   return (\n      <>\n         <CommonEntry match={match} />\n      </>\n   );\n};\n\nexport default Entry;\n","import React from \"react\";\nimport { Editor } from \"component\";\nimport \"../../node_modules/react-quill/dist/quill.snow.css\";\n\n\nfunction TextEditor({ history }: any) {\n   return <Editor history={history} />;\n}\n\nexport default TextEditor;\n","import React from \"react\";\nimport { PostsContainer } from \"../component\";\n\nfunction Posts({ match }: any) {\n\n   return (\n      <PostsContainer match={match} />\n   );\n}\n\nexport default Posts;","import React, {useRef, useState} from \"react\";\nimport {AdminLoginBoxComp} from \"../styled-comp\";\nimport util from \"../lib/axios\";\nimport useCSRF from \"../useHooks/useCSRF\";\n\nfunction Admin({history}: any) {\n    const [user, setUser] = useState({\n        id: process.env.NODE_ENV === \"development\" ? \"jjuu6933\" : \"\",\n        pwd: process.env.NODE_ENV === \"development\" ? \"wowwjd12!@\" : \"\",\n        number: process.env.NODE_ENV === \"development\" ? \"1\" : \"\",\n    });\n\n    const [visivle, setVisible] = useState<boolean>(false);\n    const [number, setNumber] = useState<number>(0);\n    const [certification, setCertification] = useState<boolean>(false);\n    const count = useRef(0);\n\n    const csrf = useCSRF();\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUser(state => ({\n            ...state,\n            [e.target.name]: e.target.value,\n        }));\n    };\n\n    const onSubmit = async () => {\n        // console.log(count.current);TODO 3번이상일때 디비에 잠금걸자.\n        setVisible(true);\n        const {data} = await util.adminLogin(user, csrf);\n        if (!data.state) count.current++;\n        else {\n            setCertification(true);\n        }\n        setNumber(data.number);\n    };\n\n    const onCertificationPhone = async () => {\n        if (parseInt(user.number, 10) === number && certification) {\n            await util.setJwtToken(csrf);\n            history.push(\"/\");\n        } else {\n            count.current++;\n        }\n    };\n\n\n    return (\n        <AdminLoginBoxComp>\n            <div className=\"login-inputbox\">\n                <input type=\"text\" name=\"id\" value={user.id} placeholder=\"아이디\" onChange={onChange}/>\n                <input type=\"password\" name=\"pwd\" value={user.pwd} placeholder=\"비밀번호\" onChange={onChange}/>\n            </div>\n            {visivle &&\n            <div className=\"certification-numberBox\">\n                <input type=\"text\" value={user.number} name=\"number\" onChange={onChange}/>\n                <button onClick={onCertificationPhone}>\n                    확인하기\n                </button>\n            </div>\n            }\n            <button className=\"login-btn\" onClick={onSubmit}>\n                인증시작하기\n            </button>\n        </AdminLoginBoxComp>\n    );\n}\n\nexport default Admin;","import React from \"react\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport {Admin, Entry, Posts, TextEditor} from \"pages\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div id=\"App\">\n                <Switch>\n                    <Route path=\"/\" exact component={Entry}/>\n                    <Route path=\"/about\" exact component={Entry}/>\n                    <Route path=\"/topic/:topic\" exact component={Entry}/>\n                    <Route path=\"/topic/:topic/:postsId\" exact component={Posts}/>\n                    <Route path=\"/write\" component={TextEditor}/>\n                    <Route path=\"/admin/leejeongsoo\" component={Admin}/>\n                    <Route render={() => <h1>Not found</h1>}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport posts from \"./Posts\";\nimport common from \"./Common\";\nimport topic from \"./Topic\";\nimport textEdit from \"./TextEditor\";\n\nconst rootReducer = combineReducers({ posts, common, topic, textEdit });\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","const TokenMiddleWare = (store: any) => (next: any) => (action: any) => {\n   next(action);\n};\n\nexport default TokenMiddleWare;","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../modules\";\nimport Thunk from \"redux-thunk\";\nimport TokenMiddleWare from \"../middleWare/TokenMiddleWare\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\n\nconst middleWares = [Thunk, TokenMiddleWare];\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleWares)));\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./shared/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./lib/store\";\nimport \"../src/styles/highlight/atom-one-light.css\";\n\n\nReactDOM.render(\n   <>\n      <Provider store={store}>\n         <GlobalStyles />\n         <App />\n      </Provider>\n   </>,\n   document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}