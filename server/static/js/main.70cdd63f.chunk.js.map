{"version":3,"sources":["reportWebVitals.ts","styles/GlobalStyles.tsx","serviceWorkerRegistration.ts","styled-comp.tsx","modules/Common/index.ts","useHooks/useCommon.tsx","config/axois.config.ts","lib/axios.ts","modules/Topic/index.ts","useHooks/useTopic.tsx","modules/Posts/lib/PostsUtil.ts","modules/Posts/index.ts","useHooks/usePosts.tsx","modules/Posts/lib/PostsAction.ts","component/TextEditor/SelectTopic.tsx","component/TextEditor/WriteTopicName.tsx","config/textEditor.config.ts","modules/TextEditor/index.ts","useHooks/useTextEdit.tsx","useHooks/useCSRF.tsx","component/TextEditor/Editor.tsx","component/TextEditor/TextEditBtnBox.tsx","component/TextEditor/SelectKindOfPosts.tsx","component/TextEditor/PostsDetail.tsx","component/TextEditor/CreateNewTopic.tsx","component/Content/PostsContainer.tsx","component/Content/EntryPostsContainer.tsx","image/Logo.svg","component/Home/SideNavBar.tsx","component/Home/SideNavBarTopic.tsx","component/Content/SpecificTopicContainer.tsx","useHooks/useLoginFlag.tsx","component/Home/CommonEntry.tsx","pages/Entry.tsx","pages/TextEditor.tsx","pages/Posts.tsx","pages/Admin.tsx","shared/App.tsx","modules/index.ts","middleWare/TokenMiddleWare.ts","lib/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","reset","window","innerHeight","Boolean","location","hostname","match","postsContainerMxin","css","props","width","postsItemMixin","lighten","EntryContainerComp","styled","div","SideBarComp","section","SideBarThunmbNailComp","SideBarMetaDataComp","SideBarPostsContainerComp","ul","SideBarPostsItemComp","NavLink","EntryPostsContainerComp","EntryPostsItemComp","SpecificTopicContainerComp","SpecificTopicItemsComp","PostsContainerComp","AdminLoginBoxComp","logo","WriteBox","WriteConditionBox","memo","WriteBtnBoxComp","WriteBtnComp","button","darken","SelectTopicBoxComp","SelectTopicItemComp","CreateNewTopicComp","CreateNewTopicListBoxComp","DeleteTopicIconComp","AddTopicBtnComp","CreateNewTopicListItemComp","SelectKindOfPostsBoxComp","SelectKindOfPosts","PostsDetailComp","SET_IS_LOGIN","NEW_REQUEST","initialState","screen","login","loading","newRequest","e","useCommon","dispatch","useDispatch","useSelector","state","common","onSetLogin","useCallback","type","payload","setNewRequset","dotenv","instance","axios","create","withCredentials","defaults","headers","interceptors","request","use","config","err","Promise","reject","util","getCSRTtoken","url","method","getTopicName","savePost","data","token","getAllPostsItems","getPostFromParams","parmas","getPostFromPostId","topic","postsId","deleteTopic","topicName","deletePost","uid","makeNewTopic","newTopic","adminLogin","setToken","checkJWTToken","GET_TOPIC","GET_TOPIC_SUCCESS","GET_TOPIC_ERROR","onReqTopicsName","getState","a","error","useTopic","makeOrDeleteAndReqNewTopics","requestTopic","reducerUtil","prevState","createThunk","cb","SUCCESS","ERROR","parameter","params","handleAction","key","keepData","action","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","GET_ALL_POSTS","GET_ALL_POSTS_SECCUESS","GET_ALL_POSTS_ERROR","DELETE_POST","CLEAR_POST","onRequestPosts","onRequsetPost","onRequestAllPosts","posts","post","AllPosts","usePosts","getPosts","getPost","getAllPosts","onDeletePost","onClearPost","SelectTopic","onIsChecked","onChange","target","value","className","map","v","id","name","htmlFor","React","WriteTopicName","onNameChange","placeholder","hljs","configure","languages","modules","syntax","highlight","text","highlightAuto","toolbar","font","size","color","background","align","list","indent","formats","SET_CONTENT","SET_CONTENT_NAME","SET_TOPIC","SET_KIND_OF_POSTS","SET_DETAIL","contentName","content","kindOfPosts","detail","TextEditor","useTextEdit","textEdit","setContent","onSetContent","setContentName","onSetContentName","setTopic","onSetTopic","setKindOfPosts","kindOf","setDetail","onSetDetail","CSRF","useState","csrf","setCsrf","useEffect","Editor","history","push","useCSRF","ref","useRef","current","focus","rteChange","delta","source","editor","onCheckKindOfPosts","onChangeDetail","onMakeOrDelteTopic","onSubmit","alert","result","theme","onCheck","TextEditBtnBox","onClick","SelectKindOfPost","PostsDetail","setValue","CreateNewTopic","click","setClick","setNewtopic","confirm","currentTarget","dataset","data-topic","DOMPurify","createDOMPurify","PostsContainer","to","content_name","language","dangerouslySetInnerHTML","__html","sanitize","created","EntryPostsContainer","onModified","console","log","onDelete","parentNode","newPostsState","filter","item","data-id","backGround","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","SideBarNavContainer","style","open","href","SideNavBarTopic","Tables_in_contents","SpecificTopicContainer","onGetPosts","LoginFlag","decoded","CommonEntry","useLoginFlag","path","exact","render","Entry","Posts","Admin","pwd","number","user","setUser","visivle","setVisible","setNumber","certification","setCertification","count","onCertificationPhone","parseInt","App","component","rootReducer","combineReducers","TokenMiddleWare","store","next","middleWares","Thunk","createStore","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.70cdd63f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst GlobalStyles = createGlobalStyle`\n ${reset}\n    *{\n        box-sizing:border-box;\n    }\n    body,html{\n        font-size:14px;\n        font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", \"Apple SD Gothic Neo\", \"Malgun Gothic\", \"맑은 고딕\", 나눔고딕, \"Nanum Gothic\", \"Noto Sans KR\", \"Noto Sans CJK KR\", arial, 돋움, Dotum, Tahoma, Geneva, sans-serif !important;\n        //background-color:#F9F9FB;\n        color:rgb(36, 41, 46);\n        position:relative;\n        height:100%;\n    }\n    a{\n        text-decoration:none;\n        color:inherit;\n        cursor: pointer;\n    }\n    ol, ul, li {\n        list-style: none;\n    }\n    img {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n    input, button {\n        background-color: transparent;\n    }\n    h1, h2, h3, h4, h5, h6 {\n    font-family:'Maven Pro', sans-serif;\n    }\n  \n    b { \n        font-weight: bold !important; \n    }\n    i { \n        font-style : italic;\n    }\n    .quill{\n        height: ${window.innerHeight - 100 + \"px\"};\n    }\n    .quill img{\n        height: auto;\n        width:auto;\n        max-height: 700px;\n        position: relative;\n        margin :0 auto;\n    }\n    .ql-container.ql-snow{\n        border:none; \n    } \n    .ql-size-huge{\n        font-size:4rem !important;\n    }\n    .content-title{\n        width:100%;\n        height:100px;\n        resize:none;\n        border:none;\n        outline-style:none;\n        padding:25px;\n        font-size:3rem;\n    }\n    .writeBox-inputs{\n        border:1px solid black;\n        width:50%;\n        border: 1px solid rgba(0, 0, 0, 0.2);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }\n    .content-title::placeholder{\n        font-size:3rem;\n        font-style:italic\n    }\n    .preview-title{\n        border:1px solid black;\n        font-size:3rem;\n        word-break:break-all;\n        margin-bottom:100px;\n    }\n    .ql-container.ql-snow{\n        height:90%\n    }\n    \n    .ql-syntax{\n     font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n     padding:30px 30px; \n     border-radius: 4px;\n     font-size: 0.875rem;\n     background: rgb(248 249 250);\n     font-weight: 300 !important;\n     & span{\n     //color:rgb(36, 41, 46);\n        font-weight:300 !important;\n      }\n    }\n     pre.ql-syntax {\n      white-space: pre-wrap !important;\n     }\n    .ql-toolbar.ql-snow{\n        border-left:none;\n        border-right:none;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n    }   \n    .hljs-function{\n      .hljs-keyword{\n         color:rgb(36, 41, 46);\n      }\n      .hljs-params{\n         color:rgb(36, 41, 46);\n      }\n    }\n     //.xml{\n     //  .hljs-name,.hljs-tag{\n     //     color:rgb(36, 41, 46);\n     //  }\n     //}\n     .hljs-params,.hljs-attr,{\n      color:rgb(36, 41, 46) \n     }\n     .react{\n      background: white;\n     }\n\n`;\n\nexport default GlobalStyles;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled, { css } from \"styled-components\";\nimport { darken, lighten } from \"polished\";\nimport React, { memo } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport interface Width {\n   width: number;\n}\n\nexport interface topView {\n   width: number;\n   logo: any\n   ref: any\n}\n\nexport interface contentBox {\n   ref: any;\n}\n\ninterface IDeleteTopicIconComp {\n   onClick: any\n}\n\ninterface ISideBarThunmbNailComp {\n   style: any\n}\n\n//INTERFACE\n//위의 인터페이스는 컴포넌트가 가지는 PROPS의 인터ㅔ이스\n\nconst leftWidth = 320;\nconst rightWidth = 180;\n\ninterface IEntryContainerComp {\n   width: number\n}\n\nconst postsContainerMxin = css<Width>`\n  padding-top:60px;\n  padding-left:55px;\n  padding-right:20px;\n  position: absolute;\n  right:0;\n  width:${props => props.width - leftWidth + \"px\"};\n  margin-bottom:60px;\n`;\n\nconst postsItemMixin = css`\n  display: block;\n  position:relative;\n  margin-bottom:60px;\n  & .item-created{\n    display: inline-block;\n    font-size:1.1rem;\n    font-weight: 600;\n    opacity: 0.8;\n  }\n  & .item-contentName{\n    font-size:2.7rem;\n    margin-top:6px;\n    letter-spacing: 2px;\n    white-space:nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    padding:6px 0;\n  }\n  & .item-detail{\n    font-size:1.2rem;\n    margin-top:40px;\n  }\n  & .posts-keyword-box{\n    margin-top:20px;\n    & .posts-keywords{\n      transition: 0.3s all;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    }\n    & .posts-keywords:hover{\n      background: ${lighten(0.07, \"#f58320\")};\n    }\n  }\n  & .posts-keywords{\n    background: #f58320;\n    color:white;\n    display: inline-block;\n    padding:4px 12px;\n    border-radius: 15px;\n    letter-spacing: 1.2px;\n  }\n  & .posts-admin-box{\n    position: absolute;\n    right:0;\n    bottom:0;\n    z-index: 9;\n    span{\n      vertical-align: middle;\n      font-size:1.6rem;\n      opacity: 0.6;\n      margin-left:12px;\n      transition: 0.3s all;\n    }\n    span:hover{\n      opacity: 1;\n      cursor: pointer;\n    }   \n  }\n`;\n\nexport const EntryContainerComp = styled.div<IEntryContainerComp>`\n  width:${props => props.width + \"px\"};\n  position:relative;\n  margin:0 auto;\n`;\n\nexport const SideBarComp = styled.section`\n  display: inline-block;\n  height: 100vh;\n  position: fixed;\n  width:320px; \n  & .sidebar-icons-box{\n    font-size:1.7rem;\n    display: flex;\n    margin-top:60px;\n    cursor: pointer;\n    & .icon-github,.icon-tohome,.icon-mail{\n      display: inline-block;\n      margin-right:18px;\n    }\n  }\n  & .sidebar-copyright{\n    position: absolute;\n    bottom:20%;\n    letter-spacing: 1.1px;\n    font-size:12px;\n  }\n  & .write-article-btn {\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    display: inline-block;\n    padding: 7px 20px;\n    border-radius: 10px;\n    font-size: 14px;\n    font-weight: 100;\n    transition: all 0.2s;\n    margin-top:20px;\n   }\n  & .write-article-btn:hover {\n    cursor: pointer;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n  //& .sidebar-divider{\n  //  width:2px;\n  //  position: absolute;\n  //  left:95%;\n  //  top:0;\n  //  height: 600px;\n  //  background: linear-gradient(rgb(230, 230, 230)0px, rgb(230, 230, 230)48%, rgb(255, 255, 255));\n  //}\n`;\n\n\nexport const SideBarThunmbNailComp = styled.div<ISideBarThunmbNailComp>`\n  border:1px solid rgba(0,0,0,0.06);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  position: relative;\n  width:35%;\n  padding-bottom: 35%;\n  border-radius: 5px;\n  margin-top:60px;\n`;\n\nexport const SideBarMetaDataComp = styled.div`\n  margin-top:50px;\n  & .sidebar-names{\n    font-size:2rem;\n    letter-spacing: 1.2px;\n  }\n  & .sidebar-posi{\n    letter-spacing: 1.2px;\n    font-size:1rem;\n    font-weight: 300;\n    &.posi1{\n      margin-top:30px;\n    }\n    &.posi2{\n      margin-top:6px;\n    }\n  }\n`;\n\nexport const SideBarPostsContainerComp = (styled.ul`\n  margin-top:50px;\n  perspective: 600px;\n`);\n\nexport const SideBarPostsItemComp = styled(NavLink)<any>`\n  height: 16px;\n  display:block;\n  margin-bottom:10px;\n  transition: all 0.6s;\n  & span{\n    vertical-align: middle;\n    font-size:1.1rem;\n    font-weight: 300;\n    opacity:1;\n    &:hover{\n      text-decoration: underline;\n    }\n  }\n  &[aria-current] {\n    color: black;\n    & span{\n      opacity: 1;\n      font-weight: 300;\n    }\n  }\n\n`;\n\nexport const EntryPostsContainerComp = styled.div<Width>`\n  ${postsContainerMxin}\n`;\n\nexport const EntryPostsItemComp = styled.div`\n  ${postsItemMixin}'\n`;\n\nexport const SpecificTopicContainerComp = styled.ul`\n  ${postsContainerMxin};\n`;\nexport const SpecificTopicItemsComp = styled(NavLink)`\n  ${postsItemMixin}'\n`;\n\nexport const PostsContainerComp = styled.section<Width>`\n  position: relative;\n  margin: 0 auto;\n  width: ${(props) => props.width - 80 + \"px\"};\n  padding-bottom: 80px;\n  & .posts-container-iconbox{\n    padding:20px 20px;\n    font-size:1.5rem;\n  }\n  & img{\n    height:auto;\n    width:auto;\n    max-height: 700px;\n    position: relative;\n    margin :0 auto;\n  }\n  & .posts-name{\n    padding-top:50px;\n    font-size:3.5rem;\n    text-align: center;\n    font-weight: bold;\n  }\n  & .posts-detail{\n    text-align: center;\n    margin-top:20px;\n    font-size:1.2rem\n  }\n  & .posts-content{\n    word-break:break-all;\n    font-size:1.125rem;\n    margin-top:50px;    \n    & *{\n      white-space: pre-wrap !important;\n      word-break: break-all;\n      line-height: 2;\n    }\n  }\n  & .posts-created{\n    margin-top: 60px;\n    text-align: right;\n    font-size:1rem;\n    font-weight:100;\n  }\n`;\n// & .posts-content{\n//    word-break:break-all;\n//    line-height: 1.5;\n//    padding: 10px 10px;\n//    border-radius: 5px;\n// & img{\n//       height:auto;\n//       width:auto;\n//       max-height: 500px;\n//       position: relative;\n//       margin :0 auto;\n//    }\n// }\n\nexport const TopCommonSectionComp = (styled.div<topView>`\n   position: relative;\n   margin: 0 auto;\n   width: ${(props) => props.width + \"px\"};\n   height: 280px;\n   max-width: ${(props) => props.width + \"px\"};\n   background-image: url(${props => props.logo});\n   background-repeat:no-repeat ;\n   background-size: contain;\n   background-position: 50% 40%;\n   & .write-article-btn {\n      border: 1px solid rgba(0, 0, 0, 0.2);\n      display: inline-block;\n      padding: 7px 20px;\n      border-radius: 10px;\n      font-size: 14px;\n      font-weight: 100;\n      position: absolute;\n      bottom: 30px;\n      right: 30px;\n      transition: all 0.2s;\n   }\n   & .write-article-btn:hover {\n      cursor: pointer;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   }\n   @media (max-width: 1024px) {\n      width:768px;\n   }\n   @media(max-width:768px){\n      width:100%;\n   }\n`);\n\n\n//\nexport const AdminLoginBoxComp = styled.div`\n  position: absolute;\n  width:30%;\n  left:50%;\n  top:40%;\n  transform: translate(-50%,-50%);\n  & .login-inputbox{\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n    & input{\n      padding:15px 10px;\n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n    }\n  }\n  & .login-btn{\n    border:1px solid rgb(0,0,0,0.2);\n    width:100%;\n    height: 57px;\n    outline-style: none;\n    cursor: pointer;\n  }\n  & .certification-numberBox{ \n    display: flex;\n    button{\n      border:1px solid rgba(0,0,0,0.2);\n      outline-style: none;\n      height: 40px;\n      font-size: 12px;\n      letter-spacing: 1.2px;\n      cursor: pointer ;\n    }\n    input{\n      height: 40px;  \n      outline-style: none;\n      border:1px solid rgba(0,0,0,0.2);\n      margin-bottom: 20px;\n      margin-right: 15px;\n      font-size: 1rem;\n      padding-left: 10px;\n    }\n  }\n`;\n//--------------------------------write---------------------------------------\n\nexport const WriteBox = (styled.div`\n   position: absolute;\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   height: 100%;\n   width: 50%;\n   border-radius: 4px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   overflow: scroll;\n`);\n\nexport const WriteConditionBox = memo(styled.section`\n   position: absolute;\n   right: 0;\n   width: 50%;\n   height: 100%;\n   overflow: scroll;\n`);\n\n\nexport const WriteBtnBoxComp = (styled.div`\n   padding-left:60px;\n   margin-top:30px;\n`);\n\nexport const WriteBtnComp = styled.button`\n   border: 1px solid rgba(0, 0, 0, 0.2);\n   padding: 15px 25px;\n   font-size: 17px;\n   border-radius: 4px;\n   letter-spacing: 1.2px;\n   transition: 0.3s all;\n   background: #a5d8ff;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n   color: black;\n   font-weight: 300;\n   margin-right: 30px;\n   &:hover {\n      cursor: pointer;\n      background-color: ${darken(0.1, \"#a5d8ff\")};\n   }\n   \n`;\n\n\nexport const SelectTopicBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\nexport const SelectTopicItemComp = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const CreateNewTopicComp = styled.div`\n   padding-top:20px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:20px;\n    margin-bottom: 20px;\n   }\n   & .add-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-top: 10px;\n   }\n   & .add-new-topic-btn:hover{\n    color: gray;\n   } \n`;\n\nexport const CreateNewTopicListBoxComp = styled.div`\n  width:180px;\n`;\n\nexport const DeleteTopicIconComp = styled.div<IDeleteTopicIconComp>`\n  display: flex;\n  font-size:20px;\n  cursor: pointer;\n  opacity: 0;\n  color: #dee2e6;\n  & :hover{\n    color:#ff6b6b;\n  }\n`;\n\nexport const AddTopicBtnComp = styled.div`\n  display: flex;\n  align-items: center;\n  & input{\n    padding:8px;\n    border:1px solid rgba(0,0,0.6);\n  }\n  & .make-new-topic-btn{\n    color: #dee2e6;\n    font-size:30px;\n    cursor: pointer;\n    margin-left: 15px;\n  }\n  & .make-new-topic-btn:hover{\n    color: gray;\n  } \n`;\n\nexport const CreateNewTopicListItemComp = styled.div`\n  margin-bottom:15px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  & span{\n    display: inline-block;\n    width:70%;\n    font-size:22px;\n    font-weight: 100;\n  }\n  &:hover{\n    ${DeleteTopicIconComp}{\n      opacity: 1;\n    }\n  }\n`;\n\n\nexport const SelectKindOfPostsBoxComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & .post-select-box{\n   display: flex;\n   flex-wrap: wrap;\n   }\n   & h1{\n   font-size:1.7rem;\n   margin-bottom:40px;\n   }\n`;\n\n\nexport const SelectKindOfPosts = styled.div`\n  width:150px;\n  margin-bottom: 40px;\n  padding:0;\n  display: flex;\n  align-items: center;\n  & .select-input{\n    width:100px;\n    display: inline-block; \n    width:20px;\n    height: 20px;\n    margin-right: 15px;\n  }\n  & .select-label{\n    font-weight: 300;\n    margin-top: -1px;\n    font-size:120%;\n    cursor: pointer;\n  }\n`;\n\nexport const PostsDetailComp = styled.div`\n   padding-top:50px;\n   padding-left:60px;\n   padding-right: 60px;\n   & h1{\n    font-size:1.7rem;\n    margin-bottom: 30px;\n   }\n   & input{\n    width:100%;\n    height: 50px;\n    outline-style: none;\n    border:none;\n    border-radius: 5px;\n    background-color: ${lighten(0.1, \"#a5d8ff\")};\n   }\n`;\n\n//--------------------------------write---------------------------------------\n","import { ICommonAction, ICommonState } from \"./common.interface\";\n\n\nexport const SET_IS_LOGIN = \"common/SET_IS_LOGIN\";\n\nexport const NEW_REQUEST = \"common/NEW_REQUEST\";\n\nexport const onSetIsLogin = (payload: boolean) => ({ type: SET_IS_LOGIN, payload });\n\nexport const onNewRequset = (payload: boolean) => ({ type: NEW_REQUEST, payload: payload });\n\n// typescript는 const를 이해하므로(typeof CHECK_GUESTBOOK은 string이 아니라 'CHECK_GUESTBOOK'입니다)\n// 액션 이름을 그대로 쓰셔도 됩니다.\n\n//thunk 생성함\n\n\nconst initialState: ICommonState = {\n   width: window.screen.width * 0.61,\n   login: false,\n   loading: false,\n   newRequest: true,\n   e: null,\n};\n\n\nexport default function common(state: ICommonState = initialState, action: ICommonAction): ICommonState {\n   switch (action.type) {\n      case SET_IS_LOGIN:\n         return {\n            ...state,\n            login: action.payload as boolean,\n         };\n      case NEW_REQUEST:\n         return {\n            ...state,\n            newRequest: action.payload as boolean,\n         };\n      default:\n         return state;\n   }\n}","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onNewRequset, onSetIsLogin } from \"../modules/Common\";\n\nexport default function useCommon() {\n   const dispatch = useDispatch();\n\n   const { width, login, loading, newRequest, e } = useSelector((state: RootState) => state.common);\n\n   const onSetLogin = useCallback((state: boolean) => {\n      dispatch(onSetIsLogin(state));\n   }, [dispatch]);\n\n   const setNewRequset = useCallback((state: boolean) => {\n      dispatch(onNewRequset(state));\n   }, [dispatch]);\n   //state true mean state need new Request, false is opposite\n\n\n   return {\n      width,\n      login,\n      loading,\n      e,\n      onSetLogin,\n      newRequest,\n      setNewRequset,\n   };\n}","import axios from \"axios\";\n// import { cacheAdapterEnhancer } from \"axios-extensions\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst instance = axios.create({\n   withCredentials: true,\n});\ninstance.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n\ninstance.interceptors.request.use(\n   (config) => {\n      return config;\n   },\n   (err) => {\n      return Promise.reject(err);\n   },\n);\n\nexport default instance;\n","import instance from \"../config/axois.config\";\nimport { ITextInitialProps } from \"../modules/TextEditor/textEdit.interface\";\n\n\nconst util = {\n   getCSRTtoken() {\n      return instance({\n         url: \"/api/csrf\",\n         method: \"get\",\n      });\n   },\n\n\n   getTopicName() {\n      return instance({\n         url: \"/topic/contents/name\",\n         method: \"get\",\n      });\n   },\n\n   savePost(data: ITextInitialProps, token: string) {\n      return instance({\n         url: \"/topic/posts\",\n         method: \"post\",\n         data: data,\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   getAllPostsItems() {\n      return instance({\n         url: \"/topic/posts/items\",\n         method: \"get\",\n      });\n   },\n\n   getPostFromParams(parmas: string) {\n      return instance({\n         url: `/topic/posts/${parmas}`,\n         method: \"get\",\n      });\n   },\n\n   getPostFromPostId(topic: string, postsId: string) {\n      return instance({\n         url: `/topic/${topic}/posts/${postsId}`,\n      });\n   },\n\n\n   deleteTopic(topicName: string, token: string) {\n      return instance({\n         url: `/topic/:${topicName}`,\n         method: \"post\",\n         data: { topicName: topicName },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   deletePost(uid: string, topic: string, token: string) {\n      return instance({\n         url: `/topic/posts/item`,\n         method: \"post\",\n         data: { uid: uid, topic: topic },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   makeNewTopic(topicName: string, token: string) {\n      return instance({\n         url: `/topic/topicname/${topicName}`,\n         method: \"post\",\n         data: { newTopic: topicName },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   adminLogin(data: any, token: string) {\n      return instance({\n         url: \"/admin/login\",\n         method: \"post\",\n         data: { data },\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   setToken(token: string) {\n      return instance({\n         url: \"/admin/token\",\n         method: \"post\",\n         headers: { \"X-XSRF-TOKEN\": token },\n      });\n   },\n\n   checkJWTToken() {\n      return instance({\n         url: `/admin/token/jwt`,\n         method: \"get\",\n      });\n   },\n\n\n};\n\nexport default util;","import util from \"../../lib/axios\";\nimport { ITopicinitialState, TopicAction } from \"./topic.interface\";\n\nexport const GET_TOPIC = \"topic/GET_TOPIC\";\nexport const GET_TOPIC_SUCCESS = \"topic/GET_TOPIC_SUCCESS\";\nexport const GET_TOPIC_ERROR = \"topic/GET_TOPIC_ERROR\";\n\n\nexport const getTopic = () => ({ type: GET_TOPIC });\nexport const getTopicSuccess = (payload: any[]) => ({ type: GET_TOPIC_SUCCESS, payload });\nexport const getTopicError = (e: Error) => ({ type: GET_TOPIC_ERROR, e });\n\n\nexport const onReqTopicsName = () => async (dispatch: any, getState: any) => {\n   dispatch(getTopic());\n   try {\n      const { data } = await util.getTopicName();\n      dispatch(getTopicSuccess(data));\n   } catch (e) {\n      dispatch(getTopicError(e));\n   }\n};\n\n\nconst initialState = {\n   topic: null,\n   loading: false,\n   error: null,\n};\n\nexport default function Topic(state: ITopicinitialState = initialState, action: TopicAction) {\n   switch (action.type) {\n      case GET_TOPIC:\n         return {\n            ...state,\n            loading: true,\n         };\n      case GET_TOPIC_SUCCESS:\n         return {\n            ...state,\n            topic: action.payload,\n            loading: false,\n         };\n      case GET_TOPIC_ERROR:\n         return {\n            ...state,\n            error: action.error,\n         };\n      default :\n         return state;\n   }\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { useCallback } from \"react\";\nimport { onReqTopicsName } from \"../modules/Topic\";\n\nexport default function useTopic() {\n   const dispatch = useDispatch();\n   const { topic, loading, error } = useSelector((state: RootState) => state.topic);\n\n   const makeOrDeleteAndReqNewTopics = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n   const requestTopic = useCallback(() => {\n      dispatch(onReqTopicsName());\n   }, [dispatch]);\n\n\n   return { topic, loading, error, makeOrDeleteAndReqNewTopics, requestTopic };\n}","import { DataAction } from \"../posts.interface\";\n\ninterface IParameter {\n   params?: string\n   topic?: string\n   postsId?: string\n}\n\nexport const reducerUtil = {\n   initial: (initialState = null) => ({\n      loading: false,\n      data: initialState,\n      error: null,\n   }),\n\n   loading: (prevState = null) => ({\n      loading: true,\n      data: prevState,\n      error: null,\n   }),\n\n   success: (payload: any) => ({\n      loading: false,\n      data: payload,\n      error: null,\n   }),\n\n   error: (error: Error) => ({\n      loading: false,\n      data: null,\n      error: error,\n   }),\n};\n\n\nexport const createThunk = (type: string, cb: any) => {\n   const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n   return ({ ...parameter }: IParameter) => async (dispatch: any) => {\n      dispatch({ type: type });\n      try {\n         if (type === \"data/GET_POSTS\") {\n            const { data } = await cb(parameter.params);\n            dispatch({ type: SUCCESS, payload: data });\n         } else if (type === \"data/GET_POST\") {\n            const { data } = await cb(parameter.topic, parameter.postsId);\n            dispatch({ type: SUCCESS, payload: data });\n         } else {\n            const { data } = await cb();\n            dispatch({ type: SUCCESS, payload: data });\n         }\n      } catch (e) {\n         dispatch({ type: ERROR, error: e });\n      }\n   };\n};\n\n\nexport function handleAction(type: string, key: string, keepData?: boolean) {\n   const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n   return (state: any, action: DataAction) => {\n      switch (action.type) {\n         case type:\n            return {\n               ...state,\n               [key]: reducerUtil.loading(keepData ? state[key].data : null),\n            };\n         case SUCCESS:\n            return {\n               ...state,\n               [key]: reducerUtil.success(action.payload),\n            };\n         case ERROR:\n            return {\n               ...state,\n               [key]: reducerUtil.error(action.error),\n            };\n      }\n   };\n}","import util from \"../../lib/axios\";\nimport { createThunk, handleAction, reducerUtil } from \"./lib/PostsUtil\";\nimport { DataAction, IPostInitialState } from \"./posts.interface\";\n\nexport const GET_POSTS = \"data/GET_POSTS\";\nexport const GET_POSTS_SUCCESS = \"data/GET_POSTS_SUCCESS\";\nexport const GET_POSTS_ERROR = \"data/GET_POSTS_ERROR\";\n\nexport const GET_POST = \"data/GET_POST\";\nexport const GET_POST_SUCCESS = \"data/GET_POST_SUCCESS\";\nexport const GET_POST_ERROR = \"data/GET_POST_ERROR\";\n\nexport const GET_ALL_POSTS = \"data/GET_ALL_POSTS\";\nexport const GET_ALL_POSTS_SECCUESS = \"data/GET_ALL_POSTS_SUCCESS\";\nexport const GET_ALL_POSTS_ERROR = \"data/GET_ALL_POSTS_ERROR\";\n\nexport const DELETE_POST = \"data/DELETE_POST\";\nexport const CLEAR_POST = \"data/CLEAR_POST\";\n//액션 생성함수를 선언!\n\nexport const onRequestPosts = createThunk(GET_POSTS, util.getPostFromParams);\n\nexport const onRequsetPost = createThunk(GET_POST, util.getPostFromPostId);\n\nexport const onRequestAllPosts = createThunk(GET_ALL_POSTS, util.getAllPostsItems);\n\n\nconst initialState: IPostInitialState = {\n   posts: reducerUtil.initial(),\n   post: reducerUtil.initial(),\n   AllPosts: reducerUtil.initial(),\n};\n\n\nexport default function Posts(state: IPostInitialState = initialState, action: DataAction): IPostInitialState {\n   switch (action.type) {\n      case GET_POSTS:\n      case GET_POSTS_SUCCESS:\n      case GET_POSTS_ERROR:\n         return handleAction(GET_POSTS, \"posts\", true)(state, action);\n      case GET_POST:\n      case GET_POST_SUCCESS:\n      case GET_POST_ERROR:\n         return handleAction(GET_POST, \"post\", false)(state, action);\n      //특정 포스트 볼때 >>>이전 데이터를 가지고있으면 전의 데이터도 렌더링 되는 ㅇ형상떄문에 false로 로딩시 데이터를 유지하지 않게함\n      case GET_ALL_POSTS:\n      case GET_ALL_POSTS_SECCUESS:\n      case GET_ALL_POSTS_ERROR:\n         return handleAction(GET_ALL_POSTS, \"AllPosts\", true)(state, action);\n      case DELETE_POST:\n         return {\n            ...state,\n            AllPosts: {\n               data: action.payload,\n               loading: false,\n               error: null,\n            },\n         };\n      case CLEAR_POST:\n         return {\n            ...state,\n            post: reducerUtil.initial(null),\n         };\n      default :\n         return state;\n   }\n\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onRequestAllPosts, onRequestPosts, onRequsetPost } from \"../modules/Posts\";\nimport { useCallback } from \"react\";\nimport { clearPost, onDeletePost } from \"../modules/Posts/lib/PostsAction\";\nimport { IPostCommonProps } from \"../modules/Posts/posts.interface\";\n\nexport default function usePosts() {\n   const dispatch = useDispatch();\n   const { posts, post, AllPosts } = useSelector((state: RootState) => state.posts);\n\n   const getPosts = useCallback((params: string) => {\n      dispatch(onRequestPosts({ params }));\n   }, [dispatch]);\n\n   const getPost = useCallback((topic: string, postsId: string) => {\n      dispatch(onRequsetPost({ topic, postsId }));\n   }, [dispatch]);\n\n   const getAllPosts = useCallback(() => {\n      dispatch(onRequestAllPosts({}));\n   }, [dispatch]);\n\n   const deletePost = useCallback((posts: IPostCommonProps[]) => {\n      dispatch(onDeletePost(posts));\n   }, [dispatch]);\n\n   const onClearPost = useCallback(() => {\n      dispatch(clearPost());\n   }, [dispatch]);\n\n   return {\n      AllPosts,\n      posts,\n      post,\n      getPosts,\n      getPost,\n      deletePost,\n      getAllPosts,\n      onClearPost,\n   };\n}\n","import {\n   CLEAR_POST,\n   DELETE_POST,\n   GET_ALL_POSTS,\n   GET_ALL_POSTS_ERROR,\n   GET_ALL_POSTS_SECCUESS,\n   GET_POST,\n   GET_POST_ERROR,\n   GET_POST_SUCCESS,\n   GET_POSTS,\n   GET_POSTS_ERROR,\n   GET_POSTS_SUCCESS,\n} from \"../index\";\nimport { IPostCommonProps } from \"../posts.interface\";\n\nexport const clearPost = () => ({\n   type: CLEAR_POST,\n});\n\nexport const onDeletePost = (posts: IPostCommonProps[]) => ({\n   type: DELETE_POST,\n   payload: posts,\n});\n\nexport const onRequest = () => ({\n   type: GET_POSTS,\n});\n\nexport const onRequestSuccuess = (payload: any[]) => ({\n   type: GET_POSTS_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestError = (e: Error) => ({\n   type: GET_POSTS_ERROR,\n   error: e,\n});\n\nexport const onRequestPost = () => ({\n   type: GET_POST,\n});\n\nexport const onRequestPostSuccess = (payload: any[]) => ({\n   type: GET_POST_SUCCESS,\n   payload: payload,\n});\n\nexport const onRequestPostError = (e: Error) => ({\n   type: GET_POST_ERROR,\n   error: e,\n});\n\nexport const onRequsetAllPosts = () => ({\n   type: GET_ALL_POSTS,\n});\n\nexport const onRequsetAllPostsSuccess = (payload: any[]) => ({\n   type: GET_ALL_POSTS_SECCUESS,\n   payload: payload,\n});\n\nexport const onRequestAllPostsError = (e: Error) => ({\n   type: GET_ALL_POSTS_ERROR,\n   error: e,\n});\n\n","import React, { ChangeEvent } from \"react\";\nimport { SelectTopicBoxComp, SelectTopicItemComp } from \"../../styled-comp\";\nimport { ISelectopicProps } from \"../../interface/index.interface\";\n\n\nfunction SelectTopic({ topic, onIsChecked }: ISelectopicProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onIsChecked(e.target.value);\n   };\n\n   if (topic === null) return null;\n\n   return (\n      <SelectTopicBoxComp>\n         <h1>토픽을 선택해주세요</h1>\n         <div className=\"post-select-box\">\n            {topic.map((v: { Tables_in_contents: string }) => (\n               <SelectTopicItemComp key={v[\"Tables_in_contents\"]}>\n                  <input className=\"select-input\" type=\"radio\" id={v[\"Tables_in_contents\"]} onChange={onChange}\n                         value={v[\"Tables_in_contents\"]} name='post' />\n                  <label className=\"select-label\"\n                         htmlFor={v[\"Tables_in_contents\"]}>{v[\"Tables_in_contents\"]}</label>\n               </SelectTopicItemComp>\n            ))}\n         </div>\n      </SelectTopicBoxComp>\n   );\n}\n\nexport default React.memo(SelectTopic);","import React from \"react\";\n\nconst WriteTopicName = ({ onNameChange }: { onNameChange: any }) => {\n   const onChange = (e: any) => {\n      onNameChange(e.target.value);\n   };\n\n   return (\n      <>\n         <textarea name=\"content-title\" placeholder=\"제목\" className=\"content-title\" onChange={onChange} />\n      </>\n   );\n};\n\nexport default React.memo(WriteTopicName);","import \"highlight.js/styles/a11y-light.css\";\nimport hljs from \"highlight.js\";\n\nhljs.configure({\n   languages: [\"javascript\", \"react\", \"typescript\", \"css\", \"html\", \"Node REPL\"],\n});\n\nexport const modules = {\n   syntax: {\n      highlight: (text: any) => hljs.highlightAuto(text).value,\n   },\n   toolbar: [\n      // [{ header: \"1\" }, { header: \"2\" }],\n      [{ font: [] }],\n      [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n      [\"bold\", \"italic\", \"underline\", \"strike\"],\n      [\"blockquote\", \"code-block\"],\n      [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n      [{ align: [] }],\n      [{ list: \"ordered\" }, { list: \"bullet\" }, { indent: \"-1\" }, { indent: \"+1\" }],\n      [\"link\", \"image\", \"video\"],\n   ],\n};\n\n\nexport const formats = [\"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\",\n   \"code-block\", \"color\", \"background\", \"align\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"blockquote\", \"video\", \"insert\"];\n\n\n// const bold = Quill.import(\"formats/bold\");\n// bold.tagName = \"b\"; // Quill uses <strong> by default\n// Quill.register(bold, true);\n//\n// const italic = Quill.import(\"formats/italic\");\n// italic.tagName = \"i\"; // Quill uses <em> by default\n// Quill.register(italic, true);\n","// 액션 타입을 선언합니다\n// 뒤에 as const 를 붙여줌으로써 나중에 액션 객체를 만들게 action.type 의 값을 추론하는 과정에서\n// action.type 이 string 으로 추론되지 않고 'counter/INCREASE' 와 같이 실제 문자열 값으로 추론 되도록 해줍니다.\nimport { EditorAction, ITextInitialProps } from \"./textEdit.interface\";\n\nconst SET_CONTENT = \"textEdit/SET_CONTENT\" as const;\nconst SET_CONTENT_NAME = \"textEdit/SET_CONTENT_NAME\" as const;\nconst SET_TOPIC = \"textEdit/SET_TOPIC\" as const;\nconst SET_KIND_OF_POSTS = \"textEdit/SET_KIND_OF_POSTS\" as const;\nconst SET_DETAIL = \"textEdit/SET_DETAIL\" as const;\n\n\nexport const onSetContent = (content: string) => ({ type: SET_CONTENT, payload: content });\nexport const onSetContentName = (contentName: string) => ({ type: SET_CONTENT_NAME, payload: contentName });\nexport const onSetTopic = (topic: string) => ({ type: SET_TOPIC, payload: topic });\nexport const onSetKindOfPosts = (kindOfPosts: string) => ({ type: SET_KIND_OF_POSTS, payload: kindOfPosts });\nexport const onSetDetail = (detail: string) => ({ type: SET_DETAIL, payload: detail });\n\n\nconst initialState: ITextInitialProps = {\n   contentName: \"\",\n   content: \"\",\n   topicName: \"\",\n   kindOfPosts: \"\",\n   detail: \"\",\n};\n\n\nfunction TextEditor(state: ITextInitialProps = initialState, action: EditorAction): ITextInitialProps {\n   switch (action.type) {\n      case SET_CONTENT:\n         return {\n            ...state,\n            content: action.payload,\n         };\n      case SET_CONTENT_NAME:\n         return {\n            ...state,\n            contentName: action.payload,\n         };\n      case SET_TOPIC:\n         return {\n            ...state,\n            topicName: action.payload,\n         };\n      case SET_KIND_OF_POSTS:\n         return {\n            ...state,\n            kindOfPosts: action.payload,\n         };\n      case SET_DETAIL:\n         return {\n            ...state,\n            detail: action.payload,\n         };\n      default:\n         return state;\n   }\n\n}\n\nexport default TextEditor;","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { onSetContent, onSetContentName, onSetDetail, onSetKindOfPosts, onSetTopic } from \"../modules/TextEditor\";\n\nfunction useTextEdit() {\n   const data = useSelector((state: RootState) => state.textEdit);\n   const dispatch = useDispatch();\n\n   const setContent = useCallback((content: string) => {\n      dispatch(onSetContent(content));\n   }, [dispatch]);\n\n   const setContentName = useCallback((contentName: string) => {\n      dispatch(onSetContentName(contentName));\n   }, [dispatch]);\n\n   const setTopic = useCallback((topic: string) => {\n      dispatch(onSetTopic(topic));\n   }, [dispatch]);\n\n   const setKindOfPosts = useCallback((kindOf: string) => {\n      dispatch(onSetKindOfPosts(kindOf));\n   }, [dispatch]);\n\n   const setDetail = useCallback((detail: string) => {\n      dispatch(onSetDetail(detail));\n   }, [dispatch]);\n\n\n   return { data, setContent, setContentName, setTopic, setKindOfPosts, setDetail };\n}\n\nexport default useTextEdit;","import React, { useEffect, useState } from \"react\";\nimport util from \"../lib/axios\";\n\n\nfunction CSRF() {\n   const [csrf, setCsrf] = useState(\"\");\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.getCSRTtoken();\n         setCsrf(data);\n      })();\n      return function cleanUp() {\n         setCsrf(\"\");\n      };\n   }, []);\n\n   return csrf;\n}\n\nexport default CSRF;","import React, { useCallback, useEffect, useRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport WriteTopicName from \"component/TextEditor/WriteTopicName\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { formats, modules } from \"../../config/textEditor.config\";\nimport { WriteBox, WriteConditionBox } from \"../../styled-comp\";\nimport { CreateNewTopic, KindOfPosts, PostsDetail, SelectTopic, TextEditBtnBox } from \"component/index\";\nimport useTopic from \"../../useHooks/useTopic\";\nimport useTextEdit from \"../../useHooks/useTextEdit\";\nimport { ITextEditModuleProps } from \"../../modules/TextEditor/textEdit.interface\";\nimport util from \"../../lib/axios\";\nimport { ITopicModuleProps } from \"../../modules/Topic/topic.interface\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\n\n\nconst Editor = ({ history }: any) => {\n   const { login, setNewRequset }: ICommonModuleProps = useCommon();\n   if (!login) history.push(\"/\");\n\n   const csrf = useCSRF();\n\n   const {\n      data,\n      setContent,\n      setContentName,\n      setTopic,\n      setKindOfPosts,\n      setDetail,\n   }: ITextEditModuleProps = useTextEdit();\n\n   const { topic, makeOrDeleteAndReqNewTopics }: ITopicModuleProps = useTopic();\n   const ref = useRef<any>(null);\n\n\n   useEffect(() => {\n      ref.current.focus();\n   }, []);\n\n\n   const onNameChange = useCallback((data: string) => {\n      setContentName(data);\n   }, [setContentName]);\n\n   const rteChange = useCallback((content: any, delta: any, source: any, editor: any) => {\n      setContent(ref.current.state.value);\n   }, [setContent]);\n\n   const onIsChecked = useCallback((name: string) => {\n      setTopic(name);\n   }, [setTopic]);\n\n   const onCheckKindOfPosts = useCallback((kindOf: string) => {\n      setKindOfPosts(kindOf);\n   }, [setKindOfPosts]);\n\n   const onChangeDetail = useCallback((detail: string) => {\n      setDetail(detail);\n   }, [setDetail]);\n\n   const onMakeOrDelteTopic = useCallback(() => {\n      makeOrDeleteAndReqNewTopics();\n   }, [makeOrDeleteAndReqNewTopics]);\n\n   const onSubmit = async (): Promise<void> => {\n      if (data.content === \"\"\n         || data.contentName === \"\"\n         || data.detail === \"\"\n         || data.kindOfPosts === \"\"\n         || data.topicName === \"\") {\n         alert(\"정보를 입력하세요\");\n      } else {\n         const result = await util.savePost(data, csrf);\n         setNewRequset(true);\n         if (result) history.push(\"/\");\n      }\n   };\n\n\n   return (\n      <>\n         <WriteBox>\n            <WriteTopicName onNameChange={onNameChange} />\n            <ReactQuill theme=\"snow\"\n                        onChange={rteChange}\n                        modules={modules}\n                        formats={formats}\n                        placeholder=\"입력하세요.\"\n                        ref={ref} />\n         </WriteBox>\n         <WriteConditionBox>\n            <SelectTopic onIsChecked={onIsChecked} topic={topic} />\n            <CreateNewTopic topic={topic} token={csrf} onMakeOrDelteTopic={onMakeOrDelteTopic} />\n            <KindOfPosts onCheck={onCheckKindOfPosts} />\n            <PostsDetail onChangeDetail={onChangeDetail} />\n            <TextEditBtnBox onSubmit={onSubmit} />\n         </WriteConditionBox>\n      </>\n   );\n};\n\n\nexport default Editor;","import React from \"react\";\nimport { WriteBtnBoxComp, WriteBtnComp } from \"../../styled-comp\";\nimport { ITextEditBtnBoxProps } from \"../../interface/index.interface\";\n\n\nconst TextEditBtnBox = ({ onSubmit }: ITextEditBtnBoxProps) => {\n   return (\n      <WriteBtnBoxComp>\n         <WriteBtnComp onClick={onSubmit}>등록하기</WriteBtnComp>\n         <WriteBtnComp>임시저장</WriteBtnComp>\n      </WriteBtnBoxComp>\n   );\n};\nexport default TextEditBtnBox;","import React, { ChangeEvent } from \"react\";\nimport { SelectKindOfPosts, SelectKindOfPostsBoxComp } from \"../../styled-comp\";\nimport { IKindsOfPostsProps } from \"../../interface/index.interface\";\n\n\nfunction SelectKindOfPost({ onCheck }: IKindsOfPostsProps) {\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      onCheck(e.target.value);\n   };\n\n   return (\n      <SelectKindOfPostsBoxComp>\n         <h1>게시물종류를 선택해주세요</h1>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-notice\" onChange={onChange} value=\"notice\" name='kindofpost' />\n            <label className=\"select-label\" htmlFor=\"kind-of-notice\">공지</label>\n         </SelectKindOfPosts>\n         <SelectKindOfPosts>\n            <input className=\"select-input\" type=\"radio\" id=\"kind-of-posts\" onChange={onChange} value=\"posts\" name='kindofpost' />\n            <label className=\"select-label\" htmlFor=\"kind-of-posts\">게시물</label>\n         </SelectKindOfPosts>\n      </SelectKindOfPostsBoxComp>\n   );\n}\n\nexport default React.memo(SelectKindOfPost);","import React, { ChangeEvent, useState } from \"react\";\nimport { PostsDetailComp } from \"../../styled-comp\";\nimport { IPostsDetailProps } from \"../../interface/index.interface\";\n\n\nfunction PostsDetail({ onChangeDetail }: IPostsDetailProps) {\n\n   const [value, setValue] = useState<string>(\"\");\n\n   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n      onChangeDetail(e.target.value);\n   };\n\n\n   return (\n      <PostsDetailComp>\n         <h1>추가설명을 입력하세요</h1>\n         <input type=\"text\" onChange={onChange} value={value} />\n      </PostsDetailComp>\n   );\n}\n\nexport default React.memo(PostsDetail);","import React, { useState } from \"react\";\nimport { AddTopicBtnComp, CreateNewTopicComp, CreateNewTopicListBoxComp, CreateNewTopicListItemComp, DeleteTopicIconComp } from \"../../styled-comp\";\nimport { MdDelete } from \"react-icons/md\";\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport util from \"../../lib/axios\";\nimport { ICreateNewTopicProps } from \"../../interface/index.interface\";\n\n\nfunction CreateNewTopic({ topic, token, onMakeOrDelteTopic }: ICreateNewTopicProps) {\n   const [click, setClick] = useState<boolean>(false);\n   const [newTopic, setNewtopic] = useState<string>(\"\");\n\n   const setNewTopicName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setNewtopic(e.target.value);\n   };\n\n   const previousMakeNewTopic = () => {\n      setClick(!click);\n   };\n\n   const makeNewTopic = async () => {\n      await util.makeNewTopic(newTopic, token);\n      onMakeOrDelteTopic();\n      setClick(!click);\n      setNewtopic(\"\");\n   };\n\n   const deleteTopic = async (e: React.ChangeEvent<HTMLElement>) => {\n      if (window.confirm(\"정말로 삭제하겠습니까? 삭제하면 정보가 다사라집니다.\")) {\n         await util.deleteTopic((e.currentTarget.dataset.topic) as string, token);\n         onMakeOrDelteTopic();\n      }\n   };\n\n   //TODO 엔터 입력시 만들어버리게\n\n   if (topic === null) return null;\n\n   return (\n      <CreateNewTopicComp>\n         <h1>토픽관리하기</h1>\n         <CreateNewTopicListBoxComp>\n            {topic.map((v: { Tables_in_contents: string }) => (\n               <CreateNewTopicListItemComp key={v[\"Tables_in_contents\"]}>\n                  <span>{v[\"Tables_in_contents\"]}</span>\n                  <DeleteTopicIconComp onClick={deleteTopic} data-topic={v[\"Tables_in_contents\"]}>\n                     <MdDelete />\n                  </DeleteTopicIconComp>\n               </CreateNewTopicListItemComp>\n            ))}\n         </CreateNewTopicListBoxComp>\n\n         {click &&\n         <AddTopicBtnComp>\n            <input type=\"text\" value={newTopic} onChange={setNewTopicName} />\n            <IoIosAddCircle className=\"make-new-topic-btn\" onClick={makeNewTopic} />\n         </AddTopicBtnComp>\n         }\n\n         <IoIosAddCircle className=\"add-new-topic-btn\" onClick={previousMakeNewTopic} />\n      </CreateNewTopicComp>\n   );\n}\n\nexport default React.memo(CreateNewTopic);","import React, { useEffect } from \"react\";\nimport { PostsContainerComp } from \"../../styled-comp\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport { IPostDataProps, IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { Link } from \"react-router-dom\";\nimport { CgHome } from \"react-icons/cg\";\nimport Highlight from \"react-highlight.js\";\nimport createDOMPurify from \"dompurify\";\n\n\nconst DOMPurify = createDOMPurify(window);\n\nfunction PostsContainer({ match }: any) {\n   const { width }: ICommonModuleProps = useCommon();\n   const { getPost, post, onClearPost }: IPostsModuleProps = usePosts();\n   const { data } = post;\n\n   useEffect(() => {\n      getPost(match.params.topic, match.params.postsId);\n      return () => onClearPost();\n   }, [match.params.topic, match.params.postsId, onClearPost, getPost]);\n\n   const MakeHtml = () => ({ __html: DOMPurify.sanitize((data as IPostDataProps).content) });\n\n\n   if (!post.data) return null;\n\n   return (\n      <PostsContainerComp width={width}>\n         <div className=\"posts-container-iconbox\">\n            <Link to=\"/\">\n               <CgHome className=\"icon-tohome\" />\n            </Link>\n         </div>\n         <div className=\"posts-name\">\n            {(data as IPostDataProps).result[0].content_name}\n         </div>\n         <div className=\"posts-detail\">\n            {(data as IPostDataProps).result[0].detail}\n         </div>\n         <Highlight language='react'>\n            <div dangerouslySetInnerHTML={MakeHtml()} className=\"posts-content\" />\n         </Highlight>\n         <div className=\"posts-created\">\n            {(data as IPostDataProps).result[0].created}\n         </div>\n      </PostsContainerComp>\n   );\n}\n\nexport default PostsContainer;","import React, { useCallback } from \"react\";\nimport { EntryPostsContainerComp, EntryPostsItemComp } from \"../../styled-comp\";\nimport { IAllPosts } from \"../../modules/Posts/posts.interface\";\nimport { Link } from \"react-router-dom\";\nimport util from \"../../lib/axios\";\nimport { IoColorWand } from \"react-icons/io5\";\nimport { MdDelete } from \"react-icons/md\";\n\ninterface IEntryPostsContainer {\n   width: number,\n   posts: IAllPosts,\n   deletePost: (posts: any) => void,\n   login: boolean,\n   csrf: string\n}\n\nconst EntryPostsContainer = ({ width, posts, deletePost, login, csrf }: IEntryPostsContainer) => {\n\n   const onModified = useCallback((e: React.MouseEvent<HTMLElement>) => {\n      console.log(2);\n   }, [csrf]);\n\n   const onDelete = useCallback((e: React.MouseEvent<HTMLElement>) => {\n      const uid = (e.currentTarget.parentNode as HTMLElement).dataset.id as string;\n      const topic = (e.currentTarget.parentNode as HTMLElement).dataset.topic as string;\n      (async () => {\n         await util.deletePost(uid, topic, csrf);\n         const newPostsState = posts.data?.filter(item => (item.uid !== uid));\n         deletePost(newPostsState);\n      })();\n   }, [csrf, deletePost, posts.data]);\n\n   return (\n      <EntryPostsContainerComp width={width}>\n         <div>\n            {posts.data?.map((e) => (\n               <EntryPostsItemComp key={e.uid}>\n                  <span className=\"item-created\">{e.created}</span>\n                  <Link to={`/topic/${e.topic}/${e.uid}`}>\n                     <div className=\"item-contentName\">\n                        {e.content_name}\n                     </div>\n                  </Link>\n                  <div className=\"item-detail\">{e.detail}</div>\n                  <section className=\"posts-keyword-box\">\n                     <span className=\"posts-keywords\">\n                           <Link to={`/topic/${e.topic}`}>\n                           {e.topic}\n                           </Link>\n                     </span>\n                  </section>\n                  {login &&\n                  <div className=\"posts-admin-box\" data-id={e.uid} data-topic={e.topic}>\n                     <span className='posts-admin-modify' onClick={onModified}><IoColorWand /></span>\n                     <span className='posts-admin-delete' onClick={onDelete}><MdDelete /></span>\n                  </div>\n                  }\n               </EntryPostsItemComp>\n            ))}\n         </div>\n      </EntryPostsContainerComp>\n   );\n};\n\nexport default (EntryPostsContainer);","export default __webpack_public_path__ + \"static/media/Logo.7ba0ce66.svg\";","import React from \"react\";\nimport { SideBarComp, SideBarMetaDataComp, SideBarThunmbNailComp } from \"../../styled-comp\";\nimport { Link } from \"react-router-dom\";\nimport { GoMarkGithub } from \"react-icons/go\";\nimport { CgHome } from \"react-icons/cg\";\nimport { HiOutlineMail } from \"react-icons/hi\";\nimport logo from \"../../image/Logo.svg\";\nimport { SideNavBarTopic } from \"../index\";\n\ninterface ISideBarNavContainer {\n   topic: any[]\n   login: boolean\n}\n\nconst backGround = {\n   backgroundImage: `url(${logo})`,\n   backgroundSize: \"contain\",\n   backgroundPosition: \"50% 50%\",\n   backgroundRepeat: \"no-repeat\",\n};\n\nfunction SideBarNavContainer({ topic, login }: ISideBarNavContainer) {\n   return (\n      <SideBarComp>\n         <SideBarThunmbNailComp style={backGround} />\n         <SideBarMetaDataComp>\n            <div className=\"sidebar-names\">junggri</div>\n            <div className=\"sidebar-posi posi1\">backend engineer</div>\n            <div className=\"sidebar-posi posi2\">frontend engineer</div>\n         </SideBarMetaDataComp>\n         <SideNavBarTopic topic={topic} />\n         <div className=\"sidebar-icons-box\">\n            <GoMarkGithub className=\"icon-github\" onClick={() => {\n               window.open(\"https://github.com/junggri\", \"_blank\");\n            }} />\n            <Link to=\"/\">\n               <CgHome className=\"icon-tohome\" />\n            </Link>\n            <HiOutlineMail className=\"icon-mail\" onClick={() => {\n               window.location.href = \"mailto:jjuu6933@naver.com\";\n            }} />\n         </div>\n         {login &&\n         <Link to=\"/write\">\n            <span className=\"write-article-btn\">새 글 쓰기</span>\n         </Link>\n         }\n         <div className=\"sidebar-copyright\">Copyright 2021. junggri All rights reserved.</div>\n         <div className=\"sidebar-divider\" />\n      </SideBarComp>\n   );\n}\n\nexport default React.memo(SideBarNavContainer);","import React from \"react\";\nimport { SideBarPostsContainerComp, SideBarPostsItemComp } from \"../../styled-comp\";\n\ninterface ISideBarNavContainer {\n   topic: any[]\n}\n\n\nfunction SideNavBarTopic({ topic }: ISideBarNavContainer) {\n   return (\n      <SideBarPostsContainerComp>\n         {topic.map(e => (\n            <SideBarPostsItemComp to={`/topic/${e.Tables_in_contents}`} key={e.Tables_in_contents}>\n               <span>\n                  {e.Tables_in_contents}\n               </span>\n            </SideBarPostsItemComp>\n         ))}\n      </SideBarPostsContainerComp>\n   );\n}\n\nexport default React.memo(SideNavBarTopic);","import React, { useEffect } from \"react\";\nimport { SpecificTopicContainerComp, SpecificTopicItemsComp } from \"../../styled-comp\";\nimport { IPostsProps } from \"../../modules/Posts/posts.interface\";\n\ninterface ISpecificTopicContainer {\n   width: number;\n   match: any\n   onGetPosts: (params: string) => void\n   posts: IPostsProps\n\n}\n\nfunction SpecificTopicContainer({ width, match, onGetPosts, posts }: ISpecificTopicContainer) {\n   const params = match.params.topic;\n\n   useEffect(() => {\n      onGetPosts(params);\n   }, [params, onGetPosts]);\n\n   if (!posts.data) return null;\n\n   return (\n\n      <SpecificTopicContainerComp width={width}>\n         {posts.data.map((e) => (\n            <SpecificTopicItemsComp key={e.uid} to={`/topic/${e.topic}/${e.uid}`}>\n               <span className=\"item-created\">{e.created}</span>\n               <div className=\"item-contentName\">{e.content_name}</div>\n               <div className=\"item-detail\">{e.detail}</div>\n               <section className=\"posts-keyword-box\">\n                  <span className=\"posts-keywords\">\n                     <span>\n                        {e.topic}\n                     </span>\n                  </span>\n               </section>\n            </SpecificTopicItemsComp>\n         ))}\n      </SpecificTopicContainerComp>\n   );\n}\n\nexport default SpecificTopicContainer;","import React, { useEffect } from \"react\";\nimport useCommon from \"./useCommon\";\nimport util from \"../lib/axios\";\n\nfunction LoginFlag() {\n   const { onSetLogin } = useCommon();\n\n   useEffect(() => {\n      (async () => {\n         const { data } = await util.checkJWTToken();\n         data.decoded ? onSetLogin(true) : onSetLogin(false);\n      })();\n   }, [onSetLogin]);\n\n}\n\nexport default LoginFlag;","import React, { useEffect } from \"react\";\nimport { EntryContainerComp } from \"../../styled-comp\";\nimport useCommon from \"../../useHooks/useCommon\";\nimport useTopic from \"../../useHooks/useTopic\";\nimport { ICommonModuleProps } from \"../../modules/Common/common.interface\";\nimport usePosts from \"../../useHooks/usePosts\";\nimport { IPostsModuleProps } from \"../../modules/Posts/posts.interface\";\nimport { EntryPostsContainer, SideBarContainer, SpecificTopicContainer } from \"component/index\";\nimport { Route } from \"react-router-dom\";\nimport useLoginFlag from \"../../useHooks/useLoginFlag\";\nimport useCSRF from \"../../useHooks/useCSRF\";\nimport { ITopicModuleProps } from \"../../modules/Topic/topic.interface\";\n\nfunction CommonEntry({ match }: any) {\n   const csrf = useCSRF();\n   const { topic, requestTopic }: ITopicModuleProps = useTopic();\n   const { width, login, newRequest, setNewRequset }: ICommonModuleProps = useCommon();\n   const { AllPosts, posts, getPosts, deletePost, getAllPosts }: IPostsModuleProps = usePosts();\n\n\n   useEffect(() => {\n      if (newRequest) {\n         requestTopic();\n         getAllPosts();\n         setNewRequset(false);\n      }\n   }, [getAllPosts, newRequest, setNewRequset, requestTopic]);\n\n   useLoginFlag();\n\n\n   //TODO 최적화 진행하기!!!!!!!!!!!!!!!!!\n\n   if (!topic) return null;\n\n   return (\n      <EntryContainerComp width={width}>\n         <SideBarContainer topic={topic} login={login} />\n         <Route path=\"/\" exact render={() => (\n            <EntryPostsContainer\n               width={width}\n               posts={AllPosts}\n               deletePost={deletePost}\n               login={login}\n               csrf={csrf}\n            />\n         )} />\n         <Route path=\"/topic/:topic\" exact render={() => (\n            <SpecificTopicContainer\n               width={width}\n               match={match}\n               onGetPosts={getPosts}\n               posts={posts}\n            />\n         )} />\n      </EntryContainerComp>\n   );\n}\n\nexport default CommonEntry;","import React from \"react\";\nimport CommonEntry from \"../component/Home/CommonEntry\";\n\n\nconst Entry = ({ match }: any) => {\n   return (\n      <>\n         <CommonEntry match={match} />\n      </>\n   );\n};\n\nexport default Entry;\n","import React from \"react\";\nimport { Editor } from \"component\";\nimport \"../../node_modules/react-quill/dist/quill.snow.css\";\n\n\nfunction TextEditor({ history }: any) {\n   return <Editor history={history} />;\n}\n\nexport default TextEditor;\n","import React from \"react\";\nimport { PostsContainer } from \"../component\";\n\nfunction Posts({ match }: any) {\n\n   return (\n      <PostsContainer match={match} />\n   );\n}\n\nexport default Posts;","import React, { useRef, useState } from \"react\";\nimport { AdminLoginBoxComp } from \"../styled-comp\";\nimport util from \"../lib/axios\";\nimport useCSRF from \"../useHooks/useCSRF\";\n\nfunction Admin({ history }: any) {\n   const [user, setUser] = useState({\n      id: \"\",\n      pwd: \"\",\n      number: \"\",\n   });\n\n   const [visivle, setVisible] = useState<boolean>(false);\n   const [number, setNumber] = useState<number>(0);\n   const [certification, setCertification] = useState<boolean>(false);\n   const count = useRef(0);\n\n\n   const csrf = useCSRF();\n\n\n   const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setUser(state => ({\n         ...state,\n         [e.target.name]: e.target.value,\n      }));\n   };\n\n\n   const onSubmit = async () => {\n      // console.log(count.current);TODO 3번이상일때 디비에 잠금걸자.\n      const { data } = await util.adminLogin(user, csrf);\n      if (!data.state) count.current++;\n      else {\n         setCertification(true);\n      }\n      setVisible(true);\n      setNumber(data.number);\n   };\n\n   const onCertificationPhone = async () => {\n      if (parseInt(user.number) === number && certification) {\n         await util.setToken(csrf);\n         history.push(\"/\");\n      } else {\n         count.current++;\n      }\n   };\n\n\n   return (\n      <AdminLoginBoxComp>\n         <div className=\"login-inputbox\">\n            <input type=\"text\" name=\"id\" value={user.id} placeholder=\"아이디\" onChange={onChange} />\n            <input type=\"password\" name=\"pwd\" value={user.pwd} placeholder=\"비밀번호\" onChange={onChange} />\n         </div>\n         {visivle &&\n         <div className=\"certification-numberBox\">\n            <input type=\"text\" value={user.number} name=\"number\" onChange={onChange} />\n            <button onClick={onCertificationPhone}>\n               확인하기\n            </button>\n         </div>\n         }\n         <button className=\"login-btn\" onClick={onSubmit}>\n            인증시작하기\n         </button>\n      </AdminLoginBoxComp>\n   );\n}\n\nexport default Admin;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Admin, Entry, Posts, TextEditor } from \"pages\";\n\nfunction App() {\n   return (\n      <BrowserRouter>\n         <div id=\"App\">\n            <Switch>\n               <Route path=\"/\" exact component={Entry} />\n               <Route path=\"/topic/:topic\" exact component={Entry} />\n               <Route path=\"/topic/:topic/:postsId\" exact component={Posts} />\n               <Route path=\"/write\" component={TextEditor} />\n               <Route path=\"/admin/leejeongsoo\" component={Admin} />\n               <Route render={() => <h1>Not found</h1>} />\n            </Switch>\n         </div>\n      </BrowserRouter>\n   );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport posts from \"./Posts\";\nimport common from \"./Common\";\nimport topic from \"./Topic\";\nimport textEdit from \"./TextEditor\";\n\nconst rootReducer = combineReducers({ posts, common, topic, textEdit });\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","const TokenMiddleWare = (store: any) => (next: any) => (action: any) => {\n   next(action);\n};\n\nexport default TokenMiddleWare;","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../modules\";\nimport Thunk from \"redux-thunk\";\nimport TokenMiddleWare from \"../middleWare/TokenMiddleWare\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\n\nconst middleWares = [Thunk, TokenMiddleWare];\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleWares)));\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./shared/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./lib/store\";\nimport \"../src/styles/highlight/atom-one-light.css\";\n\n\nReactDOM.render(\n   <>\n      <Provider store={store}>\n         <GlobalStyles />\n         <App />\n      </Provider>\n   </>,\n   document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}